%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: tp_requete_http.dvi
%%CreationDate: Wed Mar 09 16:09:31 2022
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFBX2488 SFRM2488 SFRM1200 SFBX1200 SFBX1440 SFSS1200
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o tp_requete_http.ps
%+ tp_requete_http.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.03.09:1709
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-blur.pro 0 0
%%
%% This is file `pst-blur.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-blur.dtx  (with options: `prolog')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from pst-blur.pro.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file pst-blur.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%% $Id: pst-blur.dtx,v 2.0 2005/09/08 09:48:33 giese Exp $
%%
%% Copyright 1998-2007 Martin Giese, mgiese@risc.uni-linz.ac.at
%%                     Herbert Voss, voss@pstricks.de
%%
%% This file is under the LaTeX Project Public License
%% See CTAN archives in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-blur' is a PSTricks package for blurred shadows
%%
/tx@PstBlurDict 60 dict def
tx@PstBlurDict begin
/Iterate {
  /SegLines ED
  /ThisB ED /ThisG ED /ThisR ED
  /NextB ED /NextG ED /NextR ED
  /W 2.0 BlurRadius mul def
  /WDec W SegLines div def
  /RInc NextR ThisR sub SegLines div def
  /GInc NextG ThisG sub SegLines div def
  /BInc NextB ThisB sub SegLines div def
  /R ThisR def
  /G ThisG def
  /B ThisB def
  SegLines {
    R G B
    sqrt 3 1 roll sqrt 3 1 roll sqrt 3 1 roll
    setrgbcolor
    gsave W setlinewidth
    stroke grestore
    /W W WDec sub def
    /R R RInc add def
    /G G GInc add def
    /B B BInc add def
  } bind repeat
} def
/BlurShadow {
  Shadow
  /BlurSteps ED
  /BlurRadius ED
  dup mul /BEnd ED dup mul /GEnd ED dup mul /REnd ED
  dup mul /BBeg ED dup mul /GBeg ED dup mul /RBeg ED
  RBeg REnd add 0.5 mul /RMid ED
  GBeg GEnd add 0.5 mul /GMid ED
  BBeg BEnd add 0.5 mul /BMid ED
  /OuterSteps BlurSteps 2 div cvi def
  /InnerSteps BlurSteps OuterSteps sub def
  1 setlinejoin
  RMid GMid BMid REnd GEnd BEnd OuterSteps Iterate
  gsave RBeg sqrt GBeg sqrt BBeg sqrt setrgbcolor fill grestore
  clip
  0 setlinejoin
  RMid GMid BMid RBeg GBeg BBeg InnerSteps Iterate
} def
end

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 861 2018-12-13 20:40:06Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.17 / 2018-12-13  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps5 1.0e-05 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 32 gt { pop 1e32 } {
    dup 0 eq { 1 }{ 
      dup 1 gt { dup 1 sub factorial mul } if }
    ifelse } ifelse 
} def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%%
/Si { % integral sin from 0 to x (arg on stack)
  10 dict begin				% hold all local
  dup 0 eq 
  { pop 0 } 
  { 
    /arg exch def  % x
    /arg2 arg dup mul def
    /Sum arg def   %
    /sign -1 def   
    /I 3 def
    /Frac arg2 arg mul 6 div def
    { %  a sequence of x - x^3/(3*3!) + x^5/(5*5!) -...+...
      Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
      /sign sign neg def
      /I I 2 add def
      Frac arg2 mul I 1 sub I mul div /Frac ED
%    arg I Power dup abs 1e30 gt { pop exit } if
%    I factorial div I div sign mul 
%    dup abs eps8 lt { pop exit } if 
%    Sum add /Sum exch def
%    /sign sign neg def
%    /I I 2 add def
   } loop
   Sum
  } ifelse
  end
} def
%
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
%
/Ci { % integral cosin from x to infty (arg on stack)
  10 dict begin				% hold all local
  abs /arg exch def
  arg 0 eq { 0 } { 
    /arg2 arg dup mul def 
    /Sum CEuler arg ln add def
    /sign -1 def
    /I 2 def
    /Frac arg2 2 div def % first fraction
    { Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
     /sign sign neg def
     /I I 2 add def
     Frac arg2 mul I 1 sub I mul div /Frac ED
    } loop
    Sum
  } ifelse
  end
} def
%
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M useXVal   --- simple version ---
% /SFunc must be defined 
  /useX ED  % for algebraic functions which uses f(x)
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /xVal k 2 mul 1 sub h mul a add def
    /s1 s1 xVal useX { /x exch def } if SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /xVal k 2 mul h mul a add def
    /s2 s2 xVal useX { /x exch def } if SFunc add def
  } for
  /I a useX { /x exch def } if SFunc b useX { /x exch def } if SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: SFSS1200
%!FontType1-1.0: SFSS1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecss1200, tcss1200, lass1200, lbss1200, lcss1200, rxss1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Sans Serif) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFSS1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-197 -321 1455 895}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839D875E65955260BEE4FD2EE46C4CF0F
EBB56CF719D83812B0CCCA99506907D390244B14CBFEB79D52658E88D4D4AAF5
6EB24DBB527DCBA8F432EFDC13764823BD046DDD10F18279AB5535003ACEA6F7
EEC7F9EB81F17B0B61C2AEC870DF108219795AD73918BECC47853CC4D192C4DD
F0C94E2D477E3737D801D9F1238820CF0AC671EEA2BF41A027E2C3BB420FAC65
91347049BBD4B735BF006DF39CEBE0FF4A310B1C70D087326C54337F8EC36C88
7328908888D67CE61273690B2F7993F5BB0DB7593C96273BE448D924903CA1E4
1CEEEA91F50683773CCAF7073258CBFCF2E671FD0AC9C2F147FB3A2AA8E4F4DE
C64CF9127209DA3742C8FF678F053BAE630E1086520BB2B4B29752224863BC52
0DDEFDBD6B5FCFAAB31E759E604DCA487EFFCECF5436FD74FB29B56BB903A97B
CC0CB60B12F82ABF3D080BAC8E1E951424F93184B9451505B8CB4549E58A8429
C864A8F4638DE32E3E1B9DC968EE31210331270FC86FAE7634D396CA6B5FC99B
9F6975A218D55BE8658B383BB613F6390B7107A5127B266273E7B4C69CB3671F
BF6742D64FF368CDB22924D4DA24B1196585A2E525B2BC49C0ED21AD8727797B
708A13CB581233B7FB519C78E166E7894E1107FC84F103977B9731140F397F41
09368A85A614F300424150A03194FAA04DE41E7F73C25D7AD3FB16949435FC37
BEDA5698D5B4B80F21C97EF15B489F21359ACF70693BE37C08365985F7D9A1C7
D2496B5C5A5D8E2C6EDC48152DB08FB51496C22134E8275013369298044797CC
CA4FE1A530D0B1DFAB45FD127941CCEBD1D8A6BD856CCA3D79BBD8C9EA01130E
7EF6A9FC7FBC29502B32C21B8C83A35C00F1073FEBDBAC49D7548E5F25FCE125
421E29DFDB6EBFF4C0080EF1A47E4614BE7C953DFA6B6F5ADFFD90CF72ACB148
4FBC17AFB4E31B4E6C689BB54227FD7BC1FB5C5F5959E806B7DDCED2CC26324B
ACBEF056AB7136FB4FD66EA439E277D5CB9703234290D24870FAFC5768D40CB8
DBCD3C32A0206F4C52B15F5FA7EAD1994EB72758D43E39503827E1E4CF6D1996
2FBC544432BA176B4B5DDD2776D6CDD0DBA9D9E8ED2A24847A04449975FA4633
0B08D1B3E89F899799A6D881690F8976A67182B171399D7BE340C7F804400B35
5B79BF01C56AAD4FA0B5B7A967327FCE6E1CFFACF16698520A08991376D92989
550F1490D947558EA0EEEB575FFEA05997C67BC8A2024087ED442216EFE32083
A7626FBE5B9420B60AE9371EA684AE896F3AB1F19117BC34CD778B057EBD29C3
DD1B29D5B3FF77D030F0DE78306BC193F6DB808F300E436DDAE1B6F8F33633BA
03A486D0EA95D933D6E1B874BA6AB0F43F3F733871CEF4515557CFDC6214A570
113CED02EBDA16C41214FFA23EEE44C3C8518971E3C20B3B5674680FF39C7E68
A73055B509168898F0B3866DB303E4EA0493A868B9C58364FCF19D069623E394
1AA8F028F8467581A6FB4A16087A0EBC965551E942D28806B3432C169BDFD6C7
00D9B5168E410FA51B43B76D574033C78F337A8DCBE1544DBB735659CE152AE8
FD1FE336BE67EC5EDDB399DCA2F57D33E98EC19F6B691AFA7AB9C5C94B11A5DF
F770A33B99E78BAC461DFF4D671835DDF1654AD02A97B54E9B468BAC685829A4
7BE1E80A7F92FD1D0799655022E2D14BDE2DA5013391B037CBFEE5A11B3EB2A3
2E2CE4E1F461F65667F5674D81F82F434ED949163FCE3BE2292943A9A63F7AF2
93CFC241D079805539BD165836E05EE2FBCD122ED134986229422526046B27F5
9EF72259CE1A8CE50A8FA91F9B68A2AE1498BBF3176B8003D24BBFA7E2D95FA1
D83DFE742D63A4E89D1838A585862FECBC66E592951B674C4DC9D1D04AC9C488
F1294ECBC51C56EF4C90517EF8AF6C24413392E6ECAAB5634C474344B3A8764F
0BBD54A3214F791D6C9EC82CF99AA9868EAA690A15F793D64CFAC2FE47D6D3A4
545BE1C5494CFF536C6E0C19E903D3CCD64F0E18EC28A96CC8CE2A27D097080B
F26829BE9E7D8B7DB8AC8F315F3441B03AC7694AD9DE7E2D0BF854B6433ABB0C
95B641F7074ACFF90DC0B4E98EA928A31F2EB54511AB40012148E4F33636C4F5
C226AADE0DE1C8AB9BF19A5BB8741B68891916759B9CDF46524CDEAE55D0B63C
D276A35E31BED5F2103319968B96989AD1834E6A673286816C7E2AA1707D3760
F03CD7F5FFEA86E9AE215C79C1CC6A1C88EF8AA0054F2A2860EE7EA14ADAC936
7195494A788A84D4B0D135054E3DCE916DF17B3EB7DE1C923C928C3152D8F88D
D499F54D834FCFFD11FD8DA623BFBD55719704770DA4E413A9E5A69C89209BC7
192858F592CA12DADDD725AB78E8C5B3C3D1291CEEA956D6958D78BB1C8AD739
BCED3DFEF2E389E02803393000CEB19548D41CB6D5846434F37294723C825B0D
6143B227C39EBDE137F15AC4957F58F65492549A6281584F0250CAB67C8F9062
C2A427813AA067E59404F9851D7E4B1168FD10C1B3F46FB2A1B27CF25A80C4C8
B98E21A1F27153C874D9E7D1F2FD32C072B673CC911DFC194F0249BDFB194427
9C147166ED125B5C4032E97FDA8BD4FFA26FED542BE261B55C9323948002637C
A12095D5653645F56AA97EBC23452DF54E5E0B58C8DB20999CB4F217312D6BBB
FAA486A6F629B801453ED2F28B1B9EDBF536BC0DE94E55913B7576A2A462E9C8
ADEA74041B3B0732BB750F2A23612B3CF35F42A7145BBF16462EE5D9BDA5D89F
2EE9387620FA28E28FE313E448FB954363E6F48C3B8DA29FF0ED7EA02E8D9D06
EAD01C34FC5FFAE11212F993C8962C81205CE41DEE1B2A3A76608AC6E26C70B0
28F5D1B0B9DF6643B869260246FD78C82B873971D49922CD7C270A13F0B82B98
CA91767F219BDBFE858BD61A34899F898B892F4B74CEFBE1133F42216A11F2D2
02F0CD44005AF9E1A2AFFCB613BAECFADDFC496CD1EFF18EBFAC7D28BD9F35A4
75ACA3C17D3345F693B38062F588149C84C6E8A2591683B55BDDBF11E7E942D5
F370C7A4582303E35D5DEDDF919D446165198CA6110438D918394F20CA784B6F
8C9E0B72B12AAD6A8D96756DD0E585C51796B885176789C75CAC236DD509C826
DCB5C6F445770D06890464D56D7C7D7554E118AB6DA3F5432E87666B3EA353C1
66CD05D5AB7DC23CFC1D1D38BAAAFF481CF3B5200C19FF70E8B57FF80F2C7C27
B9E8DC5DD83EA858CDC797043F190575957A83F94EAB8587031174CC324C3220
51A7D11D35BD930FAA27BC25E6347CB4236ED902D12E69AD562A4D800E229F3F
ED8871FF0A8B3DAB67CD4F9170AA7C2DD178A0491432D70D1417541EA6139095
0CF87C722EBA18B6BAF602E631BD20B064F38BFF2673E46C72AAAE8FF80BB3DC
AB92E0C6A16EE8859CA5A4C7D91581C9885CA8A525BD078CAADCB763BA148501
DF9DF82BD3CE9958966B6E920FA0D6BB6144AE8867B5BFB100ADD37C1E46A234
9B62E2878E608D7CFE0105C040A7713BEB9BAAA38108E34D32819CF769EC2C32
2580AFFD41A9EE23394E896163B5CB8F1BD2553F6FC92DA11DF74F2E930A6CF1
0EE9E7C35B751D3B44C8C29F515AF333A7E2C594F568B0C259DFEBA0EE5DCC46
4A70BAFCDBCF8D889D05418DF210BA90D65E9A64F8E9E6A328BF57F4FE7820B9
1B690B6503B707E611AE1447F8021E454A7B43F3D5998445A6CB62DD34E1A30C
35D2B7CAABF3EEE295D7D147B0AC8255418679A9415DCEC75C84CB5397D17943
43921E11106954C59C552748F4BF13E2B80648AB20DECE3F75D7B6653DA44C48
75F78B8615D6A61AA95C294319806D4C5759EEEBB23DBAD8AED202BDAC7FF728
00B470F69081D479CA5B0244D7177888D045FA24AD8297BD5A79A739343128AF
48D89A52FED016E3AF442198783BA82A9E82CB0863CA1DE9F91AF50A8669FCCA
CC7455AFC8C0315E091F716A77D1049AFE447C0A3B03C83FC4B7B95F42473006
5D914FCF32D4364A9CCE50780309964BE5E6D73695114D0616EEEE39EA944975
51B7324751F5E3B2AAFD32A729D0476E27812A6B892BD5A64942B6B90FFBB765
44C41498A90562BC9701C6ECBE840E65CE275CA8BB73BA8C3D531D43BE82C54C
929C71F5D7BD278EA46A0ED7B2105A740C30D1F121185423813A855DD1FAD30B
15C5627E6185B280E6D1F6240C36FF9C5C423A273B5BEC9F8C5D0B9F4724A650
8B408909BAF28D45D1A5322C1051A03A7907A725B3B2811F52B9D9EBFF7E1D68
1C6043AFE0663E93FF2040E07FA087FDA110A93430C7FAD21D5EEE8717086684
BC2D4F757FD2D922AA4A1BD48F4DA5D66463D6FCA0326224E63054AFA545563F
D288F74192AB98F347697A61A508795CFFCBEAFDDD7DC740742D3CE607700182
07A9CE111A32FCFBBD18095980B1AC6995FD6E17404345DFE38FDD969E532019
BF5CE7050BE209E73C0EF588E02354B723D90D64677C10A641DBADAA9B42AEB6
DDE4411FDA5A2550115BD56D063AD449234F04AA7720241888D3B8A97F5F335E
D8E0E9B26E0281E13EE25EAC08943710FC63E0CC2B1AB20ACD452F67318FABE1
4467AA8B1B5FCB8F4793D691586DACB628F3C6FDD85B915AAC8DEF3F736DE09B
AFDC23595C3387D1C9876F11EBBF01D058FDC990C3DDD3F364EC927F746722C2
39DE7285F1C1C7236E645031C3956D6E0B353DDB0209BF0E63A39F0ABC1D326A
EE2A6DD0BEE3147C421364878591ABADEAB2550914DCF27C6B94AB78753E0431
1775DE97A802E45496D7C99408D9C5C6BA8358972E8167DEA1649F500D7CA69A
B97673FD4284B8D14F4872A43AFF5AEAB99D75BC5B6AF050A75FB9E0134B8D18
35D91A668109838CD5A0EE2B513337F4F3052F95726CA3576B23842B11A789F2
35E34BB839E4DC23EAC7C94A3EACEF4393D91E6461500471693B912992BC817E
704A061D8761B15D6CFD43052DC67236E08C79AF72EB737B792AAED625AA5CDC
3399DDDB50343CA39217636961A27C1CC846D005897FF89A41B2BD4799C81A3D
08DF54D34CD741710D5E05776A25EB4676DDA48FC93B6ECED75C73B3660EAFB9
8702D1A7ED75698E825D7778BE3CF49987BC2F766156316B82BEE3AB369BD6EB
FA968FE2E10C45F01232B28714C40386777DD756390D2674F3524140C463E318
276DFAA306A06F1707EBA920D37D7B31CA9C0FE906B8C1024D6F0F00EF3C5EE1
96BAEA1B686223A695B45F5B9309D75CEDEA215B206F6D88F9B651B7295550ED
0670D15F1CBB92E0DA8C152EF4B01165EAE6054AFD0A6A63C1F2FD830262FBD4
035FAAD6F36DEE2A2DCF1F6B62F97B1EA416382D109C2D67621B6EF21D2DBDE7
6CEAF3D2342BE69392BFCC62FD093191C462F398E72FC39D56A25F28F62E63ED
DD970231A7FBA4D8CBFA83C6C5A5AB819CEF1B325F61255753B7E31805DAD043
CBAB10FF23E2387BEB8AED72C2AF3F39B9F44A9DE53E47A5061DB46D3EA39E95
B9793C97C1DE55B859595DE5800B2B623E0488BECDD26DBB0B3FC66FB0857BFC
16F30531FFC2D3463B8202071953F9969B1949C3A7348421C00059416CAC451B
A806E6393849101E18BEC7A472BA97D23474A7DB1157A5F192F2646BF7F6ACE8
3B58F8DBF491692E8AF2D73F6A5AF800C7C20A2332C56824BB6E7C6101AF5B44
9C467A79E1DED13B3383B3B9100BB8F426D4C80A79B71CCA5EA45FFFCB574259
0ED2A819AB14396C6829C8DDF86CD8BC78E1AB93692DA646681B6BDCECD40EF5
7327A5255DC3B21C94594116E0ED75DF771393F5DFDF1ED421993F727ACDCFAD
9F30080C857E92A2614CCA05073141C80EF1C76315BC3528BBF43BA55B66ADF5
E35A75F5C0D54167E37CA1A49A7A8B565A472831F06DFA30612CB73F0C4EC8E6
4AA8E1AEC4883C93AD7F4AC9D34DCF5C41C774F316B95F5F4C08682D73D31EFD
77024F7A099C3418FD9567D44CF8C08107DFB9C648B16B0D4ABE2C5A450D0A9A
F03435E1294131FC41F3FAFCFE05F84A44D47E5C18B4B4BEB54F261AC39A3877
8C937980087C6032706A8245D2AE2EBF76B8477331B2A26D70E57DAA25F48C24
A8EF2A0674ECF0D7A456C109B804C45A491D7AEB0B0E2C7C1776855565F04EE1
439E5E8053B50396937FEABC93207992458106DE89196053C13D34B4A0D3FBE2
60E1237D3701239205283CE90F6421DA95DB798DD1FCEFA2667B487A9DF5CF6C
9879ED163B00ED3E874EC152E3A4F818C3B1A1C7A0CB608456BCF9B142973FA5
3DAF7860F2C9D0DBED7EA618CE223F4CBCDD03F51C0B009B86451C8C8C8BF844
5ACA65D9B3AEEE68CC87B7529181FEEBB743BEA31CBC37EFA23ABCF35A5EAD76
36185A5DC7408CB988D591B5F8D8E9270F84C3A178796DD0783F93A529270B59
A71A786B06895FDEA717593DF51CF7E2D279D9963FC18B0142B40C46E5513641
22199525D77F9DF706F9E009F8D276745C88DA2EC25B75C01085E9FBBF32891B
8F2DD3428DD96AB93E3A62FF7E08F1B69387714E21E6C23C7AFFFF0C5E0A88BE
BCB629C9661190539DD3565AC9CAFC9C27688B0DC75E790B8C3BF5FAA2C6D0FD
8C55B326F44A013638474B2F2784D24F88860821DC1E5BFED07C3F3181B7E182
7E41DA7C7DABADE3D426F89EC4F0EF5A35D866DBE7F29A584793883D4E4E5B82
40DA8390B07F4C3F729C4CB9D278D68A91356CFF9C845B236651AD4B31D4BED5
8C17846DE1D727184463D0538D597F6C89318C95575B83C006A8F0F00CAA024F
7DD2E55EE432543CF05067E5765882645EDA600EFA1E7D096BC3496BA5C760B3
FDEE138C0213688E66FC8065DCF3D8AFEE0DF07A543EABD0412C8CA7BEB97CF4
D0172757515E552E41C995D60ADE5D2E6A2F2545B0CD8B50EEF72F2EC37BA2DF
DA6B00149092F09A63C681536AFE863CFB0A8845ADB02479586AD4366A75D8D7
236B93BA8CDF07076529679EF111D4AB63A2ACDF7B66BEA904D529E005007E35
EFEBDD0D2F7C094A87F352E85ACC8102ED851740EB95D9E03CD928B671BFFBC9
6D24017898F27EE07964F3B04B2E3939C506EC7E98E3A910F87F0E7745B6E7E3
77278A34B181B01408CF652612E409390142BEA3D34FD9766AD8A287A23D089D
71815A8DF0CC4EFAEE582D0048908980BB7419C397B0B71A9545E608E64FC61E
CC9959A404DCE764F8AB585C26ACE90BE4C2461DB7839361A1FF701EF9871DD0
8E229481F319AA50F05759EFC542D8B5E3DDCB086045BA2FEE00D00D14106AB3
7EACBF19B48738B5B3BDC9B7C70E924809EF5F38944863516B1C688CE2A841D5
721C6E1799FF16A319C717FB2DA74F43DD5BF8D8AC0D5A27F5229C1E361D6C43
B5AF99632083D35FA687DF7DC3B76EEE5904CAF14A996A59E48AEC20957B96CB
F7284EAD25F73B34E3DCEE17348D9AB2153D987825CE5150CE64CE5E60197663
36E629BEC1687BDBF9BFD66DC60C3D15AE5D01B2E09194FAF83A6F9BBDE47B16
89F72334008A62559E8D3685EFFF605546465D1D51CF4C6868FA7746840EDAB6
6F9FD75C1D0316C042CC52F279FEEA88539A4E42B73A9B810D070DF1F618F960
1E8DA386136A2CA71237861C5C69BD5ECC860AED6788940C2E90870D82B681A9
8D2FF06C761763422CB081ED9FBF7DD5CDAE7AA0E94BE88FC69A121273167C89
75A3938AF342DD0A84D4963DC5BB62DA56CAE271F4DC09F71F2B4C1EC7ECB4E9
408FD89D2CA2867BB4B68A580366ADC0D9957E955D0B861AE407B995E19933CB
AD9EDA1B9870F628A560B8B129F80EA04BBD99936D0283A957155DBCEBEBBBAA
EA64F44FCD4C82DE83BDC6A212592308842740FA8F346235602764445C177235
27D35DC3AE85711397B996D56ADA615D58C58CADC39C62D7F728572ED8349182
1C9F11629C23FACCEA8C2E238B34A44A14743EE1C9DC8F0D904CD7598D47E8EE
C552365442CFEA7C40774E79FCD1EE08B5020837031D7FC78944B5294AF634A4
522FD1B2B0BA5D2020E5090A333CA149724E226736526F5680F6A72D7D16CEA2
0E26E66FF7FAE3068468A09474655DE4D90F74168861B75F4E39D600BC93A5E2
1221BCFBC9711DB8B7689E5EC50A57E95A6FBBE404E2A5F6FF00D2F662E02A8F
ECFD780701C11A2D0FEBE3D8B586D52F8D656097D65D9F39908B4C85C13AF52E
320DF3EE3B411724B861B7BABF1E3CD5279AE97EBB407AB443420CA2A321B25A
D1B10401AF4FE8792DCE3CD6A95EFAE0153F5252F1D2BB60453CB608761536F5
2AB3DA276A79E6736E95E6CA82E42D22BDC34248FE16EA4F690C790C0FB5FA65
2C6CB6D67EA8415B6A6C185A0AD426259126F62704F47A97249DF495D05338B9
2645C49F5B790895B5A305EA4CCD54EF4DBDDB3B1EAE1348D1FFDB38901EFA90
DFD8EDE2EB16458E2ABCD48BF0E061B9C58CE6BE83BC9918D07EA765030F01EC
DE8A2041AF07876F4FB6094902F46E8FE377EA361199CC5CE5987A432FC289F3
FC214B9FE8E056E7F13881CF9F3DAAE70EC2973D5200A8A3B6AE4B07CC6352C6
1F7393B63096564709E183AC9C084A9C01416E6E40BBD70461E98B5C96FA7EED
C249A150E63AED71D1FBAE69DE40A35723D9CCEBE732147DE5423F1CA194B42A
092C011257D9414AF0C9944FAF4FB71DDA241E39970023DCCD94BF65682D42A3
2B35A55853FE9559C1376F68C14CBF41D1E9C5DA698B0253AEB5BC24749284A8
BFF254D95CB819F1783F71C9674701618C0DFE4F89C487700DED58805AB2CB98
FF0FC1E225D2D244B7E83B0492D27930F1957F0F9893EC479EBB5128D1F4C20E
8C2EEFA052E39F0E6E2BCFD354E80A88194C5E4E2DD565DF62C61E1C35938319
202EC5313FE65AB2D69FE6B76B9F10141DB9BC728F9F1052367C9F2420176380
A9D6B9CCA9E0C1E04F69A48334FB9C55A35C521DE0A0DAACCB83DCC99058008C
15E09CB85C092DAF0B6AD543CA409446EBCB897442F47374824F0A25878764FF
657DD72BF7B5791AAA0E67CB62379D46C43E46356373A58968071089888120B8
9CFBF3ED81FF76D5D813F1000470F95909E57ADBCD336FE960E1694046B57D44
15F529410EAE6A748318B94E5125891A1B7DCF680DDA6270BADC09E0EBA72ABB
1E86CB29B7251CD6249981A62EE114E4A0365C2DAD7C0272AFCB6DE31EB259B5
18C3ADCC0F5A3C37508900E3DF1F37A400FCA319B3EEBBBCB00D6F6DE659CD72
F304FEB04D90B9CE9EE0C6AC68A7C68142D3B638C4735149360B188FF70C01C4
A23F9D358DE59C5F95046E1C0A8D739F4B9200350783A7CDCE9F5C11D889944F
DEEF96313D2C82D44AD50243A64BB36495269228FD8E1B277FCAF5FA6F6E469C
6D250EC16EB7ECDE1FF042860B1F78230E4655C0FF275C0B8BA3A75180CCFF6C
A38CAE4F0C83134C0BBE7CBC6316034CD994E80228CF5C8048E6BD92C3BBA215
C83756B13EFFB506C5B80E668733A65E1BE04A2D13BFB48CE659B24212EF8999
713A424E8941CA8242F8E849E7FB5D0C72EE9540D6398F64C5C91A345FA7EDDD
34B1004B758A737296490153985ABF49E60B60BC8B9E463A7DFA14AB45CEBB52
5425DA439528E181D9AAE0BE0BF2B33634EA4BBA700E5A458C998DFC32027802
11B8BE1196C702C6CDB9B329B8ECFD8E1F27DC04C6866CA54EFAF88DE05C4611
6B6529F325003A00C3A10C9FDAE2AE0D41A969E8BFF7687DE059AB33D2A878DD
781A85CE8EC422973FA8A36CD65D0003B48F7CA8D7B62CF3BF26EB5B022DD827
16F3D4AFAA1D8086165C120E0F1584C7D5F44C0B074050A0BBE73E15DFE6306B
B83BAB7AE1A0947EAAD1497AB72E5FAB979EC551C0A3E859B94006F1CC259D1A
FDBB35FC0A3F1F090333AD060DDEE7D4353826E7DB885E64113AB8F151CBB0A2
565D3FA3668892D73CC0A6AD4E9545E4AC30271D97BBD478A17BC160514642FD
5ED51CBB45E24BFEEEB61128EA3E37D2DEC0389EE13CD3C32B1472D6C5CD8140
6C7519640DD876CCB900AA8DBE981EAA8F4194843A5F4CD4E57A0F25E3D3DF15
B1835F5FE02B61F05A373D58E53905A56CC6E79B9678769E612E5668EB2C9671
7A569F481BCD58D63C963DEA29C1758B973DA1D9E1BD1E2939BE72013A23F1A2
17A953D00A721C3E81A5019309C5F040FAA84DC85CAA632B4AF795330BB247AF
648B1D6293DA434F69278E15D9180CECC30E6D99B3D39CC2EDBB90EEA2D6CABA
066EC562C9389AABAF095F553AC57793F93467C7C24398B51353EB671391E66D
D2DAF1ABFBE1F6AF952CBAF60BBCAEC81DBABCED25B7C30B15CB71CFF9462FF4
DFDA7A613D282C472EB86A83C2BC32B281C56741EE237B2191F1BF78EDD0E0B2
04C57D5294746B9600E9F0B19AB35FA63FBFA1B31B2222A8F2D3F96934FE8A00
FCC027FE825FB99AAB178B1F65BECB71ECA7D795DD6EB147328DFE04663B580B
F71AD1E77275A6FD6D084BCA710F233EDDB3C506038EA8186AD13A95EE53E7EE
53896648AE6B3663AD5BF4ED9412994700D5A6FD081C3FC4D171624D53212AAB
B4F2FD82B8E9D91B064157E16679F18C037B8FAF2A90D2C920BF700CD8B8D0EC
9E2FA253576EA7550C3E829DE56119FEB84245FC5FA08819671B4A874D15D180
19F5571931841D03E786BC04F2690B95E16933F980D9C44648CB39709DB86002
B2855E72016D2AE086FEAE81192BF5335D9A03F52F9CDEC77599476C92EE7834
FF1405DE903629143239B11A5FE3D3E678DD12A34A79C4D8AE4E3E33E3175C8C
402F517F2FE46290955B6BCA1FBD127905A84A12E97056191EBE11546B55F423
DB02EFDE86FFB82E6FBE42F8E76A6ADF414BE746F0C0EA547236F123667D6EF0
010D422583E4CF136F9034003CD16A7A3D3EC7DEA7395662A69F70DAC7DAE230
A15475D61A13CCA54E753FECC169ADC517B5184A2C665F24E0B2A0E0F06E0A5E

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1440
%!FontType1-1.0: SFBX1440 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1440, tcbx1440, labx1440, lbbx1440, lcbx1440, rxbx1440.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1440 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-218 -316 1652 915}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76EFC613FE56C
378A7118B0589B3EE5425457AE310AFB3829876138A59F58D965843B709A0F4F
D1AD54875BBADFC803A755669491D9E98262991B9634084E8E2BE46EF805B219
D18DE35ADE9A8DBAB7AB761864BFB6A27E5B421C32CEE4569624D9308A32B426
FCFA5CEB883444393CD7A58F9CD522BA73E17492DDABB7E00B2F6BE47F585EB7
FDDBFF33F1B5E5465287717D1580105BF3929C09EC621CEE9606EC49D7051A00
11935EE728A2FD47BFCCF00C93EE54910F77C1CB8622B9CA129D466746BFE1B0
594A9F0C785F6CA67161EA1480AD4EC6781B9CAE9536F5D3AC6D447F16821F77
AE2705279CF3DF4E1E9AED81A0CBEFBD61808E2D59AD970264A5B66D1F399DA2
55BA0AAC8EF1A1E16FD8240D577F5E00E0040EEBCC193F074FEC48DF30882551
E23D64EF84283F9640AC5F60EB1F26CDB79078AB0C0D97D1D6297D092380D4B6
6A2099F06A513A78A3C3B82A6DBD985A0DCED7150B19FA42991A3D408FF95978
15D309AACEA8C5C0AE812F50330CCBF47B4759C550D49173127DECF05D783DB0
978A366ABD3CA7D9BBB6652459A5E19F9630CE75C2BC7BDFBFE0EA3D8098CBB1
98CBE02F196C0A0C5E976DECE72778358CF8D0A79A8B5629A6322716CBFBDEE4
934E8782E716185235712845BBD03896BAA8126E2E114F06AA9A0B2DEBEF4281
1D4D63D49BC7C89CBC8170C17B5CE694EA3048E3B2431BFCC49BE06BC16267B3
3547F30851E3F7441B4DF4A7A4A0341CDB439F8D4CB53BBBCBF09500FBE703D9
617BF4ADE275EDBFE0C8692AFBFE06D320227474097847EC062917CF1B3F675B
C31AD512EEECFEC5D1E4B54ABC07FE1B9315946BEA6E4224FE51C7D95DE4A9C2
44845DAE8BEF77E829EB5FFFBDE155F7118DABA2710058926158DFB7A533AFD6
90A5EA2C36FC3CD9E2FF4118D9CE49F33AFA3CA306FEC9AFB59E5236204EC76F
7A3C6349DCDDFD47AA3C9CD34C706AC27CFDE15D9E907FECF478F490F54800DB
2C646DDA53FD1F267F5875A9AC8DEC3DF640D3C4C0A748426DBE619DA65C070D
9E7087C2755D41C6192EBBCEC15F12A4F8D9BE40B40335D2279A457822302488
31757D9168908F0B8E1952D8097633836D649941EAF86B33F38B8126ABF30287
322376ADB39E56E5A0FD3316D513A048F34512336F94DAF510498B635624B631
DD11B651016B20B867FEECF3A82AB3B967D549895AD2EAD722B6A3BBE8999D9F
A5A6C956FB2938A9F76ADD0BF43207DE7DE70802B98B9C81A16CEB19B23657D3
4685F351CC0D93D513E044CF3484D2F55A8DBBF434C5356276597C5EA62F5A4B
49DE2FAB14BD90C887E7FF33A06D9F312602B8711E6F7285D52F30DF1555B26F
62DB50DB237D0E6DFD301833855FE2427336FBA63171D385F2B42487CB337993
CCC0FA8B58D6237E52C61F0A22DE454F58801D5D00F150F6E6E69CA0E60E2698
82099301160C3450D2ECB2A8DA999047EDD7D4E25ECA50FE1EA1FE7C727B7E6D
D384F6035F04FDB35F1847A262C2D2385181E3F22BE45C2D6F1BA1D5C8038529
CB897DDD5B686826B5E89D7F005D597DA8D33C583E9784E90BCE05BC014C9573
6F44FAB37523E4941D0FFCB7BCC8D0C7369D870BB9976CC89743D9892CF379FD
8E3F1F9C639D860F9B4153AD3E106366D0B0064EFB9F8B01DC9608D9734D002B
66FD97AA86AEAB1BF32AAD0BCC80BB64F34C4D4BB7ECF5DFE249B29422A367E4
6B329F10813DA0CE1F394EF8AEDA1D0EF54BC676F41C5E45B3DB5FEE796C5083
512B168BCF1ED1E1CA061D66E7D2EB22BCFE8F1C5CEF74EC07C6D9EEF1911CAB
F3F0AE82682B251DF566D1EA35510029E1F6D3966CD6DB3BEC3E2D09ACAA06E5
907F8C9B1450BDEAC4AA2C54E46C2CAF59888C8509D8BD1E3C562DA6A71D08C9
DCA5C2B21B9A97FEF3E40F90713D4646CB913A984107090BF34CFE75D986E626
7088DC760225ED905D995DDBBB7205AA2A41A3CE4A3F375E7C5079B9D8FCF57A
797B5A4FD89A01934A2E2463B895CD19385C95BE2E86F99352A6DBB5512C3566
10B624CB772482920515BDA8A8D227D42050A292E989037E08EE4B66AA9EE009
B340F669190010DE80FB0750139C33AE368BE204681EF627A2AFDB8DEB5F1873
58FC661B65E3AE472317EFEFEE9C9F6587E3A5B415FDD84D10576881134EC879
F04C4C9A4BE74D8F17D5F7E537F7F8E665BD074842782131324FDA33265AA828
27A6B65957CD2CEE8EB451078273E8405E14009AFBA50C02BBC09D2A621E9C2D
DB308B966FB71C6F65A5E6E28BE8DD1139DF083B57903DF8C414D751106C0012
0DF1AA7A65AD4B5FA847723B615354A320CEE50E97470E9D7D74C7A2BBC093F3
EC14D78ACDBE28B91D33DA27C403C0214E1229EA3F7CD5E601BF64480CC16340
D8F1ECDB1E80135AC89B41DBCF26A7614F00F3428FCE6C7D2E3451EF0E7BB811
759209CD94333068BFF43C8B73F56BC1A0CF27D6184238E19570DED42DAADFB7
A27B364F8E151CFFD75466F1B50AEAE90E961CFB5A8305778D06A527BA8A4400
03E8B8BFAA8A9C9653D2EC56876CC3F5186DCFB0F99BC4EBDB585D05EDEFB5B3
84F7DF3CEC44703E7F512CD94B412FB3D70A87FBD1FA98896C39CDAB0AC7B49F
1E16D5C2661FFD874109CD47BC0B87CB324F84974889A6B9F86BECEB1AB9E4E2
D598D9319F3BFD7DAE4850C6FDDC54E1784DF6429141E1E1223548188455F970
52D34876059CA1F3D815CE484864F04B017C4920D64C02CDBF0B7E35DEFC41AB
06A910FFBC855E99D1CC3385D9B1BD2F79E86F5D9395ED6043E7F10258CEED29
BEF79EC5245D3676F2337D3155C6C3296B7439BDB7A0EF3F53EA27A63DB2BF87
BA44FFC625852507843E37CFC9C34714E5677F893E2EA3A50A3520295064D8EE
F14FB9ABE3EC3977A0BA6A227416527FEC24F662221378426488C60CE8DFADD2
D12A509A89B92FC1DBDCD8EAC078DCDF044BA8612C7C6EB6DEE9D130B5591F74
FAEBDEA9A4C42E70F0A05D53F1CDB6E5A2ECA3B819C688577A9B225AB3830B82
A22191BBE5C1638CFA5B1303F481CA83B43BB3AE1CDEDC650432EF0053023D36
B3BE4F56DE5110B174BF827DCBDC8B5855C95731C66313E665750CD39AC23464
AAFF53942063C0A66F4AE09DE0EB684D4C4B59B8B450C76D03AA5C4D93E94596
735BAC9C78E22F19B959F16FD06E23FF8368CC9597D922CD70E5E0F55242EBD3
4EB3481FC4EE2502ADD087225216835C7F6607DAFC48AD3D01B3DFAB38DFE99F
8441B5B6FE993BC45667546B88A0E87A5FF0767894474A79B6C0BB6CC55A89C2
529A4F261AD82C4EA17E70D61E78B3D6C8D6FFCB26ED9010DE312964C35A4BE4
7172FCCD9302078128ECC7242D56D62EEF6079504A5809102BA7108E63806675
414213A80258EE674510EF32596531A51EA218C8811C7A73FE4972A469650129
5073CCBEA51C346638B2A861EC7F71CBAE6812B2D41150B384D5922C9E5A87B6
C2ED51EBD6D957E70FA5EF377C78487B8383FCF72132C6912EFD701E3E022AE5
69F2360E2C8A6504CA313BA1DF05BF42F1EA83DF79661A3A49E21EA63D1089F1
67B79481196ECDF5F8A07070FA058CA1902F49184DF49E1F98200692FE9A56D5
62D87BB5F29B08D50986BE365036C01F0D2310D88D5CF4227F9F04D49FBF4013
C5AA326C57BC14E107BDDC6863AA50AAB280D18F70784AFE497D7B334EF6F60F
14C1BBE3AA3E9EF0935C8D933B7BB83FD9F48F7008C85264A5B09BBA27C56309
4E1F9233ABC452421EC8767EAC8322098E0ABA72D6C88AAD6DA7B174937E8B45
D3EDA25DB5B926F9399BCF9027F0D7CFB058491EE39A86D02D5A568F8A72174F
5F219F490174186824FF78EC89C3C5BDF72394A24F81135C9D9063C0F4441BFD
56C5C54F8CC23B96C529908BC0FF14DFA9ACC7AC4753CF4EA7A6C87319D1606B
A7859EFA318A60EB09C54E5C70F81CF5256D72CCA8EDA14553BCC08E1B92C2E2
464A453666B5ABDCCE4DEF92F7EBB72D912D007545489208383EEAF0BADBC510
37DDD271CA81544C3E7280D32632B2B0B608259CC88561A7C94B719486F71911
7362E24C324335A60B08F9CE7D435F733D362AD9789127D2DD7471010D57CDD7
D036990BB524171AAFC5FE04A5B6BB0144D958639151D67648F05F07538362B7
4F7483FACFAD90281BA5F0ABF060C561DFA18FD3FC507042053282E1FD0EDDD2
10FB51C9517F1E01E50AD85973E4A3206B333362EF77B648AB99E2505AC7F18C
1DF11AF4E17CC1054D05B35CA24FEA1894835DA8B323B01BB50ED46CF009FC10
1B4F7520188FE7F54CC51ED4CB9221317C8F72CC600167B0076E0A4F2F631141
554C3A8AF1052CDDD583BA27C5EA6D314A9A4AFB756B83947E38189E15B73ADD
187BC906ED1A83C94C8455D111E0F5AA4EAF9537010B0A7F80CAC388628E189C
1B968A02FCA01322BDFA020BF3E1C1E65DCE4E73ADC58A46C335A9ECEEEE52A7
167973D48046DC78E16F72302A4EBB29FEC54D709C50864C105347700FC7FE97
6CD624F4593F6AE969F722DCBC681BA215ABA14D088EB223E95401B7CB769E66
2C95909AC36E4A979C9357FA3ECC867E42030D4826D85D884AA3747B7A485094
019F97E74BC130CCEB740F766D9195D9108C4BC529B7C62F3F399B6C371950D4
467DDCC1FB46FD98C9293DFB3389DD94496D2061650E1EF805AA5A8605DEC5A6
7729B3F0EE5BE6E225C55598BF343A1ADD11CA2FD9A55DC35DAB60D79EA274B0
C86C0D3A65B72DD4BC9491A7BA5AE34F43A855888F689FF7751D731A7C3F583C
5EEE9257AC07665AA294899E426D213012DDF7277EE291EC094E7DB8E23B9239
EBF092F358DFDD1A013E19D51209F745D54EB054F8335F55CC31D7F762787194
DE48E6BACD02A7FBF89A25C2A3A222556396616E6E55456DEAD954515C7ADFB6
0B533130DEC2FF5F93E3AD11D8F77E49C52836CD711A0D13791C051AE16C65F4
1E60A21E04FAE8FCCB20DC0EA6880E3B13C30077651229E66C594784DBA4A4BE
2E4F8095BC13EA9339B6DC8E984DBD7AC98188738612F5C7FF69C0DDCDED8E9B
ADC94DBE126D1E476752720C0CEDC0AAE2EE2997420907FF68DAB0F212110E0C
DDFD06AF002BABA22921CFE0497494A35168628CBFDE796A89B6F0A72A9F6664
30A70EC98C2A6ED8EE3FADAD3C9F2BCC49A0640C3F9C8AB80F815C52E90D2DF3
730368768AEEF863B210FA2136C33749BDDE2C4DA4143A4E03DE8C5D6858C24F
96C0FA9C3A91607ED5DC6D3AE1BEB4D5BE2F25D40991D1786708D24E1F90A29F
713C5B0EA71791D94239622B3C93E1ECCC91180A38FF2301ADBCFAAA049E9A5D
D2DBECD5E6F68CB3D52D76D902DB446A6D260A06995B2D00C9F6A8837A4149DA
B89A85D9889A9D144AE9630C4F792E7A2BDACBAB9737D011CCE9F0EACE9F97B5
911D05BED00BD851A6B14292ABD57D4F67485938C92C6A29E9037EEE92220832
FB00C35FC8C8E67C27D43A4AAB9BEC6B48A9C3797CDE14D5021FF1F7A2B6AFEC
021C3EDBE1E9B6FC857611F307E6C5D98BD5B3A868E0BD6087EA8E783407124D
399F1F08F989549E3E67914F206445DD18BF3C69D2737FF8031A52BCB94D74F7
7A091DF41E0518AA4A3C98970186251198517B5D810E7E050501DFE9A6060BCD
92EA3FA6ACA1EECAE6A56A2F9F514E2D75CA451B531635AACF27833254E611DB
5F6B5762438C3416D0DF5516401E0027AF036E899A72532CC982DF1C230FAD6B
E64E01A4EC94702850D1453A1CC0538644F8ACE929D19FD6C711E40F1F4F4AF0
59948E1C40C936915CB1DC8CC08D85880B1591640BBE5DA16B92FA3C3BA89475
C22E109E91FDF7F6103096A45B7DAA70ADDF69136D0308A66EEDADD188B1C9AF
1BF590CEA5A285DE6989BD2AE8EA6BF831DB6A55D57CAD3B89FECB4B38C29259
0AF5861B230D6085B1C0F674ED12261D3CC8431931DB411687656D6EB9F4B6B0
BB2844FBA68284B23BDE384D43B7967C05D0453B90FEA4A2FF27C06A5DFB6307
0D6522C9BEF8C4560E3BA184B07FE68EB2735C64C633E2CEF19ED8B6192177A4
DC69BB60715B43FD74F3CDA16B3C64672E270C4656056C518B5F7BC99E799439
F6B0CCE38CA0B2E551A4B142DDC6306E79063C21B95EB1B9971F2E3ABDC76F4E
803C256E22E5122BFAF367FD211F725D5230E356D99EF4A911847B04FBE05796
7EF02B2F8E2E05CAC73B6FB37C97E610E44ED5F1F00E2DE1B64462A4DC224D32
9F462916B85A17FD4BFD11FF528738C6C6322E9592E07D7E8C8304DB4BACA295
9D02E0B8196583CAC14385B5AD126D344CCA69ACBEE91AEEE85CB885D9CDC33C
28FDDF8B550E39720FC2CE22C34CF790551D1C46AFE2BCD7AB46A99E31E574A7
2DDAE7B049B1C431C148B1170D95DFDB8CD2254650AE0168174D9D6290130FBA
1AF83D858B2A9EEAB8D7B8461F941EC4348F9A6DD828084C57731688CE505289
6505263631506C0FD85C86DABD7ADE44A4F8B4C7491E58E324B166BB50E05884
2FAF07005B4E8DDBEF263E1949E76D975CE46704D6CEED368AF9ED2ED65CE1C0
1DD4F36E015D9023145C4817CBC33E639CC49629D6C055A6EE59350A7A08E04B
43818F7369D68AD27ED95468DC67A64619744C7E63DA70EA33B65248CA88A192
942116C0BE636207F5118ED71D4E4DC06C800A6A573F704A1EAAAF6E9D469105
39801393C55049E850BA7276095874395B824051900A3ED955D091CACF5C2BB4
27555FC30C8CC2D7F9245CAA37BAAC0808FB10315C8C992AF68FC4641A4B5716
E173BE09CB0FF2A2C925E37E16BC085A39B21FC90935A23754D9A7ECC15B3F7F
A971C311215AE27DE8394028B539F61C37CCCC3B1E68C28821E5B1E86FB06A83
9A4569B3230E525C1F345C050E749762C35CB0F6544EDF40EAF94CF4BA20A7C3
B1CED6C8E458A16FE675E18B3418B5358BEA62DCB01FBDAB0736A8B1F9F6B743
23FC39033A42F990426339FD6A95C3F461ECED0F1426459C3997CB2D07E5999E
8DBAE5ED13D06646E192831270D04E5758459C5EA59440436EAC64C1F11965B2
ED2E1638FE96FF2040E07FA087FDA110A93430C7F92F1C02DE769ABD9ADF77C2
60175732483AEC3728A47DB3F7AFB2992E6CB41957431829BED5CFB8948C94F8
67FA620D00411E5CA2A3FD4F91EB43E2AA79E0E516A901673B775AFA4AE4881B
B2F8B2C27F396692FE536B8C091A6A6C3F15F3C729AF6A6C7DBAAB8000071375
8614C9AF8DB7295EAB9A6862D8EA185679AEEEDD68859B7A8D8A93CE86AD9FE5
105AEB4EED77D407CE511A8D1D76E9A3FEA9C9E884D0ED35A71F00119286FD5E
AEFD1F4F26E1625D6CB0A36B46B1A4AD5118EA409A82FF79923A4E999D20CD6B
BDBFB9CDE6DC59A64B91D36B454BC1EAF910182271A58AEF87B2DC9D6E218112
CD8532E996E0AB49CB67CD43A0683927443CE0E522924C04B66F6F3D43B24645
877CF940CA7A272F91D228DB7B6F29AC8DC0F34527ECA9B5E133600207A256EA
AF61837F4FF9CE10C741D435ACD8C4505B3890AC76FF84E36257528A426DB147
6A579163C7ACC86AF6202941D8F088B8FAF6DB1EAFDC2EC726D56F8800DFF9C5
203AC9FE7A022769E77673AA3AF6AA1F746B4F19A38CFE860FE1A87B230B63BF
1AA2142AA86546DBC1B07BAF708DAEAB8FBAC4B0B00C0CD029A2046244826B7B
D440D8F34690D60640920217EF7665429A667391C0AD4D82A933ACF77ECF909A
20045A27C28AEE8B8FBB54F31137B9E3DCE9AF9D6ACE96BC6BA8BF0A9041B8B2
76F7089F213F7275BA69DCCE0B506FB98B1F7EC48203436172B02F088194A73A
269EC384DECC1A97814F8E3BD2FDDA11C8B93D1744B9588D8D8BF33FB94289E2
A53F9C29ED568DF576FE661539DE63A0A4C8705626E2694F43829DFE937B6415
B64E2C815D0DE30E763D97503BEF43358685BC267EEA1F25E1198097FADA94D6
502956CCA89D9EBD29CE58364B4DF1F2C118119B191D757B5F8257C995F9377C
FAEF1F7D1F2F0ECB0D3A0E1F2D928DD5D71ABE34164C7DDA1B854B9C2DE7EB1F
6A374F65B14F32FA7114B6A0E9F69477C81B47DA6627D3B68E13F294488ECF22
AE7B0769E2E500BCA93E164AF5E65E9945C1442BFC09D12E05BF8FCF306959BA
70CDB2554EF4152401AB575605254824A1BAB8EC451A2ED4895C365D9B419D52
5DC660682B4DD496CD5EFDF0B2FA0A931CD17E83707ACF063B07B2E5A5393669
C71FB9DD32AC9F4FADF02B88F3A4B38C8D9C75B698DB9E6748C021D8AB6D9E4D
49FCB81DFECB27C6DDBA463046231C3CDA0EE906C5A341D76525EF6B8D24EEB2
666A6E91E3111C760523376E309702F33DB6F317B9F4AC0A9A99D550366912DA
C3AD9B00BF8BCBE1929267EC8E5C53411BC0C64114D6E565EE8CFA3F54FC400D
57A6E25E599E213BD7DE0BFDCF0EBDFB134763D148CB199A8FCA567234C11E53
549A5BD518ACB8083097A88C1E11F0F981B793762DD4F9AE9F9CE9F429E9DBAE
F57690DC6617EA3B259FBBB12AFFD9132CF205ECD60BCDFAEFA66D2F0053A808
65953017274D21E5BA2B696C7712D6468C404B2E4338930E201411F42E4327DA
0FBA34901D53F6E6B48A02D819A2AA8C84EFDF65B4D74A7E48756BB517E93B3B
CE5386DF2AC0316645AA685BCB1F4AC4C5745822D32C959A62CACF5EFCB7A71E
57AFB7E101DBBFA306F0625296D99A481BA6D941BE7DBDD2B8F341AACA7F6E5D
EDED9A50B09A395920444B7792A46687B6DA452899886DC89AACB4FD4920794A
627FEAB4EE2D502C4E0E4FB09B4CD634C4355F86932CAE0767AECBC8DFD56453
13C9C90F41CF464BF1B464013AA1E0823C222307748D7E28629474C9BB3966DD
CCBD1F5A1BAB9CA5E61C53503D3C34B5493D7E35023345F01DAD62C29D7D74D0
6BC22D2A2EDE50DFFA64AEE3B225CE30329E31266FDE21B37366B845FD36FE64
1A072432256C40188ED6E03464B6C6AC726C4FB5B21513A1E87949AAF70BEBB8
BD7228669191B2C851EF07331E02476647E85C45FCE083E5D204247CBD40391E
24A4DE083C2A8D7422EB9899EB338C019B165C9FFD1AC415793275FD355EA0AE
C404AC49D6664A295F4419D643CC8F1342F840DB44B6C6E735E72E1413AC93C2
E1D65666FE2848809216E7F0C41AEEDF1DA499879C23D488951299EC2298C450
B1508355BDA8ED1F276573685ECCA651F72EB99C5273CBFD859FAD0BFE97ADC7
398EDDB75FBE3953BDD3F6F61DC2268D009B903268006A99F487D0BA0651B21F
73243111D02F4C228674B74511AB40012148E4F33636C4F5C223051193BB18C2
6543D6D1816D106CAECCB3A2E7F18772A687D1D45B631C9192BC191AE9C0CF2F
1B00355D89035406F893BBDA2156CB1CCA26286C41EDF83BE438BA791C45C724
A1B809F332D3D791C297DCF6CFC81E5E9F5A347A8CEFB182B25AB06E165F4C51
759B738C9D951CFC01F5A4A393C7E3490DB7185AD2CB324347F3E2A593DB8973
0A20990EEF23008A6E2EDC65089C0F19B19C73A5E4D9C6929328A79FD71E7860
8F3BA2A5A1D2152FB3626169D2C08E8FB1A81D6663AC4B028833908DEE36DF0C
F09FC6260E5651091536FFAE382BD0C806645C6D2E9DEFDD229F1EF1A4014666
AE5A8DFB65C0BC71CE0CBEDC1AEF1266B15C2DF050779583CA346518C73305BC
A5A10AD58F4EA1CFE001BE9298D08F5F6C6E5B01A782F022FA905AD6481BA8AB
A4DA8AFA6D3966103295F629B6DF2560C99283E914D3FC61F27C3A72B169AFB2
A57DDB204A91E1534A01D9F4EB03197CE2A2A49386F00D7DF6B36367A4849729
0030021A5E0A80F47A7CCA0D894AD935CB9884C2D9EF615602761EF93C681033
855FE2427336FBA63171D385F2B423E1D2F5F4802FF6AE3F170F935D7B9F8760
B9FC59BEE455F28CAF29E9DAE32D3C3BA649872D2976F271A6FA3C7FE09C53EF
74C1229ABCBD3FF373EFCB1335D1033E400FB7D493FC7D7018F85CDB5874941F
6AC36E67360E5CCC2E9BB45AF8EEC8E4CDE0FAEC4A6EB6C558CD8B212B4B3329
7520B630C1F9CF4327D9A307D37585442E398A105193872AC5A385C6E286A9F1
7DF31FBBF267509E0FEBA605264AA04599FB47CBE7CA39E9C98387B671EFFBDA
6FC60D592261A181AE6BEDFD780701C11A2D0FEBE3D8B586D52F842448C4C43F
D6C50E7B3DBD8BEC9573846AFAEE8638232A06A028B3D5F78A6F1812AC0DFA28
FBE218750CF768FC857A27746350117929A44E065578DD6856DD2B434C5B857D
0B07C2654B2A66711F8FBEA7771F1471AD077169507D156715DA5B6D8554C69A
ECB66755DE5115610081CA4A3DC88377E3CE67BE2D7C263F5421E27EB3689830
029B2B230D3CAA87D634BC255F89CAF1DABBA08294ECFC443320FA066094F341
FBA21301BDA2216D19861EFD76EE39763FC442E8A606B3D87096CFE0E324E52E
CEE16E00B9AC9B2D600522799DFB143B583F6BC297629FBD89A7BE31636A880E
BF1726CB5F05EC5DDFDE378510A3404399954E790DA67887AE38A3B320B6F6DD
587C96E8DB5B0EF2EF5911BB6E2F39D6C0E0B81608421B58D7A53251E6FD7988
08AD88E223CF3FF54A29BD6239C7F09E4EE5E5AE2C53080E5FE5C96CCE3BF3D2
88236B55DB04D33520EEF0051FC0CA3F12B6F65B86310620BBABAB38C14A3FF9
D7BDE48F2840FDA10178E44CDC08B36D07BC8D546FFBBC75924ADB7143EBD6C7
A9561F2EBC9FF12FD3CD4BD5B0DAF4474B467B9BADEAAF4D81421C241D0D1111
0EB25E1209D454F983DEF8E61760143799E95CCB1626AF8E564F47A9719E1CE5
80FCDAB30A9796DFC3EF238032FFA7B115D7CB0CA4C68EF82D01A6FD4128823B
9D79AC9AB985A03517B4161D483005B89024F8E32D95149C3EE8DFE85BD69165
A3E895FECACDA7EB54BFFC1C0AB50C55BF024EB2197FDE4374A80E3B3A615076
F5B8791E55F277AB9E59215A540A6422DC460C82B53189CED60CD1D453C92905
4BE13DC42E16AF798ACF635CB63D98FF4D75FF8F6951CEA7FB1B0D396629BF4D
FF4A4FA65DEEBC421E33D324A975273D16EBC3E05C8B4D5CEE6B1B4F56F56771
F8B1097E59CEF66F059B359A6AEEC25AFF260245F01EAE21E62573378F294BFA
CE3328DBD2513F18CBA87F9E97E3B471B92705101563C52EFFA90CF8ECD225A4
6DA5ED77A15CD2BC45FF6C7F954E9D3CC543608DEF3A08F10ADC0437E09693D0
68E49024DA3E3E0528A6D310FA4D477BBD8147CD866CDB15316670FC7FC973DD
70B6272B99C903D18C621E0306397340C2E2C3DB2B3F7AFFACC512AFCA90E429
DF2D2900C23C7B1E59084B5D9A6CFD5FFDE7E732DCB7A1F4002F04E2F4406F99
B80F3D42E0605A9110116BAF971D620D734F0C3FB9568C4A7802F63272C36086
8CEF46898DE50AFA5717C2CBC99AC09FFA74E57E30EB1F20F9C03633F2D53EE2
6E8092CDBC99E61704AED2C0E79ECF2976100F5ECEECF9F78DC4DAB3A3EE6995
DBCC5D86255260E586E5BF91DA5AE8EB3293A52E6C35D743F19E517A314D5C97
2D3346B06D953B78679A23C0BD615BDCBF3B5ECF1948CEB3CC53880610D70F07
1597ED32AC4356E3B529CA416E161D4DD32EC80214EA196DD1A129222BE57F8F
EA5231FC9E45240D6856943D6895A88CCC15F46C94312783571639DCA89F516C
FC27CC18C1C11B9369947DCA58F1538BA5ED8C069127404EDAD5390FBB352091
6D3EC987FCBD46714EE8BD54BC706311191E664031870432822FDE4F17033801
E035E5E563AD6A95BB8C640F4EE2E459B5181BE721A8FA2BB6F264877C66220C
A32DBD1A3F4D99A68C51C139D72E317E11E93FFF1AAA77F7A40CC2915A0EE549
0401002F88036408E149F4BE3FBD5391A080BD473BD8927F834B10CF9143F3A1
A5E0FDD9476087ED66BFDE95A29D15BB6656D2F3F9E348A7CECEB8B6723B2D07
48BC06687A14FC16FBCB4AA18617D0FFB24E73194C79A4F63360F10CABDCBAEF
E87223E5B52C095D119F50D56C5EE42C10C5E777D703D63A5E00B23765492F9D
70FC1472A5C2C7C7F180DA934F86A52F0F49F9A369CF8806EE6372E272EC3AD9
DF4DB882556C802C653263CE251C50505614F5025BC22AD65A2CBF87CE420A4A
7CE8FFBD3DF5C3CB6894D8D8FA811E02793EC7F4E3ED3B7808471DD4B52C7B20
B22F80B7D1C5AD5B2DF72A9FFA007545045B7C9565C3AC1A996F6C8FF1C4A5E5
B33766CB9EF73B0BF03CB258ABFDA621527C3F8767F3B5996A265F07330E3841
C154606F374882C77C8D964ECD6EE95BC66047E78A00BF448EA407C061D95B9B
148A28023BCE143F10A8CD06CCDE678DB270A05C5D453B3200D7E739E9C2C9E7
1C422B3D9405CBBD8409AA8BCA6988AE5B4606EFBF3B23E34237D61711172E7A
B0D0CB607E42EC8F6C16F1603CDB0CE0D6610EACBEDA906194B7B64E7FEEC96A
D48C9500A6AF4D77851F6876409961F18440BCE5A69800A0432A20B7FC3E813A
FF5A05071001D5D8402AA301973EBBBE383BEBFA9479446F591081B7C28F0A15
733B9A949CD51B140B79521B2D43311797704206F6079C90480F906151E15D28
EB74A3381682419B93CD98274BE03B8DB30ED1E03EBB9B9CDE16CC2D534875D3
C9DAA3219A25A1957EEDFAA31FFABD292D49E62E982E59B57434F217741E70DC
17BB4D1C0CCD541E50DBEA059B0B025CDB8A5B07C4E764D586FDE08E466B41BE
47E7CF526CF2817AAECC34DF3000BDAE9A0CE96B041D5E65B06C14F89550A159
8C65B0B90982041551514CCE4D4118BA0ED4F735A0A2FBF434BEE8ED65228E2C
B7C8EEB7D02A4F5146A465598033F06E17263F2D92B501C101F7C829AA2DA00F
2CBFFF3CE00DB9F6DF57B2694055A4729E93538567B00B89E33C96E64CEDA992
7239E523D9181BC1AFE6AFBE27F0EE0595EE62436EB8C219E8F2E953A95CC2EF
B95473A0CA0081A900503066A9E3DE6C73E164B508F9BCBB894A5CEA5F3EC338
33A7B9901E512479783646E5775C5D8BAB29B6FB180EA3E88098D6C98B10B8E2
E014FCCBFC975DDCDDA47549FEA64EC66E1958614BDFB93C868D8558B5A0C8F6
83690B214BE194ACA141724A0D91A613B619F3511922BA5F92D03D26C959D887
83BB7DDC5440A0E2DA4FEC270A41D3DCE4E77F5B02640477F6E0357647A00D61
12BF3C4046A0D829CAA80144DEEDD962879BC843DAFA49EBD4C7D97B40307618
01F6ECACF0E86C24C8AD60BA1BEEE5DDA17B7F3F2B0107FB1C91F223B7B37CAA
9163D447BCB59BDD0FF521DF010461DD2962BB800AC44B7219699C25AAC8A08E
76981AB7AB4CF60B6033F3C3401F1C84676C189A027E7266E70D1B4D7C9DC35F
59FBBBD4A0874F870CA9D06265CA6250EB8FA07D50941B1718CCBFDEEB6BB537
C6EE456FD20C425E56ABC53649A70B4F0D2BEFD84E57A848EEF08A077387C87B
B23EB2C17DC30D1CA25057B13D072FF3B195C769FA63688A8749B868DA16935E
BC60844E1147AD4F8DCF771D50CB041546162FEA7753F79F6AB7D8D30B779CDC
8FD619924AC70C61C1BC62F423874FD8A75A993427C1450297F1248B61CF49B8
0E08316D7029698C81800F4FABD3146FB0AFB149A2BA27E69BF04AA0A0364AAB
F88FF798F3F9B53625B0475864AAD39B2C4FCDE201301CD5EEC30B6377235B96
7484A3963E10D1980DC02DCD9D433533849684D0AD62265C472B700FDD895228
DCA9FD523804CB4332941B0032B9F1DC39B196D6EBE7D22D94854455D5592F55
953BF72FFF29C35115DB363B4DC363E9787B0E7FD30FFBA37F5C0DA6DFDBD2C8
C3B20D6249B07B5247F4E3B17ECC80475145DD79989D5A0EB85E09008B88804F
0BD6524192B1DA9A207A50AE512B860038C5A2B12543FE84EEF5DD6EAF03320B
17975C8658C1944B7D19773DE7C2D4D98AD1B320F4D33AD8B6AF77D95C238CC5
3E22D01549EA9BAE6759FF4777E62FFEED415E1D06538D2483E62D85190D4D46
6912A1542BCF0E1B40F70B4011C4E6A4519BCE9066BDAFE618D11431DBBECC7C
F8E55049F7A0A1A008FB04F813B7FB96AE6D199643A6FD5D69A5D002EAAA10E2
8FFBF327D319C7A4215C57DDC05CC7C3F3D760CD503F138DFD19E53C884033E3
8E639F3B073E6AFA546C6317F55B856B6550A6C4D919D2D4F1A269D55AF18DB3
AA9AA7D9C90A472AB1A63AC5869F203C6F9A5E88FCA7DD7E400E33886492F5FE
208DEF55618D86F411CB4D16E9B2D846B7019D5FDA4E22D6340FCC5C9F22CEDA
177C539A2E036BCB0366FA9D153E39F524479A927F4CDD0D8B04A1B75B4A7661
F22CDEE7173A00533B21C8253779C352459243FF2EA01A2B891012220E7CBEDA
AD426BF51B9D5A326CA83DE874E0534C539E85B535A1D727457C84A0A1672D8A
743394B217437BA77F8576F56DEE1366AFCAD6B2933ED4B9EDF3A0C125308ABC
2083F9CA54DB2DC8D6D89AEF4EEC8867C270CC06D1637729ABD14E6FFBD9FED3
A7E365A0D048A4BEDE1E7C50A41D9F419B9E819736737DFB7C173054EDBECC64
A9FC335D401563D0756D09F9DE5494549EE4502D35F44E2E93ED8475F176CF70
0B04EDA073ED40150E59005F50E1AFF6440FAB57B699C26F567EBCC7E5584D17
4B6F3F577240F4AF8EA046A7CC87ED9FBF6143AE090292DA33DECB5A2AC132FC
619E7F158767AC357D269D412907AD2FF0B850AC231C5D54697748517DD313C8
D6E18A04624F0811CC4F869CF1963365B446C7BA52E385656A6599DA2A408678
86426A7B56127624710234A4567E865066E1B5B611733739C16786B35DE440D7
2287BA1B4B10D4C1F960BA011EBE86738765DAD74A66B73B4CAB0F4B8979124A
F88F7C3635DB271785C8135716AA320D280E34E236F34780832D0B481FF80F64
CA385643CD539C496D35C7E9D92553233D7C20F36889A4645B9DB8088454BDFE
086EE294B0B63BCF58C9AB01F8E8D2D26F217DFDEAB82FF9F22B9127AF3CC4BC
B6C369DE8515AC964916F1E0A8FC893A7177F0578E0D1EE6F6F44E3A81E4C627
1F5A3521F651B9F0B1D0699D5C9DD10BC963C47EC7BE95D28A6863F1E4A34669
E9563623364E325FA085330A11A592156F9AB4AE2B84BBB6FBF0841F51769ED4
DE6BB36C4DB29AF283B0B22F266DC433833DCDD1162C8B43DB17F1C9C989CAEA
4DBDF52F0714165E461B392ACA18E7C9922C2A29EB3E162AB0D89C91EF1F19B6
720E6F04290C9FB7506BF9674CF911D7B19C67763010AA15C949B0811DEE73F8
00120DC0E2933CE6811564CC8A7E18E6F15BDBA05E027D0CA854F053C494CA11
28B69FECEAFE077478CFF07702782B417777CEF817E37892E0C2AC05C45E1156
3727BF694B962C6F8447BE23D52ECE4036D7DC5096CC7A741E62149DBB69DF07
C602CFFBE5D8C396DB22B8134486F4D455290F7F1684C0FE30C2C35E8162DCC6
0C269BE884161FDD6F9BD462F56FBDEDD71F6E9881B743E7377797B6FDFE88B7
A4A54EB686FAF6D7A3101F85774A14E732E41071A477413EF1DA3E1905200185
93018415E1A3233886F9B4F921EAFA7C2A6F93A34B09AC25C6F84BF65738F022
40FE91DD5A21AD63BB0BD23030A26D6CBD447C5221C536FBD1502BA9F51CB65B
6DA47306888EF6127810B1F56AC4D9F5F632C001EC9D994615498CF713F3A6EB
10F59658EB53682E65F5BB4064F70B799F3368A67A0197F0F683D7E6C4FC30FC
01D0C932032DE013312CD8F250B6907E05AB9544E9C5B9E39106D964A032B4D5
5391110768AB828DB3B2556174D019108908DDD89AFA6FD06E6717A92BC8B908
FB03A5AC678C33CDC57F86F923405A7D23CA41552E19CF475DAD70CE659EB573
70E990239D70B63947BC72FF47837829E7979248B1B4C0228920C745627C249F
C1B2D9E966301795180D0F7B174061C53C73708B70C9475A775CDF223DD8BAD5
BDCA171736FF69758EDADE2C7698E33DDED2A2F6EC2B1FE9009871FAB35DC916
5807F70327F193BD1C455B02A4CF5598C1ADD98BB59AD0ED7A2E7FA821BBBEEE
628707514954C1674153CC146793F7EBBA52EDE253B7CAA2A18D98E9D225D099
083924001F8EC0CB623FE3F6E531B2DF4A5FBD1C40CE28D6A1C5C2DB19227104
1C73FFFA95768E530148B4001488971F2F1FBA7B7B26B7E39896880C9B71D906
58EE1BED1AE0A492C13C3DD0DC4B67C7A65BBE3F05ECBA081A65ACDB87C94B8D
138F2E1FE7083F90EB16D8912EB5FF2D4A5C829166C95B9993BF24A0B2F77AB7
7903C9976495D9A42C3FDFA1D524454395E1853921E4BFB7FEEA33E67F778849
9212B947554D6A41521C5C4C4B7D6279FAF31227B153F21AD5D44193E250921F
88965E6F0C865A512E30D985B7BF23FB83AC0E1C34B1F2C63760E3778173BD80
1DCB43C6722B528C8902B2B6BA4D5828FB0A60476E394175DAC334A4A9E0DD8C
4811347E0CF8E61B91DA02F102A5CA676F69E3B1675C20A479BD6D2160705620
417136A78D1544C58112B0B8832361FFD2B7B4BB0C945E44B40BB55CCB9AC7A6
54E34C2BC8414CC127D761E013C71FB18637155FFB091A99EECCC7A9BA580462
3B247E7FDFAB345EE0430A6B9E725BE72B0A28247FE59A7F8FE1B55942BA3EFC
83F5D8E15E66AD8361180F048AC3FCE824FD255D8D88D651C0C628C453A15A2D
2682D7EC1C8B9AEC2D65BB4D390DD9FA75F2903C7FD16F98BE9D8BFA95943622
00BC731EDF3720B137F6C8FBB8A476ED1300DA94B0A4F4DDAC210E6373D54840
7F3F1A2010FA5920E7E3E805D5B9A80A5EF3D617327D2E8681F806005341B297
B287F6286A62E4DC96421812F01401E467FE6D735A749FC3E339DF97A8E25EA1
41858521CE880F475930ECCC1A4B7B2F2AB8018E64CAAD72CC8ED017D68925DB
D277A001B23F0A1E49B3EAB6DF141B4ED7DB1ECDDB2B4940A85DEE1190ED3095
4EE4804697E368FB20E98CAC8EB155E3DC65D413EF47F4BDAFF93A2A145BF8B1
7AF4129D745BEEADFECA9B69D26AB2707AFCFDD413BCE1D96119D7156126F99D
5B4FB750C2585641CF13926310CF55CFC178490A6C6CA0CC27210C26D639BD1D
52D11327CA4A9ABF6642E84177A0A15AC3B754AD33DCA0E5A406E6FD34D7060E
24DA7283C4C475D368A5F1C712B3D7579110885997AEAC693F261606683836A5
5C4A97BADB5824AAEB30C48DD90E6825C15063796D6DCA88714A18602A87DEBE
A189187DCE3025955C847E5AC1DDF9D8E146AAA087FC6C4E0526DAB20BCD28A0
2477ABEEE43D58DCB430CF66B9878A9F608C063C4623F998AC3078DA3A20E93F
4C2ACBD6A3F53BD6AA8C02F58E648C1A174991AE3A63883F44847CFF96106F1E
E9AEEE9A52019630313DAA749AB60C7332358CD480758E8681F777280E07CAD9
D6875D57A6E238A98D7F8686126D132685CDBBAFAD58D7C7F767B6E7CC2E8E7D
E302BD997D65CD7085C3247FB1CB38E98E4C6EF2DC6E34177F269CC583561653
3C549FB877FF08CD6653D03C3E12066ADCABA22BB02F1E79D2269F224A0A7CA0
39619DDA4C6DAF1ED3EEFB82968249D0E9A2BDB66282BCDBB9CE28B706A38F63
F2674EE5DB785FF495505BBE708E53CAF61559322DF2E130171D0424591F4932
BC6A51824051803AD15D69C6F8BA9EE8DD41D951F7CA8E794CB735413A345DE9
8DD6D77A6D9C881468FD72CA1DAEC07D5FE20279A58F5890DD7E216335617B57
2DE76057F1DF4EB9F4F3D0115E6F45295C4C4B061A81AE199A4D12F3172478CF
D7FF2A4E69F462E71726C22093FBD10C4B3981A5F3835966BE8FB26FC2BD4140
608ABBA4EFC4C11F065C8F47EB763DA2B73E64E13B2079D03AB9374FF8FBD5D7
6F9F2C711F81619640CB0BD02A532B6B2D298E7375101E5FA0BAC6DF826CCBA0
2467CD0D779740D1F71D7ABD3FB9A2B78312B1ADBCB6BF9CAA6F5CD36ADACC54
13720997FAFCDC1B992A4E087651CE21ADB142C64C02E408C5F5CBBACF1E1C84
6711E071C838347A7C94F980E892FB09F132944F5C81188CE9FC7DF2B7885973
204B355B61221F653B9BD6865DE31AD96DC6CC3365702034E83DE337153B2D4E
74F3F3E2F9767CA8F6E7EEA459355EC3F1AE9C5F84BCDF363BC49C3978B8F4C8
58CFE12E315355362AB26922F0E17930FF1CC3D846659752D9C21ABEA0D1E630
D7830EDD377492244A6E8A895F9296D5881302228C3A4E0D92DEFA7E6A22C072
826219074447F2F19F07DFC0C7E7866191DB7D01412FE1EEDBDE01D702F0544E
FB1C1FD214B46EA6FF52F29BBD96C632C6C346AD441485DAD6964EFED1D6D425
38521512CF71851CC98BC15144854E42F887640BEDBD099AB0F033F9B954B247
8DD7C269B6DE93AC39FF89EBA1111EBE21C2D0D0BFE9D534014436D11A5E0DCE
FA1DF176D3C40E16C3B0ACA43D4F9F384FED1064384C5665ECF776DE03A4F075
DD9D87517B6C6FB06CEB8F9F759B4A4E272D0EDF81FE8ED6FF874559E8D9121F
A6726B6400225D4224499A92758B53E0EB04F2F3F5207625C34B51454A42C15E
20EEAFF0C1E10736D54D7E55FCE8C81E5C2903CEEB5B5A16D4C65CC2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1200
%!FontType1-1.0: SFBX1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1200, tcbx1200, labx1200, lbbx1200, lcbx1200, rxbx1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-223 -316 1694 925}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EDDDF3B8AD19
A05A98215C1A2AF1E98BA6D25E3EE92459564B169EE8915C4C3A77E21AD623DE
4B78A134EC9973C88752BA636665292269AE953747C9605B9769A15E719E8036
4E368E46C8FCE60112D1F5FABB556AD834401D6250529F3A1BBAA7679464B857
F4746C58E043D98AAFFB21E0368B3110A911F98D0C1B16A668D8B3CE65260AA7
E9A3FA32A95349AF8AADB1AE65C05D8C83A10ABB656256C77C42E4E4E7DE2DCD
F47BD54EABD080A844C8E3D14CC76E40490EAA3E94371067AE92388A8875BCDE
93EFD646F6FEAE17E4C52BEE62060D2107B620D9A948B3B3D8D3E06E63A714AE
B5932E76384D2E2B15A5A7827EA3A3C15EE807555607FFAA1AE58C5A95B6956F
A16D46AE1028B81C056BAEE21114AE2C87B3419663837BB87F79416D58E30833
1FF10EF0D5B2112E088F63D9E747D792CFF5B74F2F95DBF5C54245C517F937BA
90AFD6EAEBBEB6707C6C751315331053A0BEE3678476A7BCDA1F939D98923679
067F136F7824411A8D5148998105E3E823D55A18FAA99F4AC12EF14C4BCA4736
E465782FE9E81CE4F3BE271CE14CAC803470BF4D71CAA1DCB8F66E98C454EC3E
87EA1A0591FE3E17ABB7966756814704B4F0FBBE89F9371514F32DC7AD923596
435636EFB632B9404FCF033C8ECAEEF234C1E9B87293BC8A57320807D777F31B
66646D04D373CEB3AF5A8331F3615FBEC47F3C77361753B9E8A4E7899EB5840B
F02C6369E4E6250D89648E2B36D12C6CB7BB21621FB1C2E5E979EDF743F2C312
4F5766102F78FE466D87679CAE86D531372163C9574A45888E01A80065FE1D16
6ACBC8086E8824E5D70B187F85E206BB921C647FB0085BAC95E03F50F2640205
DE9C3DFA592B81F8CDE984D348B45976141532ED6E5B8E62CCBE00AE2BE985EE
91CAAF6EC1373ACFF3D3E91DBF5A68960CC47014C9E2F1889D1262F687DAAA15
BFFFC119C09A0CE284E11745CF43EB550198E8201C7B9AA0F2E50A08D832F3E8
A21C36E32F2D603D0263C5E14FD97207B43DA2F43C74E62BB9A525BD078CAADC
B763BA148501DF9DF82BDABB91090A9DE98024D682C96D6EF8EFA4914CC52FC6
8B598E155B29044005DF0B5D11C2DD14738B105B27CAB5EA16F469523F8B2575
6BBCE55EA7EBB5E65B3D3B143E4F789CE0127CCE8405DA733CA68B9059AA33BE
D5160628F2BC627789E7F26B0DF9D3648326E444D1CC587A732C6816691EFEE7
9FF39A54510BE2647018F2554AD11BEEC66DAB9F2AB8B6C05B24A03ABE644367
E250E664EEC08D5E63D1320B4AABCD7E9EF0A47D3AE67C167DBFAC86341CFB1A
A8F38DA6D1E71520E0E630B3D1CAD7566BB1EDE4286AFA3807498EEB5A661265
0CE9363AF5F94B47510F1A4E701072477CD95501A564BAA67C916518D0D53C37
93208EC0A3654EAC3D784FB7F40C547C49A38970594176C4D1C63270FC1CE47B
39EA1EC891065D57658A2F3801B6BF0DAE9C71733A48DF5E0C796F4D07BB35E1
BFE9B2665093EA63B54271946946F6EC1B259FB89EAB8569BDA4103FABFB8ADB
166BC7A0A0FD447F078F62259C8AE7F0B94C9085B97D74A2910A16C6962061F8
0D329AE9E0FB1EF3B02312B16E50A8236C9CC6B6CC9FE97D51EE48070D530E83
DC3EF37E193C353608A3EBB1C3B1D24C285191CBBD78AB420993351B8CF90969
0AA656952B903556C5B841171FC4FC8C9C40CBF28F5F1DDDA31FF161BC52E2E9
D4C5E46FFFD645E8EB8D62783BC8F44D9EE5B5190A470C355EDCFB4366B9BA94
9C44D590227EED0C872C63B3979CD9378E0C6C11205AA1489DA575F5C157EA7D
6D651AB56592FB0395E3B65B84EF56B9B4251460F072235E9558099ADEA53634
E03C42727A2AE4E28D23BFC19268182C2BBA716AAFC480BE37C9BBF4DC28F2C8
562712E5A6FBC5BF37982E71728FFFE6765BBE196A47E901AD5E25A813E561BB
98208B6774273C951F471F1757FBB59A8A20219BE995D3321EFC59AE1D02B0B4
55373151885BC7418CEE60F40390BE8BCA1F4B91B50946432A49E60F172C7429
021B4EA191A19A2C08972C535DAA3639B351C8EF330672C958464EE94D024861
06E74890AE46E8806E09B1B0527FEB50212522C8D4156C9152A277F5C0D54167
E37CA1A49A7A8B565A43E91FF394AFFB601F0E1003A8BE0F7763DFEA83C12AAD
D1B6B6C6D64629BDED7AA56C7314E0DE18B061FBDFF9AEFEF7BBEAB01D01195C
D56464B9DE8BEA1505CC665B93D7F66D5A056FC7D759D4299F491570B72F309C
93771A135FDC321715AC7CE4A3CF248DC5653C772D06D80F724965A5DDE1E2D6
592BC3C82DFBAFB1E18CF37FD73BED3ED3ABBE9F264DF5FC0C8CA3E5F90FE69D
7524D8AAF29905ECD4087486C3BC3BA45477A010174D514A9C43879D8D13F6B2
4282C90BDBE389CED1967ABD76A210E24E75EF1C06A550EB524E7C2B73E88FA8
DDC551BB615F14C511CEB230BAC4BABD95092FE567C286506A6E129F26AFF6B8
990D29E04174208490D521A76E0F66A508795CFFCBEAFDDD7DC740742D351C35
D91A668109838CD5A0EE2B51333E5BBEF8692E25D439C9370803DE1A88E39DC1
9670844F11CB17933E808D98373BF05423B83CA6DC6907F3A697683ECBDB92C1
9A9FBC6756155D710772DA9B71DA9FFF8EBE13218C2222783DC7BD168457C189
49DD41071E9CA97A49EC7DE7DE063D410F4711647FB6438363994EAF5067F98B
AF3B741FA0A417E91959C5DE980AD89DF9A1D6F08ADC5995D857CF8E510878A7
F71D1BD6B85B77E6274E9D4071755FE22341B60E84D7FE2B256FB5CF708B1E9C
280381E0223EA3D9F4C16E56A03A21EA24E4F9CA223634FCD3A034E32078E199
83A6E5DD3F09FC4026FA1B3E93D55785EABD0593AB15F54CAF3F6159041AAEE1
68612031E729D76C6E03B982B706B914B9AD592071B5182ADC0AD0C2DB94E420
48C9015F0191DC546DA31CC1C39F0FE8CB03969D22D25C9B9F53F8489BDE53DC
D6B0451078D20D89BF4D7DD01B15D0A65F2A76E4D415EE314143DCE6B389149B
A88F6C87BC6D399BFA142DA106271029E3285A3322EEB0E230B46FEDA69813FC
97CC45EEDC503C3212055CB749566765D9C77C40E136E18ED948BEA12041F703
0D2A06C44FD1B40551DD48BC242EF5A9AB42C4F6CB06BC5B9E6A5817FCCA713A
FDCFDABE9FEF9D9FA4D8B1915C098DBE87B454FF6E93F270C6235E4B8A833F41
4DD1BCD6AE7DCF25734B0B4E9A86588CFA279DE2D0CFB8AA39A14C1DDC0679A6
8A4CB24DFFD0B2EF5CD4932A45FBD5B264EE4B2DB1693EF8ABE784D7A1285D9C
1A7F70064D06DE41AE65F6C85D6B72F6DACC3146345F86B498E23B5611D79B9F
7390C3BA0B0B1D2CB3B1E317DD20548B00A80231C69285CBD7966E070D8BE5BC
93CB968FDFA076452A9ED5FBCAE22D72777B66BFFACD64CB39A99A44D0C25564
60DE8C9D88D651C0C6C3415617DA725C3AF1F87B002DA1ED1DEC7852C62341D5
A1054DA775F26186B15C32F0DCB0EB88DC7864A8BA490F85187FA290D5190A77
B1AC66D2B19BE21B9A14B05F45AAC734BBF26CE3BCC25C48D4B8BFB71D48A40F
623E2050CF50990D06181C0A3EED435D221D8CD8985AFB18CEC7DF2A33272227
5A82F8AE601E8179675CA9A8C53B317707A5D7E880C44EC9A7A3017BCC911DFC
194F0249BDFB1944279C1DB0B83EC2B4B337CAD11B818B9B0E66A1200F88A3E6
0D8FD4C2DF9BA1B8CD46D27DCD02C941D1FA8AD4FFA47B01ADD904DE6BB158EC
91D8B88333AEC979E3854023A8480910A265B9C7C841D52370A2F51B663AA366
AF8F5F4FAD380A3722F1AA4C72187FB7C900738E56F30D6206B504D7A2599562
C50571B9802747F5A501A02B13493C27EFAED71E378ECF5D496E4A3591CD3DB9
9D69CFA1291369142DEE95CBD856E4A689C3C3507B6C5273718B35844910C461
0A6D0235ED49576FFF97A630258EDB1EDFDB8CCDDE45B21DBE802747F5A501A0
2B13493C27EFAED719CA124D1F8F7DC7462B37BDFF67A18288DB28EE0069F9F0
65902DE9BAF6F1D488A91E81BD473BD8927F834B10CF9143F3A1A0F8144251DC
65425F4E8B5EF9F9E6AE360A26CE45AD5AC2F89B38D7C875E95DF937A382BFA9
8948AF134F63C97318FD3A578AC5E49B5CE4DA13FEE0FFC4CBCC8B80947EB24F
6FB675F1192BD43895723F609835D9DF46EEDC13D3D7F6C6D3600DCD94F6A13F
151928D09D01776436E2F07CD4EC408D5FD8E0BF2ECD48C15BE3DF2471E8EC90
81A480F5D581997071478B005067CB41F763FC0A61CD7012A4230CC908BAE939
7F2A5132DBF5917E27DC026C52BD8B96F46B82A1C856A5B6B056EE64D6D27F37
501F4F8E7782F6F7438C738496AED573CAB3D00B0495D0DB3EEBA7A8D27A4076
D464A72D3548C5EA920BA0467656428BA38A2DED6DC273D4A01A3B8C0CFCA82B
ECBE37544DE18CB57B816A2622D60CC05C2478175BF6B5FD497380A30ABA76D4
9643990B0FD808D09F8031199474F7A6E507D39E1395D05B79D9DA069D7D9B70
F2ACE6F3B5DC0C42CFAC051E6654EBF7067D0120FE52C2816022CC1FCAAFB477
3C6B69040E50862D7AC1F1000681912B10D5EB06A1FAF22F143CFEB7394D5B99
D467ADE9A4CB7EF71F78AC63153F1C4D22C0F882C25B1EEC7F73101AB7E7084A
BA99F094456CC8DDC13FD76ECE0A2CA7C579EA6EF935E92CA1F3AEC0B4C5813B
AAE9AA5E1BE163F42FE712EAEBEB1C1028AE971AAF5FD5AC0BEF630CD3ED2C33
A6895C0BEFB530C2DD920912F2C5D2EAEEC38AE9FE7ED7F00B1DF635FA68B5C8
2E7AC13C7BA3645C34B168763108FE08ED508E5039526A257154FE1074CA2D53
96BD982447922072126C498FC579691E9CE5D30FD8B30DD02E62A1BF85818531
502161F8C0C21204EA3DECC5CF8CF928A6ABD948C5907C557639F284563D55A4
089070BCF29AE4DAE6EE62A23CCB48B11CC15443DC799904A29EAEF8DDFBC7E9
08FBF57C76EAFA146B03A33BE2E8A8873672CA145AF67EE7BE0E1B393FDB13FC
3B396DCC9836EC80F2EA98312A5C98E09AD2608F7A60E0B575E02B02E5960AF9
069ED5C3D0465A37E8C3DD1B8B66C0576A01EDE4FF828F6C20B6E6AAD4FB183D
CC97477F8C211C253FC207E868CF80D10207D2C8B1931138479083F2732FFB47
4E82F3DF2E1D79D46B308A65AFDC98697D63FC27737640F3A29CEA755409A073
F81A6308DB0525E61CF68C80B1F317B847E42233F98F0051FE14DE4D091EC50C
18F43A63F7DF10FD16FF24FEEFA0C09BDF25A621E3C9471246E8884A783692C9
D5F82C1968490A098EBDBDB30BCB757164E0E2FF0C344F0803CC9303F8F6B664
488A313375D8D768F9DA94855A815E65563A87408B1C906E0B331D256FF9653B
CEB7AF322A5F1FD51781652095ADEED8929F63B439E4475F39E70BB5F3F4F7DA
25492236CFBC73C57A428D972D2BE61F9C67869C3B8B20B5408C68D101422E92
625E32FDAAE2073C46224DE3658E1DD94FF35AB6A2D55AF2CEF2074DAF626758
2C232B45DFA048B9E15E6849AE18177D27092F47C4F5C8A89C2C0190720043C8
D977769C785DAD1A291693F7B4DA37992C12E9E54655E18E0B8D3FFE824115B7
7D01DC1B2928359F61755356D067AFD944F5A7863B037190DF254B1A20137AE8
61DA45FE0335B6EF780BD59AF905287CCD2B1A84A01C69B3D6007F8981ADA3D3
5C9C050CD4ED2FD3D131CB5104577F64CF33EBB718DE9EF5D5CC5934E588FF88
BFCABCF4C15739916855ACE75D72BD92E6C94BCDBCF530DEB7ABBC113019405B
9CB4C2E8065EA1707E19B52C0287BFECA7303B070B727DB798E2819212DF5876
C183F33471146790C55F115D2B95AC7B57137873AE8B7DD5A91A4DFBB8CA5ABC
A3387C78E203E42DAD7FB5133168406635CCE51A3A5197A6AAAD9FD71E78608F
3BA2A5A1D2152FB363115B8411660B1B99FC93B1E95328D3083B0E0855991B6A
C8676F90826E69E7AE37658120EFAC36AC8CD449BB6245B8572E9CE88FE3B864
50F5FAC854C75BCC095B22141AF327210924A7EE8CE1A0DE2BEF34F7BB1EA822
C5D05CBD98E5C545E92F8E77B50E83553A9EDAE7EEFC31E92F96662175C52E52
61218B37D2FA657ACEF55F7BA6157B5E1817454B89904515C8518D80E84ABED1
50C21607C6350A9D1D51BB845093F431708ECC22321A62E8D0C45713E455293A
1C911AAF63B69EF4B1C639A1381991A4CB77CB2097DCA5743E051A5CD3E1C801
21D077C8403975D1AA7485F802CD62FD54057EA80AF98B54A3454AB687749D64
A533722F67CCE46C7B53EABB6133D42B780D0891929A1D45F815383BF61ACE8E
6E25EBEF3978205427B10388F30515A1C8919DA7FED3A6081AB5067CE64FA40E
B2841D5C3C82398F0ECD902AFC9CA87E82CCF7DA3EF54594BCD74EBFFCAAF5D6
17DF073B54F03E6CC333ED47C5ABFB5A586989C46B832631F461AA0478A60D49
C859C7D77E8CC2C54BFB8F5BC45BA818E5B6DCCF6578B6B2ADA2C09F59F29355
0109D3657F99F2E269BA9F99F9852A13A2C560356911F3288CEC83CC64406DE5
D90A0EC525DBF3DC447CE01637152BA948E1EC46434E323E275431B651C756F9
2F4E8524E34B2B4ED56004802CECBAF3D0661D9FD2FC223FBD088F08033E590A
628F14FCED37AFA933D37563172F88CAC25B1C3ACBD8019877EBED694E7FE2E5
D964019491A77D5F76A3AD29B22479EF2754CC82DECA3E47EE05585690975471
DE4D4BE914E42C9E9B2D37F29DF61AA44228318AB1A03EEF3837812A586458CE
CE4090749979F60001A1ED0F5AB567F71E1FA667E739F62B88C6B0C64D69055F
CF65476B351D4032278D13574FC2C668107C39400DDEDEF105F87671678C8F58
61720A2E11E81C8D48DF4143BE17E8AED9ACA9484CEC36CCCB1F4AAD18BAEBFC
C470CE42A63AE68699BA2EF321D7A81CDDA23D8054E70F19D908FC45FFDAD06F
8E219B50BCC5A0C54E1F59886AC35C27648206F893F905BDDDE96A952F90DF80
FCEFE43D6B23AC75F27BA09A5F4C16727DD858AFD0906D6FFCC52DE4AFE82FDD
3ADDEC125FC8E45362F68BDC853F8C09273B4BFD002A4BC3209C8B81A227624A
BC9AD4FAA821B48CC84EC313D8E095D7601BD81EDD908928FA612C34FDAEC9A6
C932A07C448363D45D80F3C19BB610FA2136C33749BDDE2C4DA4143A4D5C2CB6
B9DBA285DD89968A881B9F5C428CBB07A333F21F39BDE30635301D76B7450C9B
AC59E5EA772826DCCC56A87B0624F57918DC0BF96FDB7EE82D45762F01AEF2D2
32DF3FF42BC5CC3FE4FDFF065BCCD284480DFEF840571E02B6C0EF9C7691424D
FC328A32F8382BBDBB1B17C84318DF8DA712C29AEFE69D41B10A838DF8B96602
F8F6CE590E82A74451DBF27622E99305DE4283D9697E3807B9D2BC965832803E
347A3E9F093BC1FF2DAA675F73AEA2D8798A1B06D63389A045BF37A396847ADA
54611DF96F768A3CD559D790FDC0DE10B9F52EAD95477C862FDA6176EF980E86
CACC07EE4C4E5B30C8EB8F41DBFBF0AD52936E24B72AF3966DF7A5CF46F1C919
F9DEC26A689C4E2B6A3693799E8659C5C6B0CDCE45287496827E7DBA957EF7E3
4FD756618264F76C76DAFA8F7470FD9CD5BA05571FAE4F83E73747978F0BDBD7
970DE592AF9FC47E74D289DC285EA30F1B146EEEDAF47269B930F2E9F89AA805
95E748BD9752E4B15956A171AD001BCAACD3EF6F8F0F412EDA69E894BFEAF42E
0BDB28F363BF5CFEF55888C04CEB3156137BCCE783AFFC81C3BF9AA6A878764E
455181F1B1B2C0D3C07BFD3B385B5241D47C520180CB423C97C7ACF1DBA50689
3AA3505DBAE59B4D9DC3DDA6C887B2725D885B5316D92B814344871E74FBCF33
BC92A58074E87BB7E48ECCE784DE0E39FBE2D0843DDBA26D56A15FE0A04423D0
D35E4BE9A3E804A8B2EDA40AC7EE4965B2A769DB0FB950E7CD9A25393BA39044
5D0E1126EEF0FF5523957A15D11E6E3B0D32FB5A54D04E088FD99F8C01DF71FD
59ABE8314A3BC2B94C48170E0D91C3AD0C2DF441BA9788DB45B6D952552CDC9E
1B2406770A5E115E07DCCFB55D1280C93ECC1B5AA33D86CB99932FFFFA76FA23
6BEA7DBC30ECA747BC8BAF7338D481135EF8EFA8A4C5346170D4360E30EA54E8
AA0620D93A7B644698B66100771F4C38940A4685B648CB4193904EB20674DA8A
1592EB66C3B7E95C4C14180ED9DE354C980E678A52E05A4F981E33CA2F21A8B5
72EC73E764D05C45D77C3D74397238EE307A9B4830F4995FC33D5D6E29CA1534
5B3C3518377CD800A7C8BE60611581FCDAEA22D552BFC12C9271BCC7992E5135
0E06E3573EF9C6234B7BF4A687F21359CB4E0D2F50FD54ED78EBCFF39185898A
E491E3586B1744A47A62D2C961F5E47AD505FF0F7B703D9994A511919AC413D9
6849827DFDB305C103D6A4AAA011F42E4C713D963466FE67F4977F31461F65CE
05CFB58D473E83E64F4E8429A667D515CBB2DF624721816549DEDF781D4A92B3
2CCD68947E3AE0A4DE924D386AF20E7FD7A66C8AD41946A45F2AE05681BFA0BE
491B0C7D0D3099371E6AA729F1588ECD61A6FD5067E5765882645EDA600EFA1E
7D08A28DEE51EAF284D749B99BCE670CFE23D7F2E7962396FD6D3B39BB71CFE0
8B3574C440840136CBE5BD34E579CED7EB6B950A98B992CABCDB127C8BB09C8D
C4940A7282F9513221EDE9C135E9A2B7FCF774F2F20C3C175AD1BD0B7F4836A9
BDB94221EF653D39BDFB085A99C9D7CD97A9C911B51A5A93B5A1D37717505417
5A89C04ADA9BE53A8BF765A86CC287688269DFFA918071C97999F172AA9D3466
0DE7A90A0CEE30F62253BC1B6C3D3691805D10E2094A521908A83110222780D5
31372163C9574A45888E01A8006191EFFAC440EAD6EC6737949FFAFFC5B4D064
5E842FAF07005B4E8DDBEF263E1949E6BF143384DE6ED387C051B641383D1E63
7CDEAE18CF325BF0D0C7593BFF9B3E69305947E50EB3EB8FC14062F5B794F833
A4DBC1269914F62BC5BBA2F507E61AC7142F86C2CF0929FE4545C8C7F1DDA918
1DAB900181AF135377C34631885B1C3ACBD8019924BB65BACB7C7235FF7C37C6
03E82A0A14C5FDB59619EE36A1C85BB7192F87B72ACD67FC1619D15CCEC637AE
16BC8D6EE13773BE45A99CA1D9F212B622FC751AA4AB124585E06D5D04A0593A
09FFA0F6038EB3DB7E03999680F0CB97047CD28566C527C855E218E1B25537F2
6C7C7B0B42CCA09D6157F978A849D4E21077B0F736EBEB4F995A09CAFAF68014
A388D2404523AF2038AA1A96A1C3F3A229C74A98359A4DE63DE27550A674E81E
F14A363737337201932071393EDE16A7742AB90AAA07D76C91648652BEEC3910
EFB8B388B3E8FE6778CAAE0DA2AF55D8FDD49CD62F83C6E32F6A21DBA1C204D4
BD28631D4473AA95686020129BFE51F547AE254669110587D374A29818882E96
0E1B92E51544F34A36E097EF2094809AB75715DD53F007FA8B9397D3F39C9A7A
5EA8963A51A57EA0B040DC8FEADD3842227607F8F83B7D8F2AD737297D3BF895
5BD2405D01D18D8CC6421EBA1D542786E1F167E964AB5C97C0EE801B93AA05E9
97D9C9A692CAFAA72A6A732A0A3D2CB23F781ADAE361B3714077BFAEF6E84813
5C62CD131EC19E447F8E185F5EF268DA6D0B6A64EE7BF60351AC49A8E7F481C3
BAE824F0740A3FEDC8E5A1260E0031C304556AD2695644AC890E05A8E6A0FCD0
BBE9E43144248A1E5D6F87C6050515CB989B933EB6F148BB7C3D61066CCC93A5
8EB8CDD4819F6CC2401C41405AB4179BA7918F7046B153A092AFD135BBA1CED5
292DB6BF409817B2070697128FBBD0A56138DE4597A36020A3B4937580A96D0B
1E140095EA29C4F3C0D6A582933F1B0D12657DB21DB55E790F9544961946233B
FB65EE9BA2772955DD8008401C6C03A9DBD97DC4971A485FF1A7E00E2922BAC1
7B21311632368D09ABD592088B5D6A6385747AE505FC9C5EC74237B349BFAEA1
5468100D83513DB6A923CEE02DECCB58F1004411957AAF9C33D3F196361C0D84
8EF2E6C08E211644838E7E5E0C559531D9ECFD95835A08D027B4FB3A9B03D09E
E119F8818ED14EA803B4E8819FD532DCEA9D61D74513240E51A9730FBB4204D6
902C1F1EEE1685588A5D1FDDA18B472A9E6F921A6E6BBEF40995284AE9234C35
DB5A9114C09925373183870F60584650DC295FE114223C24EAB592D605D74815
924031C73CDE82BD9C88F1AAD052694B1312CBB2DF624721816549DEDF781D4A
92B8110CAEE0B0DA4E7335D97580B62E6B5FFA8EE82D9ED9806A35DACF823E35
87184361BCD93BE40A7292789867D1C64F9C1F13FAD9090D0402BF4B9AC4EB8E
1B9C0308C466F8D917DEEC7433E52D6DD2B8DC10DBEC0A763D24F81C40D1D1C9
A93EB94D553D5681789D0C01F608F4FD1AE5538A2F89574019C9211F039ACDC6
37FB5B629CAD8E550E12D14D8CCA6B5D4ACC0D938DCCC03323F8AE3000321089
1584763002A1202736A20A2473FA2684744B44F5201B0D9352AF45733CC24F7D
B79955E881A6C3EF2FABE1880BA6320CD4739A736F44FAB37523E4941D0FFCA1
EFF247E85DB144650433CDCF088039AA854CBE2B23850536E8E4795E869B9B76
5BB746D921F90E423CD10E102F98DD2B2732002F624522452F484EDFE8DD9072
E1EE72056E99F76AEF8A6F3FCD0E9278AD06760BC572C9E9DF98B901B7DF9912
C78154401A50760274C777EA01886FE5FB6F899C3CDE7CF7E216A8DEF09132C6
0CC5F4465341762B5E078834B951A4FB265444881CD326EC9772003FB9749398
69E6DA7BF32FD8B8E0AF91B11E1AA7EB3F64E38F2C6937B09C9CB20B95472310
739607EAD9ECFF2EAD268F17B2E6A89F75F3E090F96003095CB6A1192C8AAAFE
6BBE85E6E15687CF71BFAF20B24B3E7586DD8500125FE9274A91C1BA12B76EE6
154AA506FBEAA2051B5DC30DE854B47E4EC4B319959677CB943985B96CA9DE97
D7BC8BD82DF3DACE44B0B82B6DDD4DCFEEAFD7D12A2BCA320713301B42C6D856
A54431535540689F97C2EE6E8F76E7AB5789EC1DBDC016A7DEEDF13468B9B6CF
ABFB27C2848F61D2DC3E24F275916DA849100D427568E6F90E82824550748F3E
8692ED1BA8227F873A5CDE30775E05382EDECFA2687360B855F1D01A6D1AE754
AED0086B42B6A5EC55C0129882F8211A177D13FA1453DB448438CDCC113D4177
F248EF181479A7C6A6235B6ACD05F0492374ECC30BD782DBA0ED88A2D624062F
5BEDDBD572A87DD3836D1564A484B2C4B8B5C38ECC1BA79C3424E56847F18700
B780EBE4B0E478768BA86963ECD08D902B5F8F122A26C36D7F403ADD5B2C9611
B7CED20499E342BC499DD7AF69B2F8137F6F2F38F273936579A5423586327556
75EB6BA5DC24E00816163F839CF8C96D57C9C2FE8A0F40247A8B0B2C55EB8288
CCBCE983BF7AD091008E3334AC38D8521F88E340781E44D1A57DC01920BC0C34
193E943C760135A752E468BA5CAE58BB54C7F8A1BABA0C60DFFCAACDF4BAB14B
7A9B55FF7D969F6C9F4C62BD5B7098074B5EB99BE87FE726110F0D005E364D96
0F714FC31B8B2714E760FB0D2DE04119EF111FC5B27CAEB1C72CE933C0916F66
6514CB0ABE2E10D76443597E6FFD9EF3B35C2DBB6489677B31D3CAA581BE014B
62759399EAEF8B4BB1CBB26F5A7930F9A48264EAA83947CC57C2342631E7E5B5
4DFDD17B076A6C37997A381C4570B9AFFB3CFB642ACDDD193F2E12B6DC2FF232
8F7D5A9AF1EACF04369CA879CCD7BBC730CD7752E3352A285A4349F7CC896D78
F27BB21BBB3AF8676C4CD0219ECA2135018C479DD853251462B3266AFA2CC45B
2A64794D9F1180850172153304FCC37C856FCFF91819842F6E706AEA6A38ACE0
C6CF860C2188B5E5E2ED391D6FCD8910EC8717BDFFDCA792EAE249871AC07C34
5C74683CB88971F0B7DD61E288E9C68D97007300424F53DFCF6569167E33E7B2
B6D63BF068C10D6F9AFD5F14951650879289E46CCEFA7384F171144D38BBC8B8
377903243273E4CBF2F63FD02438205287C2EECE937457C0F9C07BD7571DB98E
4DA0CCE3A7035AE0ADA08924CA7598B052AB49A5002126D76AA70CFA232D50A8
E4ACBC3A4A0EF2BBFC888C815FE18BDD09AFA0F51B8E2EDD61924CB7E84EEE93
E95B049B39331384D2BDEDA3A981F1EE5247F8AD4E55DC79D8FDD56246423E49
9CB9A7414BA06F555E12C7E9C3C3A91005EF8D5E21A632A88F910E6D20FDA3DC
D47C32A89F919B5E37BC3AD771057F372D35667C9A40E902D6CCE37FB773F074
A4F34B67CF40D426C84B5E8A4A321D74D8B8EBA29C521822D7B1BBFABD56ED01
6A73BA0EE2C639D604AB57A1D9387543A8B2CD35CAD8A9D20DA1FAF6CCF1D503
211339FA016C436A844B59AF0F0EDC11C6CEAAD52603818F445B4CA2FCD347D1
3CF41A65E3314AE0D9E21685A6F8C724D8D515C07A313036BB8526C78909F073
1ABAE42B05FB7532F49042CA0344D8330CE73E7BD25031B669AFD40CC1F747A5
282AB1539A899B48A6D01190089B743CBD5236C1E9B87293BC8F47163D8206CD
9FC5CFAEDB24D242E49D372F7AEF9D4B5AD6241D50BF2E8505934C94BA39B5F3
0A692A131177A66F1143DAF25B7D1B2624A13FF4989B5C5C56000A41BDD9E57C
8E25F0B7030EF760D205ABAD19AA8E525D263BFA616636FE192D634FA8B4FD81
2299847265181E5DCC77032FDD5E7AED6811E401645D810E258A3613A2C065E7
BB201AEC4B6B172972FF86E9183B11962A40F23501866DDBB2E9D09321F72217
77132B43189CB05CA3B0D56FE478F998FACA6B856E8156DD12BBA280B4A26400
F9D0C917686DDA6620138BEB2D09479DAC8C8169AC63A5DDFBB21C65E834AF8F
824D99F3A1666B32D605802A66ADBC04EF07BBE195302F857DC4182AB1FD865F
F57A97F1608D9AF9E496A90155B4EFDDA3FBE4A9306A27E4BCCE7620A2D1FBA3
A8F37EF0877326397147DA237B6439575C23953D5B8A1126A032D6A5A4A100BD
A398EE06E7044D5344DA9B077CDCC3A2AFA6684042162729D7412732C81783B4
DA51A000E667FD00E04F4ED818D424540542E91563514FCFE9351273CC69EDE0
25ABEA631B03D8B5C489B6BBACB50FEED7BA19EBB91844A379C61C3A679103DE
5CDEEA4C23B832A805B55A27E737DB0F0B2F653ECD4AF0A694A8001A233C534B
C611FC79896CC8B8F6622793C79F90D61B0D5BE7D947E93300F03F22AFB69C81
D3D12EAA7DF14B2C72FCDB0680FEE259DC0E74A6BA411DA379C651F336196BD3
C5A1AD2F4A1E8F5CFECF7026F14D6490556E0C34CB2BDF924D45DAE4BB10F68D
0978EABEF64156B1FE8A8BB0E43A84DDAF1D5D83CD28B0E7BCE6740B86653034
3C9BCF5FC41BDD8AF401262D06F7971EDF2B20F17C6B42A1538F055E8565E224
0F2ED653DE65F1E209423EC068F526C96DC84A44D91F05EBBCAD3E3672D0617D
12CD5BC3FD591AAE0862B4A0A84702FE8293786E5C945FCBB879E6F4608EFDAA
1030508DEF33FCAEE8FC5A2F9087E66D773B5B27AD9918C8BED30FCAADC5DDC2
0CB9B1ABDFB083DD938B39B11CA34A68145CEA39233E0CCCE094632C88CBBD08
B44B8B5FE582AE5100B69EABB00DD86E65C44072C76BD0BA7E8B7BD8590493D5
A9EF51FD280814D64D36E7F7F1B5C5817EE1887AE136BBE030F0C989ADA2D29E
D6B7A0432B903A7B14DD03D1202CC91117BBCAED80C26D8987D2B8E6AA9E3B91
DD44B8E1131866979D632191DB56144348C31ABAB6D1EBAD7387E477FE692705
73F4E0B12FEADC00668F8CFF748B5EB00B8D8BC91A8BE662285E4F4D5F21E401
B0535A6C109FA80D038F04CA50C98D5F9D6D88F714307D9AC33D1FEBB7C8657F
2F4FC8BFBAE073AAA4269D31164C586AE57A9CDDE06D3A917F7ACE84DE008054
95AEEE538EBF0C5759A00166DCBE4AB10703CE4066FF292E33FB7F65F9E8F24A
FB9BA9AF7778EDFAA54FFABAC24B94F1E07216210641D759A0D49FE59EA9C028
0114DA1DC31C40C6B1CDA1C0C6C67050C64075694775ECCE092609AFA39ACE57
0ED1D3BD16CE4EE89660423BEE2AB609151459E8EAFFD6E4E0C812C4FB60E503
92E6C5A21A0344DAD6F5FC8F10E9D20ADD995C832F6E7389ED9B8A962A07EBA9
E221168E3851F464FA0FE24A4684A412A41E3617752A608E88AC1F714EE925BB
8B56491C831AFF4FB6C25DB275BD64195BCCF927E83D90D579B8AFF70C77FF9D
81E3FE63046FE7527A51D77FCF82287A7F8C21AFC7653956AD9934188EA84C39
55AB678B3A40FC255E173280EEAAFF7889D173EE221D755EE60E65EB589D3FE7
47F5DC9919257E9459BABFBC3834A74FF181217274829E72BE90A453CB787847
6B032429666445A14BC1AECEB4C256F9455D4EC6D38361AC2C008E0741BD08CF
0B7EFDCDF9D498991AA35B065A04CAEE0072B181AE5B17C24916A0BA52A83EE9
B29D51096F698454D43C3CDBE96AE820D6FD45A9F73D48EEC8BEAC10F773E0E7
144F3F28404C70AE54867729B3526D81709CF160B8287324DF5707BB79152C63
F244AAB984B8188D594A10E8DE1F95FE60963028B4B0C2FE613DA04B178BA1B6
64662B99FE1B61936FC7A2442F518D66AD602BD5A91C0B86229A221142BD8079
45E14D404763BE5E0710DB47CC14D15FB903DA89CF6273C0A4C5690BFA77735C
9D18063D59A91035FE1CCA8EB262DE5C43B0AD9E9A8FE84878F141555BDE550F
891BE2A60AAD31FCF272255FB451D03B5A4038072F391B23838CE8BA6B9B5781
F922F9A2B7E8EB24109D4940607AF8605F3CD09296FAB3E5B1645C345A8E6160
5EACA16011AD8C978D56110864DDF3955A9174EC2FDE15D874027F1E917C9379
B1B1DAF5759630C3A20227D453FC05D0B6864C66D205CDAF1BF96A73CEF81879
84B2528E193865F113B0570340396CA3954682F97A7D04A41203F475AD881550
F881D34661FAFA936E94002173633BD78E350E678EF453C525461FD74B6C5F6F
2C12A36C135FA05B2CC6BA7A4DB04D43FE7B0D59CCBD93364D7F5CAD73A937FA
22D8C5E491D942E4A280D41E7BF4DC47DC63D68B6E5B02D8A5E2DFB8EEB63525
F4158C767A7629B4DD9C82FD02B11C86ADCD6CE388C17DFF246506AF9BA4E772
D30EA9470E0E516C85F68084579ABDC1DB22F2063C83DBE035993D8A87B4EC3F
4734E65A40A3F902B5454A5626FA4FB320CDEEF5664B2E07E0F2774613A59DC1
F26304AEFDE19A7130D44DB059529FE34BD11A29DBEF8646688AEAE771A2802C
269AA93589AB8DB215AA7A1883A4B7D2E766986D2D64847C8E243D2875B91FF3
B4F1794E46A5F40B374D0E28EC32064580DC1A5DA657D2E191A003EB0FD7E71D
EAAF917473CEED5ABC8145B756F731C77A8C12635A346C593BBF6E0ED51FDCD3
FAE9A96494EE7179A9A8046CAADECB23E33D4C6D675EE8057CBF5701F81A7995
DD28F7E560B7E28F8A6FDFD1139938ADB736D4E67F87790242D6285B5EABA34B
8D9FB68800CD98FA8BD1828E8E29943549BC195427DD6E061F31FD1AAFCC33CD
298DA54F4EC314F68E48B035B7A6EF7A13379C7CC2D5498F89723D5135123C1C
4AB526EED12C08817B0A23F385B98D58F1DB337CD04C21A9AE71E3E1D945323C
D7DFAEDA9BB3562E303621D22E7EC564D39C60C89CEEF9F4945ADC2C36560F5B
80D278A7FF994D081BA5620A2240604688D738CB7328A937B1AB3A98481BF2D0
F83D57F64F88FD459CFD3549EB6938D8919101E916623EB22788DB3792281776
88FACA273141741CCA141C0ADB54606D13DD5C99FC647BD9BDF6DF272E0D9E59
AAD3F6D49AB46806B89CCCFAE5BA9DCEA7C19D9FF2CB0F2F7A37A8EB95FA9CA5
8C118A10A2035DAB7EBE7E31EEB48FBB98F80C586DB6D79682C412493AECD7CD
EB0CA07948AB6FB3E0B34B0BB94E0E9AA51956531EFE55CD7FDA35F0837787A1
C8B7BE022EA03395E814E0FBED87619AA8B446ECBCCBA2CCE5367688708A87F4
D46A407BFD47ED2D389EDAAB093FCB62F69A160AFAF34E32FB4DEDA8F8646594
6F574BC8EF0C99995C34985CE89A2D6EA8A121E410407DDE9C6DA1A61AFB9F40
F816BFB164CA1FD7F5D3D80E73348EA2759199EFF68FBD1D385B61D6C4E4C89B
59CC4FA42563A1CEEF401D3FF66CC7153FB5985B8D13DD0E8EC5576C89C58E13
8C278EC50C6EDE4ECDC4CD372B357BA00F0749EF3AA6A96C43A7A858F30422A2
311FB1BCD66FE6318D2909B0B8FF7FC32DB8375970EF6DDD90268A7273B469BE
920156F2F1E844E733C714929B9217BC8B46FA2A97AA3B80A5F6BA04E50EEF30
B657C4638A30308F658D1F129D79729EBD6C3239C1A3A2D637070B93EFCDA56E
8BBE95167A67D1FD685E8445229219C438A1BEDB84118D1FEBD854661EE70019
9E682870F8F29234E7BCD5B4191DC862A29CC2ED2658F7774A42344A35931F77
5B36DC93C8BD467FBF31A7F32EC5BB2F16C7ED4454C3A85BE75FC8AC39E611C8
C574213B6FFA5DF2E6EE841401496D32523C931EBE2973865ECC9F2539498777
B2B93B400B039FEB095E3EF37BC4D42FE1FCDFFD2D22F8079112EF32632FF687
9A973C32EA37FFA87D3D2145AED11D6F11B4D29017E0A3E968B753AA58418F1D
4E8023D3B1B3E7ABB423F8BAB641585A232654A4EFFB04FF92D4AD2655D842E8
A7CEE47E157D3865014EBA257DED1C7CEC9A33334A57DC3C689C1FDFF1959FE0
38ED8B0301EFB2E581F0C19352A8AB5EAE34337A8207B78EA97936B9818C9B01
0EFD4E27294DF35A5B055BE2446B9D1E7A2B748CBB2613F5140A961B9635F628
441A2B34E9D538E8625704EBA9AA4EAF87458ADF2538F78B3E54134BDBDA104F
7146B799C193AE46009C793CE92A6D3959758CD8546D26F2DB11E3B6A613B038
EE88C99B0213E7F2F923411285B2CC0E9F9FA975F03D74A7D0BE007B8F7B3A2E
B1277B00A04C467E021C0AD04C5A633CFD82E3FB92224E0F5618217030E46DAD
27F7AD6D4D9AEAAC668C515C635023236981F19FDFABDE54B1AAD90110976F99
C8CC016643B5EE0AB83020D9266A9E2B9F8F3A1E06F93C4F500CEEA1E29979E9
C5196BAC1C651F5A3D167FFC71FF5EE3297B9912D55AF041F964A2B2C84329DB
BBE0C0E0C76D41CF2956D9274AB307B631D2C02AA7DD31BA6A6DD697E47E4982
BF3995C8A3167D3DD3D635429D9302F6D04A2879EB353560514141F52B880226
9BEC44DEFE3E8FFBB5D3727157B2C2E382D8580D3F230B6D74DD5D641C989CAC
FF836D275C6ABE062A000F790D7A5DE4BEF1A4D3227D9FF07D2BAE7E1C3985E3
72A42147839F786345978F60B22B2C7791981A2EAE708A700F29861FD30C0289
33BBEC4E9CC325C75E78A68B3FEFD2F8CB157A1ECB4BA800B68A69789EAF9768
45E061779EADB55C57C98D66C2F19E7DECC7DE8E4EB42869846DDB862B36B286
E40CBD110673435C4933ADBD22D5A5E2CC0EE7945568079C85B46F3D0168E45E
2653673E18776C4A2DBECB3EE0D0B96AF2E4F6B0464E735BE698C48DFA47652A
33ADE45AC6428154F0D52D1B6ABC9C914180A2719000D6FCA1A16EBAAAB8736A
EDEA4D88B3649F281CE2D1437C6DAA0F71CC8DF7EE2A007284FB7EBDAA2BA4AB
E5F62FDD79496EAAAEECADBC4E3E23E7C65A093704C866DA39646238DFE2D83E
CB5CBCD6D9E0F5804F80AE663084B56F2949F68CC170874BEE5A70607D8C65B1
71EA886CAC8EF27D5F0AA59DDF254F7898EF23F87813FBD9FD6EE02F2612F75E
A6EC1CF7DE6E539A5F58E5DD08E9ED74490C3030509E181FD4AE13512CDB5A66
ADA05A58D625AEC0B4C67014FE22A0990C36D7A184222F3CB4EB6DE42489A343
382FD6ECAEC35389880C5CE8B284F56CD3F1EB6D5F6420FA944A4FE913EBAE62
6665B0B2AD5A70F9E4538A060FAEE2D4AE3D60535EF88805CE470F6769F20066
A57EF182608D0C1719C9C9B008F7B491C8C401A85C0582AEEC5E618CD7076E63
B4C5CCA7209F834629E2B92BACAE5596EE264C84BBF7E2FEE027EF20BC856A50
E5782AB198BB7A7E603FA745633EEED9D3FB009BF85CF06326ED60D962A17BE1
F933049D0BA4ECA814CC8D68A5743EE307170A288BD75087E23E3A0343F0419D
BA01195BC7E660788D5CA7F661E13C3DF8FA4C47B607630B9E969F63A2E3950B
C56A8C170C275C3F29D5137BC210368EB2FB0D2F9C0A77B9EE84573F28B2CF85
E065D7BD9F38C47A863F46538B8561FFC64E36339DD214C39C54A383698A8E05
D0E0E8825004A77EF93D5CA61444115E3B608BF5F3E4A752CDDAFAF61CF4C301
96576407D9DD9CAF0DED5684DAA35D2DC2E47C330072D9D54F33D35F156A79CD
4BBECC1A06FB0E18475B96DF7CFA3822A42A9CA42B551916614BD32F9D562DC6
BCC4F3FD398B8DC714C769175C92ACDD48E7782F60AEE602231DBF094A580A0B
DB04D05CF0C2CDB4873127E20164F9CE7EEA8FD69B9CB6107046BAB629C966D9
F6265E89D6927F7A9816261618AE93DBD0E873D1BD0673250ACA39CD563D14D6
7D86FD678E14EFD240FFE05EAEDE8A108359FDE96CE007A61E51A80ABB66DD40
12538F37213504ECDBEE66F07818F100078D6DF7B895A4ED96115E54340B4C0C
ACC2E2A4D1C4BFB18EBE4A0436B9001E2DCB298E26E3F099631C7E1F1323F285
1E8CEBEE378FA63D56CF12512CE3E5D1B3F659093F14CC4604B068BDEBED065C
EE60DA84D84F56E0F4B06A03B3BF14C747765D1D7AF371BA0D04C72F9FB75569
C9A59D44EDDCD6A83E3361349860B4054A21955F9DD4F8096588543E5057B68C
9707FB286553DAC1EF5150BBAFBD65B4595BC716E533676D0879A0EC72661795
CBFF49721719E7C5CFCE2A8B6F9DBD40B94BDF769A326A09D8C6B4A2CF0CA552
334F34A79EEFCDD490A4200611D2D29CAF2D3548C5E5DDDB31DCA5D2FABDE287
35A1FF45DC9F5CE0AA502B6E1BB038DA018E04B330F2C2D57CC39E79653647F4
E131E27942405F7913353418F599EE81B844
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1200
%!FontType1-1.0: SFRM1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1200, tcrm1200, larm1200, lbrm1200, lcrm1200, rxrm1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-185 -320 1420 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF049F26DBA77FA20B6513D
285BE588908C3BAD6A1BF20F213E587F1372774EF31D66B237AD60712D60BCFA
83574CC5F88A6B4676356ABC2DCCBA498F4272476923789659CA8836F2FDA94D
38271FA2CA8B77D7099705602FEB41085F6674B7AA0DC588C9ABCCBD9115601F
CDFBCD7A8E3CFC8B1E718E576254F5F05FAB25DC253CB561EC3604749243AED5
76898EC99BDB1760B0CA75CEAE3FE6FFF1700F64F585BE9267ACBD5F155F3122
732792E17022F23B1F46FEFB0696E5C2B78DE0479F09B6512035B9C488042B62
98525003ACCAB6C8F36BBDDBF6E82F5CFCCB418706BBEC1D4E42086E70847405
3ADD1383ADD34574F2C6C64907B0561F107A259A649BB525F0B74CC3B1F42412
C4F81A7ACDC6A3F37DE7FC06DEF21B9821DD39D75432AE3881E431569A012092
38FCECF1BE90B0B199DC4D56EE18658B2818B69FB6836486BA302CE7F6EB18CD
7AC5AC6648097F65C8AB851E9BD1696B9703230711F68FD82E1DF92936A4B1A2
CCE51645573EB0E762D68A417AB6C0A2EC8756FC9BFE5972DFC4C794E948A970
918BBB1BD7B31F9B1B323EB2AF8D41A153CB1B1511F43560825DB6ECE30C16E4
902BFD1EFF59F06984F36F284553AB3F2C7901B37ECE058F5E477EC9C629847E
1C7A3628DB7C47C099A0DF53F05ABEF94A760232985AEDEEB7AA05C95273179F
8A1AEA30BE626653D22F7725C28498D776493AF6DEBC59D44A2F6F26E5DA1A77
7B9EB9D897130FB3F6017F80AF21E4FDB73CD96834152BA948E1EC4765B253A6
565F51A1ED2AC8374CF4DB767E7F3FAF13F0A1198110F554CB6735D3C2DABCF4
0C0A431D263F22D091D0F560ABF5968868126430A293C6E8A6A87593E580B110
E15A84AE30E4846980EC5C1FB6D4037D7E1DE8CF57B6A60DD4DDF422075F85BB
0B1411164E99A03A3591915372454A70C8CC75EEE08AF87D35032DFBFD61A4E9
F968D1F514A69D62B30B89F47FCD45A41B423664A7862A1246B6D7C5E2B352E3
D5428D2B6677D38729C5752DF835EAA366A11F6C7564C80EB1E0A3EE9990ED0F
520EB2AC073E63DD9C935504D14BAB14A4305B3D64638B6D952333CFB7CC93CA
D84B6DE80B35AC82623BE64BB6C1DF9165E00D29054A5911CEBE09A2054EB39A
7894F49184B672F4AA1143A2633647BCF502A77F12506C02F1A78AE9061F1497
CABDF651CF5ECC83877724A90D67D660CD4C54EFB79F9A6C1DC8EBDB66E8D709
D4C0A81E7C7EDB6CF1E266B753AF6BD100261A6CDA280902D3F0D15EF4042F54
5586901E870F2A99727E9B64147EC20330C3E54FE01AEA9875DFAEC86A0B6F39
D89E035185C3A6B25CBE093FA5C7BDCF99E5C68A9EBBABB3D61A6AB4F30B4D7F
94F4B4DD1AAB6C22FC9A18BF46B81CB362B87BB87E9552402C35490285FB83C5
EA4825225DCC23DF406DC5CE8E67FFB64DAFA43E89D6C65BA6C0F41AA45B1C8B
37C51B0BE4837FC8AF5FE5322C5E4D349D3AFB3029ADCFE7A0E77CED7E081795
9929EC9BA536B5FAC1C7142130B9974D9B98F65EE7482E0960DC8F3D182E7066
D0E59C8CCD951048E301C196761203194E76D37312568A27CCA2E138EF84AD2B
9477B7E873DA9A592082B76EBFF6F4AA21442A06CD515295EE75D1A64F802753
BFFB5E20D198DBAE9190FA53F3E9D5D12E3BDEB89E41EAD591C03DE559CDB7A4
5A9A1357E6EF028103BDB5DF9E7D3F4A4F82103FDD8292157E42EA4C4CEEFEAB
E9D9C34A4963D11F2E56709565C8818A538CF94CA94D8E9CA844C5363CC7BC94
693DEFE67D7AC8C5A90D47F7DA125579AC4BCBC48EBAFD76D4177A055524876C
CE479B8950C3E836134401ECAECA4F3AC8A71D175583790C245396EC83A61C71
5C727EC57342386892092FDD82641F051980E49D2CFF17FCAB94C48FBCD88B74
208A2A2CCD4A0E2E158AD7FD36CCE8B52E8E4A2D0BC7E27378E9094675061A2E
A636BB46DD9D5448E85D01F41E5142CC0A7DCAA6D263E7C727A8E08919C9E8B2
4E140AD2D5E9B7BFA63949C6C3F6ACDB5B52BC82AF4E43023C1039932589FA35
F5DA6491546CAE9B9B5ED9DD3A3B5A57D424C527F1508AA5317CB8AA826B0845
7AE93C036557C5470F5C9F0DE491ECE4FEAD1A32AD951419AD1627B4FD812299
8470F02F16F4E2CA734380757049AA7B8521BFE88B7A49D7E74CE274CFB18669
6DB1E6D556CD5D4A727F1ABEF08B7149CBBDD1F734BB2A148A7B61C78BF7FB22
77C2942900263F23EF1F43BF734B16AB45A0D6F8117581D1D279868906C02981
DDD23F78727DF5515673E301CF662892D77E804D6BA348F1B580D6B8AB794957
71A925A2EAC9CFD0B7CC6194F26EE28509DD387D5CDE04EC2501452D8F1B9C56
504EA4AD2E24ACEA6774C91E41E88B83E3346B93A6EFEE514B8671658FA4F44A
0E1B507529A79B2FA31EEBFBA2EDE43E477D7CB78039009C2ED8FDF34ED4B7F2
CABEFD674FEEB2FB66EC78E79FE34A8AAB8D0EF9CE7D435F733D362AD9789127
D2DB9261E8D9FF7CFDE6ED2124FA19676195E1AE979FB86BFE6B0442C1D1D834
51AD06C41DC67AEDA1F598DCA2BB9F3FD7213E93E07E1A40CB6D8CD2C51AEF6D
00AB614B59F0FE99B2F5F5DF57D97EFE4FD5C118A9683A31DCA2BF4F68881DB3
C7CC9B003EAE8C61EE308AC29CA77E8CBEF0D8738115250C98040C0F3F20BEB6
5A3C64A83218BBF95DE794560A8062B9CB5097E8399A88408CA41A787B46B106
FDA19C1A3B0604A2F2C6DE7A3B8D0F5F78F5D188F8247C0A408651BB23557236
23D895FC952E62CCC5BAD1744CB08936A44F5BF5293BB4A1D1D9161A94BEB44C
03224DFD3CA71B3F973E0E0FD6CDC6D14D39908498ABAD5470018A3535C09C64
08CCB7C8F2AEF4DD99DD79D20374ACBFDFFDACB119BEF16FC59B70FE5E721397
6AEC2AEAC2A11C2149FCE3DD19327BD7E8F0BF847DC84A2584DA4FD73D0D8F49
E8C91AB49815EDCFD3E2FB855CA522B30A03F3217EF2DB47DBE5513901C5D16E
DE14412E9B130891159EE5EA7AE1997079652C308DCF40080DF4E8A3FB701466
0DB8846DDF55C85A6EA591A4F4C202A4A34D58AFA04E3E722CB31159D769B8B8
6B65515B097C0F7046BAD69D84A48D7F9EA9C1CA7AC58FF1704B058EC4FE3F44
8A3420063A48741B0B90EE255ADD6F58915A1F65D5F75CDC3C219D4D5B7DBB49
B4F645A6FC7267CC23171BBEC63B96FC89587B94FDEE540D675C45CD1CA9CEA5
4EE94A490257567262F88BB7B30F8726A45D1F763119B830E8FC4B36F4A79DAA
C252D441B79666A5BE883137B9BBE02BB81A262D9DB8FF256B880F0157C7A82E
60F8B05EA83F52B4479B93D6997A5F8CE5847F76F75F7138A14AB91B1B5629D1
042BCF0F2F256F8D66DF174AB29E242F90407746B9D0280A8B59AD93EE9AAA8B
E98438C6183E09397FB3CA19A49432C4DC5E6744D3D19D518D34B77727AB3BC6
462C1B6EBA112970A27127B2FF40386ACAA06BA208FEB6872FD6E3239CF22E90
CEDE5E43538A977C94968DB597E5409D6261EF5051343DA41EF7DED28DABF224
9F4CCF87C3D56B44779BD6DC52D1EDFE8551354605820D48BA0B2EEE00A5D69D
D1A6AA50111B90408B221CFBE92AAFBD21F3693D59A2458EE4862D6C07BC2974
FCA71B0F229984B5AC91F911A410A3CDC14EEF51FD53882F0946579EA6DD504A
9B6925F0711C12A60DC09BC0A75E0E4DD995D2906CD9C6BCEB9B05C828594E85
5326621A6004AE29653DE98E34B94F82E516245AB9C4D5DCFE8EC07330174190
FC19948EF5E45CF639B7761096D8811D186FAFCDE2B4ED89F54170C9AE7D87AE
D03CEEF62A61BB5B2C460A99B59E72CCBF81D14E55A2FF10CB3FC004FB6A546D
BBC391C42960A1463EC3CF8F48E1635FDD92A066A79064D0B13EEC603E28016C
12A74FD1FA8CAA01B352AAC8D92D2F5954AC75F8CA210A788DA71A96F1A3279D
830B8323B5363F879B50A9889B31AA88D41DC0878696AC9DDB6C8AB97E1F5FFC
C5D2187EDCFB416FA0B1FC626436B4D6BBD2A831771FBA6214E4822AE2A122A3
6D71C265CD97EE45B95F25568382B0594FBD38292B866A229467D5A8493B3D41
B290CA0CFF72C490164307150D3854F89BA6630E7484591461308F3408B0A7E9
4ACC731777E1E6A91528DC379FF0B0DFD57017626EE61BDC14037EA930F21DF0
05329024B77548F1E6C675660B8504678696CDA81C2EA065FA840C3708E952CA
3ACD77D979AC4CFA726AEC55CAFB2683102821B9517794A198A70F173836B3ED
DB78180BF4E0CEA496759FF421021344A62760CD37ED5A6A036359DFDD48C723
AA98E50C3DDA1776C145DE69B3911EEDC0FACE7C7F381777E4EBC7FE7488B917
BA29E71311E9E85A5A3EFA5850FC5E5656202A99FF32FB2D2216A3E0585AF0DB
9680E40E685715B1DF6259B085F75849AF4F7253A1B7FB80FEC1583A62617891
054C2BA7F2E7EFEFCF0D58128BE8C4BF793DC3D2208F9D8E091E308D1EAF52FD
6C8682CED4703001AA6E55705C785648C8F77B93A92502B8E9E67D7AC8C5A90D
47F7DA125579AC4E5C0165290B0827C18A5F6716222179BC11ADE8D00CC400AD
76E463AC4E78DAEAFCF2F1BD681F1E5D37F7388F60DCD565D40CF5A71FA76FD8
A0B8A48679EC698FF9E0E605BEFDB23545D7299178994B8DA7A60C4469640C22
65E18DDEF78236AE62E52A30CC934160240E5413D153F57BA02C839AB44CD84A
5DA4199ABB5C36BC967DF98C1B17BA3C60CF272F917B2D0945D62A16674950D5
4EB0FB8C8B745FF004ED046F12B9440A72B0AFDA0CD139A187A446CB43228470
2C5F6BEAE6F2E219087928F3F41D2FB8069A59AC64DEC5FE84137017B6928844
3ABFF10E76810A1B4B48EAD9483257AFF9B04D08E9FDDE1F913244F25B3897CB
E2AC32BD3F624C2F649378E4CF39F4CF139859A5F8DCEC4BDE5831DF5D240970
812D42C8DFC16E97A7799904CD539A05F245A0BE699F0E68263B168A6D535604
C001AE195CF8E71CE392DDE39BB68DEE20F853903F755911A900FED40AA8E215
99E7945E6D9BBB8EBA6FC48DFA1DC20757A05DCA0F6B1978FDC55115DCC6AD26
958275F202B952383D90AE4EBFBC5309A6CB7F642FA2C9FBACB1741D18400740
1BFACB3B3A26A43624AB5F523DB325960B47A8B80892EB8D5A7C48C7EC5406DF
466111A43913D833F2B5FC6B4277AC8BDFCAD89BB4EE7F1F6FE16F8F1C76C89D
1266566FD380FE61712FF47DEFB7424D672452A43EBBC61AC7AA8D9E2F9428C7
7FC9CA9F4873028061B3D7F572BC06A552139BDF6ABC4BEFF5C55D26FDA55470
AEAB4F82FFA09299CF23D1268D14CBAB5564C89DE944C25FE0045A7F4203FE9E
3E7819DB607861CB7A553266283104ED939ACCD519297F71EB9CA7C52E5EE791
1690B14B5D5735FC32C14EF63941DFC1F9CBE45876DDBC0DDDECA8A5239C61C0
F82215CD9F5B9B7B6500ADBDD6E41DB7DA44A705E4B6AB0B7A1530C9B489865C
8E1EC26AACCD06FB688C3C4BD9808AD68AB83A00334F4DB2CEB4E5C7FCBF815D
366798B871E7A5907AD956E5C2A57259E74E1F72EFCAD5E60C5D3529C8D3B74E
0CA32B52DF012760AAAEC5DC1577259653C198D560B5CAB8D2D1E70200BDEA47
6F02E285DA876E12DF12FD462A60B37632A41F78AACAB52FF089F0B98EA502E0
B4D61A3611651BB4942DACA4147BB87D81B3CA5B558C2CC5185996A5EAC0693C
F5C6E7C1BD6A0E93794AC6AE6C1B02B769AF3E7F42656C12DD50C537036557C5
470F5C9F0DE491ECE4FEAA88C1AE6CCEF2D0C62B435896E7D07A5E19704CB801
9CE51DE790C43FC8DC613D035CBE8BA3E50918E57C288783D93CA182B25A639E
FC2FBC06DA85EC5B02CC55ADCD02E22A5EE70BEA54A242EFB4E11FCC4D14CB09
D1FB95DA3915C64B3AC4088B1D6BAD13A35E74BE50A4514389FABE8F4719D07E
1ACCA75821CBA7D378A7B1AAF5F56C7B80ECAA6F92A9F0E7831D53CCFA3B54A2
E80DE0DAA0AED8CBFA83C6C5A5AB819CEF1B325F6124AC42E88EB42E426A5AF2
02736E8164A2516903F84D99BBA968096F1F47F1A85B4887E3C902A790A25F29
FD7177607237A69E11C40F1DDE902B5A9DE78C570A583C2F9E97FC41E0A53BFD
6138EDBF43070BC392C2A120BC4A761605889FAF87884BB606362C930832C581
7C8967FB90B0C3891A934D8EDE7EE26BD9D4FC3F476CAA7BCF8BD9D7BB3A708C
036C5ED6740D79C03800693DF0F764E3D7DF55BC7FE4625963BCB5253548342E
7CEEA0C3FB8DF531E3BF960485EAB5778EBDBBEF0E945DC7DC15C2099AF08065
9E5530C3630B4884404A0725515A97437B72B259921779F44DD1E2DC69FCDA14
997D410D1A7C631F7307F0F37EE63A10213A3F623737F9BBA7C7CCAEB21CB75D
19A586C469B26C636A7A2D59170E72F5EA21F898C140F43C4D5A8A22013B2EA3
897324A7387548E5BD50E3EC120210CA13AA407CE1296FA119CA43CF52BFAF0D
5B6689706822959E95B02C05E78C1E42A891083B7BD4F6A87A109AE4449D3D8A
D0FB57C79848358061AE4098710C7BE793A424D9CFC85F8EFC404EBBE29E4203
D0C3EBBC3CE61419380DE970989674955A90A759E2AD12383D9BC845B61357F4
F8B78FCE9BF97A619C9FEF2C180E8839FEF863D3C64E1B66C31FE7A94ADC6377
CA469C545315E5B7C889F3CC3A820849E6F7F01F5DB6078CFFD8AFD079D03B37
4642131A67F71347F42BAC773B6FEDB164E81175DF181C21CBAB14E585AA4288
E6B24CDCC5AD670ED461E740FA8E8DCDAB86410A9250A182D3C07231A6AAD8FA
F98BADB64DAD461DB208B1E2A278771A411AC4E1FDC621C67361158973302455
83FB4181181EEC09160F77FA1AAC4452EE1E9EF33D73028BEDB6AFC73AE7072D
80C54C75ACD4EE0144CF74D866C8428FA690CDA94E7AA6CDB4660D5329124626
8801A7242BC2298F5E69A2BE9F81F9133829CF75DF1568D5B8CE847D5BC31C18
657706044BD05383A16333463A350C18C4C0BC997193BEC0B6D5121321BF3C7B
B8441296F8C117951E605DBD9D7B09929FE7696EA51A97C57726D024692F3CB6
2A89F00CA36D0B37F7BA2357C5496A24DCE03F0E39E7D0C8B621DCDE8EF1551C
C67B6E2D71D1A05CD06352E7E3F45082D81CE2A83171CF2BD29C230745458AAD
CBCF1914419AF556865498019581C4D909649B42CB63A3EEE8A4A1D30E8B4324
7674ACDF86579FE6E1A782BE7A11B64CA8B0FD9299D7A74802514B2A92B310AC
A0D817E11303011DABF41CFDD0ED59380E334AAD0D99E5178DB32E7385F50CF4
641D3A1FA799E48781BB1992C1BE39602C603E1E14CA30342A3E0F121195D1EC
4FAFAA990BF74B15961AED9382E1314AF8EFEA168F36C3FBC49AB049F324F887
732D21C4BF9C536E018E7D37096BF267DABF258C395570670CC2D535B0FD0EB2
5D48CE4F478E134BB12B1AE6496431BD1F1F8193782B9F6500CD2F6CE4FE32E4
5453F707E31A242F8D77D1895AE0EA6BD40C2F7323E27F28B9A87CE29090F44B
E145C699270DAF00476083D7E55DB2452C427DC7C43DFEA873FA4F3241FE1870
06DD631F6D650BCD6278AE4F45B40608B485358F0DB799603233C8322E494B0E
194F9446914854C12409F6804FFE58DDE52CEE5159F4085C0F7DF1B655C9A8DA
A2BC52EDB3552132BD69D743FF84A0360B28CF790EBB3004500FFE9A128DECD6
16F6D9A0E924E4046C3F84AAC35B02D4035E51371E4AC5222291681AFB56C08D
0058ECC4E243CA78E80E8B59A6A52B3C5BEC13B783E6A87478C615115AEACD61
985EDF817CF7182D1C2D4284FA5D7977C6BABEFB4D78150FA93EC69A7FEED016
25938C05778D06A527BA805C4AD8D7DC30F917CC3ECB8EE7E862E8A36A5DF0FE
B92286609AA19CD9C5050670ABA77D63D6B4DEDEBC54EFD5548C48E8086FB14D
23BB20B9784BF61030191552277DD65E3518286DAA531468932E60C19CA8BAEA
85F58E713EF90BE637054099C139BFD6E1274F162178DF65418DB36D6A3AA282
6314955BB39C0DA0F9952B72C904E621B5887C565062B792A29C10F49D0AAB63
2EF0B4108E32DB5A86789194FE988F5FEA5AF6530E3203E1D71DC16F79A527CE
C0A3F399965EFA83C94B8026D143E481CC79F4ABDD8F92ADB43F6B4CE01D5789
0FC1E1080D905A3EC059D6336EB49D654B456E636D325E79F7BFA976C03C1793
12D4FE74C69835A319167F634C11A79DAF44D6D09DB137814854BC2C0616C7F9
CF2C65D4178CD686041177AE094BCBC49BC30D6E0314C43C14066C3441DFDA05
B31E18DF511132E84E045BD8CDE82A25533F8AC1EFC9D31F10B848F7B16C9B45
B733B4C82FC4538263CD6180CDC03DDA601758AEAA06379C9A8BF85B3751ECFB
968B95164361E5F9523AB3EAABDAABB083F4158731825B386131CADF19889B0F
E75B3D8A739242C8DB9FCEAF8920555EEFC6781CF97F8812D914FEE39E343EB2
3944236E53BFD5E1402C92440BC06888759E6D45A788E118F3525DA9F7A76457
36609CFC01A10B4B816B1CA37FD5163982B18206BA8984920E65B51A37437B85
7D6B65DC64461585B840C7C84B810A2656D261F7600746F71F33FF1548CF3440
2D1316B4DACB92D44DA5D7D4B650D859B0F018BA92EA52B101F0BCAAD5B8612E
CD25BDEFC3784E0B540FD89804A7E878D210C09BAA5EC8EA6C88F5BF25B41700
86D26647AD32CE4D234999FC5108D746F917C3F07FBC5F359BD191D7ADE548FD
52D008453B6EC993A6DCC6A4C4D7424DB748235C634765716DC06A04E3DCB308
6CBC8AD21B873B4C088AA53B20D6D5CA9C351DED298242AD44FD99F5E412B413
5A0D606BB580E2ED2EE8D0FEBAD0FC7872F48FED6FF5BBB11F77A3DC66E4C806
F4206253C2DDFE86ECE8EA7B254C00951D64D9C729398BB43C6AB9C468104114
D2F8B387AD84597AC3BC645F8FCAC9600CEC36EB714781BBCF088F7D358460EC
9951BB0D319DE62226FBB65E45FA308C4B5E979D2A540BE0E00618CE0A843D17
724B330B14C0C655A1FE09293EFA14AFCE671A239BB45E96E0EE3EE6FAA4B1F4
0FA51AA8E3D1364B9CBBD045FBEEDC5FCD9CD62ACE875D8DC42C344C50D8545C
11F06142E3C7510371FEA9D1AEFF710DD33D1DEC2D4B81248633A3588C8AE4BB
48A51ACB1294836F632C7EEB1BDFEB658FCC5384DDAC234B3A29D8ED829110B3
CAA4AEC4B05A378904EEEBCC26570C8DAF390C7A5378DE013FE008DF321357AE
B8A7B7E13841E34A5A88F52328AB1FF56A8E41156536787959B5D7FD35C2FB83
60902F10B49F1B1D08332141EBEA85F76CDB90A98C82803EC7673E3823CF91A9
275853CA9F69E413BE8BEBD2B15A36C9B6C153F4681E14423D32B40977FB26D1
68E25ECDFA1C76F4458D721F0F42750EAFAF2466466560ABF120209BAF3A3ECC
9A2615723AEFD77BD11AB4AAA77EEF58B6B83CB0F6B3AC20D9A519A4D0C795A8
8E93D1340885B57CE863809E26EA04C81DADA7046F084ADEB634DE004DF04F91
B19A68DC6FC30B83551583B6A1DC39C40FD37EBAAEA6EF09E6635E5CEB4D92D0
DB863EF4517BE1E7B49F778700C60738496FB69C1F8EBE330CB5CC5CA9E84BD2
D27979A89D27EBDB2B277AD9342308A573D056B7CF6D6AD94AB078C2117DE0A7
B7D9747DA4509CFA480FF4A1987BE93A09D9B85D5F744D70436F809DC4E93455
D126A70AFF4CB4DB2173F7C66FAF382B1E26FD68C71C346635DCB7C56CFF576F
715E888CDDED7571652F47C4F5C8A89DDDB81FCE108B92B759751E10C76409A0
F99B5E3640F29C61D1DEC399536386594E73785769D2F49FAF91264E308B71B7
D3DB7AFE6F5C8AE1925C5A6241C5B93BCC2935CF8288EB5D6C1CCBFEE4EAC0A5
DE4ACCF88FBFB366C8CB334D0824C5E83AD1B8F73F383D3F50F358FDDF71D32F
A9ECE0C669C039291DCD86F0B80DAC54E27051D23EE8A56B9236E746DC7C672A
6C9E1B912FB38808FE42B9B38280513AF1280237CBE074D111AEE2239ABA45E3
C444DDFED494334254229F2F12B075F5DD768AF5492220864EA84119DA03F03F
EFDD72D3BBEA3741E6B69E6AB7F202271AA0ABB72A8AEF48D8F84D149AA3DAD9
15DB2D77F5E874DF3C2D25383374BBF290FA1AC64CD598848E3745699E5EB0A8
19D566E63A4208E827A9C6017DACAC6B3638813C0D544D1150AA04FCB9CEB26B
5A8AC1F2C0047602E7D579893431EFBED225048037E3C1B6D3DA1DBD388181D9
9026877FDFE438990E66EFAE529DB875F035D6C142810D3D474C7D71AB3BDB91
A242F159C313B12A40A078BD25BAAF9E42D37EA9FB1F568D8508C412D1709E95
A21016AA9C2C134045C1F2905FE1E0732DB25AD8F831DCE93480DA2A44FAD2EF
12FCBF3AD2E2A68EF8D1C1218D4CAD60210B99230D6CEC48DA422E3406555B8B
AC41E9202C4B754F4F8D794D579B1A8FB3A64118812AB24CC16A8E9C17BB7F7A
947B9726CA234AFFCE2CD8EE5A583B4E98B9DC2F8C0BE47E431CACC8B58B851D
AFE348376C2354C302B43DFC6D8B52855F04FD79C68B02BFB2EE71B5F6E89036
8C67129C32180B57A98AF057832364C58ADA12A8EB25341CC626A156A4BC6C0B
9ACDB9AEA15468F70EA7DD47C85E57FEC4C82BDC78FCBC586E4820CEE6F2C77B
DBDF65731F190046D8A9D111E24EA002ADF2649DBDBEDB658BE09333F26EC047
B16014275309AAF5A4C2757B78821D52A03F669ABC8CCC9C78611A78CF993A73
530B77F5FA31B09CE3679B3F989805355FAFC24AC086A7F781427A59867FBD8A
39CCD0C7EA7B125599564D1241CAF12B1444C30DFD8F23A449D50FD59799A97E
5862A9B1F1A1E4230C4A0A0099D513B57E6FC286E21A648D752E99A7CBCE6427
D928EE5B0546A0474E2CC3A0931689726A378917C9D6D6FB197062E3F50166F4
41595E0AB29A25CEE992C5D1BAFE3C2A458ADC8646ACD86A35CFEB2E62742567
609F50127AE4D71B98FF280BA80D25A1577850F6D3F7932325DFDDA18D698FDC
2932E9D0E61B6476E6ECA29B3804D947832E25CE49AE6EE1273ABF9216E7F0C4
1AEEDF1DA49980325085BCB265139170DC8FB4294B006D7E27978C65DD95ED83
73F7A7AD84593AABFBF4AA3A0C67D6B2464E75C786A05E8F774FC58B1DB899B1
06C676E95C2C35FE1AD1E854980E99E67E0548210CACC9297AF9092F6E8D04AE
EEC8180102D9941A488E64EF89F3A3AEDBA367DD15130B59BD9BBE6032D8F91F
4149195C4C0FA45C5EB8C4CB613E51EFEC10CB1BB88EF099096AC0CE918CC6B2
296290BD961310DDFA3A2CCFA0D152DE3140F57CCA586970E048F92986F5136F
BA2C4AF59DE093AE4C3CFD7581BDDC215BA7BD3F9F9E348228E30C89A27762BA
A272D0F81128C27406BFB58D633758E2F9F5D6B3745304CCCC0D26B724B75A21
2B0C9FD2F70F2DE4FB3C38EBA955C778222491C10E48DFBE0BA96D6BEED61D57
5DFC25F6092B4B550705C28236321F671D61415965A867B8251E83330A53C2AD
C94EFC775736E6BF77FCE6DC13D3D7F6C6D3600DCD94F6A13F1016931897681E
4254903E91AD5E74A523CB66EED77B14571B11FB879018812A64647031F9CB3C
3D8458987A3D5D5EB6E2988836C2945546163F0D95C371AA67319B6262F586B4
30B4C94657C5279043B23AEF6DB4354FFF0120ED4492FB77BEB94DB325318C07
E0397C9ED24CBF5B6B2351D287FA96E36C1E4B6069DF42B2C54E93B889FA1510
893AAF1F34B34C69135569A92EB33FF3FE32244B9D05350C68C17C994C395668
AF181713825534593CC46227A84A89B3BDD68B4C103BA0A25E1FECDF6F8FDC11
B92080AD18D17984E42D6CB66CD6BF4C7333D54FC0043B23ED64C0A0F6038EB3
DB791A0283750EF567B17896EB7B59540B407BE020701ADC14FCACB1A666A5BB
EC4DF7F27D168AC728A1DD434F06C029F590EE857D44B579BAD6442D158956F4
813B20E099A354404DDE4EAF62DA43FDBC5A90D503E2F5B91BF3525DA9F7A764
5736609CFC01A10C7D9423DEBF9510FCABB4488B685B409A77BC6CCE0397C28F
3414FA7B2C2D61BFCA949E79B487AF262F6876CBE655CC716EECC32852B69391
00BDA273018CD884F8C09A5D8883A4728AA4C318793AEF9BF96A5008CDF28C22
7A373899D19740758FD5FD2168755BAE8BA6950C08C8A03D3E0B6667D9DB0532
447A2EFB15491E2407ECEB50AC9460B3887509ACFB57CFF06CB21E26E0A150A1
7769EE6F3EFE676524589A59D041FAE4EF6E23A0BBAC78BBA0A48C2909614AC4
21C88457319CC4ECBF2DCB81DBA3D4E9B47722EA14796902C4AD9266EA6E3D45
50BDFBCA9EE6AA91733BF48669EC007E79EEBC0B7B78D5961DDA2DC1E85BAC1D
EA1310768FC3E362C5F6D78F7F3A3C56EDA7C9F855C0C930BAE2D5E681E7D26C
0900E71C7F2B51F705E19C87F668AEBDEEB9FD7FA2BC887F3DAB21697F451A81
77E5D69EC16959479DC625DA2774CB84912E406F297346A1CB5FEB90C2C237E4
97C4CE614A0E4BCB764F95E95257F5F9DFB14F50FB88292D240FCF688238CF41
AB2D48777BA3D9FF95AB2B94C555CB74073FB6E71E7B82FFCFED50B79342D9E9
262BEBDBC6F9BC72CA850CFCA82BECBE37544DE18CB57B816F2F69F4EE4BAA9B
4B2E54A2B9A0A8C6E37256A92F47B81FFBE6CFF6F1552E9B1677799506D3627F
462489F20E18CC4DDB0863C815A35A746A6529E8E7D648A8A8D9BF3906B23500
3210891584763002A1202736A20A2347E550C995445E25FDC5D6B13F6DECCC9B
07197B73A65B733FEBF7E573678A57F5421B5DF4F84430F2E5809E05D69ECAFB
69ADDD4293CF49F2DEC55106D803396574D17B4D6201D85654CECBEC9D0D0BA7
489FFCD4ACA1A864E0812137B6E93CDF5A979BA695E7307CD212DC5D24899DAA
DE9680499EB8061E2E1CF04290EA00D40078848CD9B394F1B71F2638DE722ADD
2D6D893B519884560FFD8AC31404AE9936B4AAD61952AC0D65E759A57C1B1D67
B5F907B4B1304696B77E62526FCDEE998336D079F34F8023B15BE183F7C20B5C
0C2A20527441734D40464319CC825C4847FB18E9532BA41B8BE616FDB96D2EC0
94CF962B9AE17D947D838F69F7DE1D111321F27A9AFB5A70FE8DFDE7F7D9A2E4
DEC8F02D57373A3F45BD25A5D100A7D317756D913C9EADF38A4537CEA1C949A9
B59685C9B0BFBE5042F7035F77E8E58AF5BC73E26EA106E24177079D71565D66
9B90D98D38F1EB47DB5B721F3548B3D449E96A91889AF76C8892B8455521B31B
DF8447E2996E90C6A369B773AB2E1F62D1F9A090458348A5C53D8CEF3E568B09
2638E44CE1ACA4AC216A139461CBC9EBB8351D75B4E76AC7BAA6554B70BD66AE
CB7D0B7BED5BA086B1BBFB7D50D349F05AAE61868E84AA0171046931B8C71797
100AB6A729F011EC9DDD1A038834B95156556D4E7B133733AD020A3ED76ABB1A
67F64E239D34CDEB10B46E990FF7A1180FA5FE2E9B2C1860533B14964E079C49
9D2416469B39223B6A7AD6668A2E039CA91B0E20EEFC510D81E7F12078B83B2E
2B25E83E38EA85DA543459135E6F866A49F3E7A91219CADE1C8DEA6D574371DD
ED97CADDFE8016ACBAE1AC0704862B7EC1AAD7D7348226EE63C7745F445C203B
FA14CFB796D9AFD825A18ADC2FF0BF1BEFDFA703C48569F4D07E1E35D7BC0CA0
62AF1D5618151FC8ADF34AF8B25A6D21053F36ECB2F1F5BF8E0FCDA42A7BE2D8
A176D5F39CE7B808B4B0DD55C5A2E4F0803DC41B14E04B1F922DD2F706544ACD
0B47E0601FBE43D7A3ED539389AF6998444CA54118C8B09D9CF0C0219D85EF66
38F09AF09A5648AA590A8A20B36EDC9DF932EE201AE6A19847B858D70F140FE5
3E1E99A513F6CB0EE597207946EE030C79D9B7970DF6655F825A2A7E9650167B
1FEFB0FF6DA620702C8A136D2F406111DA6B3467F3BCEB6CA61025F1B47C66C5
15B9A8E5988AEC8886BB9F256A443FB85AEBF158E94573001DF7BEF0E7C69CCF
1304D1C5476B40D330E3E034AD99130294317B1EC76AAD91BB3E5075E09BE565
AD23C3593F5479BDD59376613B9835A290A7AEBDED664DDE803D1A67B0679082
220A91ED01625C004A95048F521F0C3EA131C4343895625D78273BBE360F2D2D
FED01082655269EF944CC33536C33406A2D9765F1A7EFC4C1396F7C8EEB55DBF
C0FB176A383E6C5C802E2A9D15CFF9EBEB09BFEF890A7DEC0096B0022BF2FCE0
89562B683358D7CD7374FCF24969580DF562D9C46EFE4095418C8ECAF1F87403
C24A49A3E4B72899F58356875591013C4D176885F24DB0014D952BCD734CF6E4
9A7943733AC1BCA83F5D385F3A99131D4A83A0938F3324B483E6D05B26ACE90B
5B800B2FFEC1A8686C89A5C4A087741B436F4C713232A2B34B655327CFC687C4
789F527E9D5CB5947A7DA336D26DC89A1E42B64D51266622D4E108A94699516C
DFDB9652E44C0F5BA742D7957522846E80F5B79A60C36F948AB436AF24951376
6C93CB184EDFF8D33C1644B6F0D05AFECADF40BBCF823DA33A69115C9AAD12CB
D079EC02F4E5F748C4828EA756694B26551E1DA1C0EA09DC5AE868AF24E46822
C87BE118132ACC9ABB173C1504D93C9B24A5BDF0FD67A313645F9556C5788727
6F8CFDDBFAC82D43DEE033B9137F4972C928B1727DFD28BAFA8491056B564C2D
7433008FCC6110F99B65E0A0C15D5DEAB87AE8F8874E3C77B58E8F01792738EE
3474BE958CF1B03E4FDBF7F0C56C5ECAE9EE926AB5C0AE5C1305D14B6FAC5DA3
A35286BB38AD68D83A4AA7CED6A64B8B610DCBD55C7333FACE14CF49395656E1
5FAF3C52B43017C8149EBFAFCC66314917AE544FD4F438A3215050874BA51EB9
58992F1D7E865A93E622A7C6B6F50AAC14902356867497A93681477CC720F9B5
91691EA880D1E3144A782B78F5F888BC7F50CF13455664A3A507933760454412
D76C5F200C1E951305FEBD1E7E19DA08AB2B83E91CCDB2ADEE1252D109D36E89
8FCB307375DD3B668A8576F1E76CDB75AFF48400F026E1603F09F8EF7C924F8F
C254B21E51DD0198F2CB1926D6F28EA796AD16A026F20FC2C0334B9B6F84EE49
6D7BD4DBECF5F837F4D160189B8391F04592507BDF94D76CCEF8E01AB4FC4F25
44F781D9A871DF9F63740C16099438DE4CF32A206B120ECC5AA8428ABFD83AC4
F2A20F745B223EDC87AFDAE8368C3C280000406DCB6467D348F19E291013F5DF
5AE9CE3651638FCDFC6F9DCA37B3F6A749E2146E28032BBBE6CB92B2204D9AA6
A25004F53524617B862656546CE68E4F810EFD7C09870D24AC35FEB5F41722B2
77047E199BB8FB6FD38C9A3582BA3B6F6045E9B1F96A5F62428C76FF132EFA2A
0A916C04CA601C49712F0E48C70F0953CA6A2985F33B387FD4889D9EEA3D7B78
E5487AEE0DA8E335ED147496ADAD23D665C7A4EAA7CD9605959705BB574CC5F8
9900C5B24CA340AC870F4CD11A759719E33DBEC359BCC947E86A44DC736BC4AA
A3F793E60E71F90E429025E9B67D751BFCE2A50A86F5D9D19E6806FC64D5D92D
304E497E0E3E9A2D73122EBF40B07024D447157FFA2E91DEC3A871A4F0C94896
ECE91DFBC378D654527FB0B82E2F15AE222784AD6C8757916375F82A1713CEE9
3AD1447B9204087F2ED378128B6CFFB0C657D3550CD85DE40238E3F3D97588C2
1CFB14227DF3C1D351F564720CA73E853390CEDDC44F675CC0510031695B36B5
1E8794AB1638486F284AB47779D41C0D9C8EAAEC0C6F5C3AF689C41B22D67199
525079137F9CB0452D11A32E72AAADBD73FBA629FCD7EC1197BBE9B20D184C39
D13BD6931FC3DF8A24D9465EE309A4FC43F2DA98D72AC2775C082E6D9E46AEE5
4FED32C7BB02B2C4AEFB4BDB949679DE6E5A7BC414DA1F0FF286B10BCB0A259A
4F5BC8F3C3423337C91D3C596256D3B77CE71706EFB1065A1A1733E7873980D1
F06365749BFA92199C21B9771F3CAD0F7CDD92CEADEF955822A7C4C248DB8E44
AB833BF80095E78AA88605E514869FA93FF7BE116DE504D78289FBF138F61B79
15DEC54DED76D987113922C8DE9BC8C35033F586134D7C3EC32C38B781D43F89
17F947B0A64211AD55375D110B004B587C95E917B242E286BCD7CA4F53987783
121D93CE4123305C8EE37782A2A73C049C965A9D2C662F32107E514C4833D32F
246CFD63B8C70534FACB6090D46CBEAF018FC90F18D630972C0072D8A2DC3C6E
62AA57034D038B0DD7EBD3F830205CED45DC588AA5B576222CF47322C1BD9579
CF681C7404E8E3987BEE6AAC7F4834295F9478F469807E4E18DE3E4CCB138327
49431F9D0704D1678C08C3804A8AC7ED55A2F5291623771984AA7A4DD4D378AB
516B3B3A36EF6498E71A6133A3BC8AF5013AAF8A1131A89D71EBB271370522F9
EAF2F611CC2C68615072ABA6A3673AD54ADA38E5C998F452464C5BD5A0B457D6
01BC272FE9C0172CB4F7EE279BF63D2B723AC13278D8E47F58D1DF5357219846
A9FDA6B0A083714E9F9DBBC363606CEB7249D4E0B63590AA89FF7C8A0A9076D7
87501807A069DFD278F0F9AEB79C3DC3932805AE28C5C7B349D36962AA688ABE
75FB77562591F930ADDB0D9317A59F1D6EB6FA1FCD93BF33637D55C62AAD3251
B0F72B4AF072B1C854633AADDFD6A8BE45D8B733E0827EA4704172E25EC11D16
2344AA4C9333092907F1F1AEC786E8D56ED249329FDFD5DC5F74A1B80083843E
C70FBC701F30AD36B1C8D289A7FBC39713C753EAE83682D9C98AA854D46681C3
4CAD39BCD72F46499EF9F8371BDFB2655E08AA3324C281E58F5A998F82A362D5
1868FD5825ECD5CC2F91AA8EF68B712BAD71E67D4E3A50F739EED8EA97F9A9EE
1C83EC579EDDAC5B8B41D874482209606A9480B81E41D83D7B4BF52DDF45E0C3
6D6F701B675CDDFD903B5ACDD1E028D59B7DEA1A61A20EF029C9D75418399164
7C33006E8BDF5F54624C420B8DAC17EFA6300FEF9BC803998E0DC89B6CB4A0B7
99EEDBCD9C5BC370E127AE35DD0A922D6028FEE6087ABAA3F42D2065F2885BA0
91220FB2673A7DEC417AF60B474D46BCEBB164B4E34E35F83B76A75AFE809501
62233BF13C6C2151D04F6A0A6637A5D2FAFA0AA26D00F2DF3F4C65D864500EF8
D75B3C014AD4C5CAF283B512C1FCFD31110C01D4B0D27CD2861DDE62C93A2501
E4F49ED7AD083E585F80478271D14E1BB8B0E7B618395866709B12FC4E71DE05
86652E9C4415E718C1D666524E115D7DC18D567A23432622B509DF5F11DCF0C4
DE566CB44C0A083BBC81D02914767388CDF4FC593F166F3DFCB87D9E8E2DC6FD
E206F2CDFCD773780AF3AA581898F5C7E375242BADADE9FFBFE920B92455EECB
60FB8A2279564810326368D924E19FD3A0257710EC2F93B14D16309C0E7396E0
6B51023701B60F0FE819E1A2FDB59572E7AB097FAED669306A5EF5816FCE2350
2A2E0D0A87C9509AB9248F110055E2FED9285018E0B998F7A313FDEB007D2D0D
ADEC7A054D5355B8CEFE0203579DCC93DAA280CE2024DB090067D74BF9A791D1
D628EA034CCFE3DE2C562FB77493ACF6C673C64E8FB74C0EB65FE6DF523F916D
463B9193746F853AB0948B1CEC8C2A2796B66BDD5F68013AFD55112F38A85E40
BFE81CA9DD039832E975BB00DB92332F15BA907775F91C638DC19BCFDB348B3A
260C9376ED14A55458541DCB39A35446B91F3E7DBB85E29C516D651905675913
3E8DB1F34D443CD6EB6566F2FBA874F93FF5A011F8763BB9CBD95F62A38AFE94
B54C381A2CA65261F3B8D3650FB7C0C33ABD307E4D6BA3BFD058C8D660FD4CD8
C55C0B4E00BA2AF2EDCD837E0D3BD6927BD1637CE4FE49D5CBA4432D41E2DD47
0D2AFB6BFB3CFBA87C921B8413F94368BC1D4ED12E9AD0A0F3D24DB9F28F6733
D8CACF8707DA4DECD04691FC4470DD7CD3BF6D2BA8F10811F1120C50B19492FF
63016A8FE7C46CC1F4F78A8F9295BA1215E8BBEB6E54B0BB80B48FF40B906C1C
F0DF59DF8DD56A37500F8C6007A2DF644D09CE00E477E2E169CD94F39B32F23C
C3FB955ACBE16C93F1397854D3FA3230FE2908BE1C0CED490C77032B1F411AC5
2F60AAC670A41986A227175323CFB6ED6BFC086ED399982A85CD52DD16139D1F
E6EBF8B61489EC56F775BD59111B005BE37B1F2AE926088260A4F83168B490CF
A0B2C2F15E4B8E59C0291524B9A98100C11760BA8B0EAE8CA15BB149A545F1A6
BCE34BA9ECE8ABA206829CF9B004EC6DA653B60A21A01AF9A2CE74F56A4DCDD9
48A8DC058BAB0133EC73D2FEFF4FD89C497C2B4D3D5E189ECAC25621668CF877
E03424C66CC05B7014569A85DA93889BDF98870E7E74FFBCAADD9DABDFBB3111
A60CDB57ED48EC3E598895FF8410C57A0EC68D856E59F2AD59F01EAB7FEDAD77
B73C583807879C64E9B57F545426CC8AE2820B15630E8450EB2368AB127EE48E
E2AE2CC22AB3BF5D9A8DE0D93831FC5B0559F9AF2B635372353D5F299E6EA011
D43C3C43AC6A423461AA791AF0ED4939ACFDBA4F4E750E9AC73A8735F986E8D2
B60E78D53408F7E99811D9C51C35133AF99B6BCAD9843EB5E34037F0EB4BBCB8
78A0BF7CA030FF97928DB7837273F25615703602A6CC028B5394BDEE374CA869
D1A6E53D6E9663EF08BA70E2C3FB9D1A9003BB6DFB05E3C04894D26E8799F8D2
55CEC35070371D0391F67F74CE4D1E22894F18F1A9ECDB91553FCDCA9EBD58DF
8258222DC66B3FE3FE2E2042619E29B484557EBC4798126060A43BC41B4AA94D
66393080B50C34C00294C392E8210CEA683BA75F8D665A4E7DBA4B3BB5B83583
179D28F5018BDDDA6ACF878ADE6CAF889977E706CCA0BC60D9AF9D40B2EA088A
ADABA73D5E6A8029338696B5AF3CC8639C6EBF94FFE89A05822330FDCDF4620E
8518F1D37E586127D81C32B90AADC5D10D3F3A801F1DD47CFEF90006A9F54571
BF3BF198159D0529E1B9A15F044FFB186B8163FC7F0D8D86FB55E2020968A1FA
4BEE76C0FDED560CC7296F55FFAD5011FB2EF2A1DA01CE36A30A456E14427CB0
B349F5F1222924FEFDA0A37F34A4D02913A4913B945330077F34B0884FBDBFE5
AFC1978CAAA1169E91B40E0F37319E8845A1A95BF7D0E67CDCA975FF67BAF6C2
17C5D001FD9B14BFEE3FA9BC99DDCC41C2486B3F7C8FA460CEE9B362435700EB
7E47A6D1C76BB55BD18EACDFD66A21109CE3251ADA3A0373A5F1EDF7AB0B5D46
B1BA499B38B7719C058BFEB43580BDC8A2410FC1FAB8CE62505ED991336AC881
18DBD299D7733E1E009A8739E7666A5979F21ACA8315B4901C9A780945A851AC
E3EC266E0BA1EF6D9B216F215519F97B3BA2754BE843245C8E7291CE5F236590
4A2DEA755BAA4D5C5EFCDC153BE6E0829CE99FDDB06F82F5354B289C561234D6
EA42FFD9E37D59120D7014BCADCE17368F391CAD6C82CF05B67B9D35CB9ACDF9
6BC4657162221AAF389049E65EFCF069B3A7622EAE2E22B7F16D26598C1C47BB
73FFF53EDA965C7CA635F6FBA7D633B5A8128DAA7898F296E3899B4E8B2F10F5
8BF8FF3063F951C3690D1A187A8FE982D30C5463679C11DCCA55A815DFEB0459
269E265DD6FE3FC16A7669D0FDFE5FDAC8A816A1F2AAD533029B340A5D7AD0B0
2CA1A177A512D61D4A670ECCC1860CC4747592E387B9C1CE0D7D544B8EDCAF14
1736B88F83E9EFC8E906B858DCAA1E9CE0C08C0A7DF90B0B3A1C5349F21518B5
C99479BFDFDED5AB68600CA9B30638759A2332D4FB7A539CAF3183E0E9B9B019
FC5B83DD43534A85E3256C66859700633C7390546EC3732DA58B604BBC973FBF
60C9302F51D5ED4601F02B6D1CE943842A1B34585353D7780146F7E5EE29A123
CFD3251B1ECEC23901719ADB348BFCF693101E61F68AC186046779D94B377D6C
F77D3A80EC174F617D9CA1A1577F872F0844B810577104A011F345BFB33CF83E
B1B69470DD49A0308E64973BECB52AE86AC6C3E8C6096BD606029900A36279CE
FBAE8C8E1B820C29206A71CA7CFD9840853797B1290DB6416536966A9AB800F3
E0AA1001B1607ADF9C255505092F2C987843BEE81030D54F38CC3116C92E351D
A983DD1981567D958F52D8DEC6D1C99FEFCD188A2FDAADA28B2359AC27A0557A
CA73F588157CA2D896F7F465C73979F9FF3473C42CBBEE4985949E69DD1F1814
C27078CEC2AC3648AA28F9602D1442806662C50087646CDEB7F9E9537E4DABEF
7E6C41EED548759CD6D746C6ADA2D0FDBA758F2A0D0DB1D7504CBC61FCEB4F87
C94DBE4749D70D63E2DE691EBC01F370D53275C3F8669BCF309F69C38B48A148
A96EE0BBB6BBC9296D3DBEA8168394A1A9CA11897988D9F8604F37F05C034455
36281BF1AC2885AC4259054B7A93218E4C77AFDE9A12CFAD536B05DC27F5F6E5
AA98117C0E042A30BCD40997B51C56DF0A19E53975F078D1A55CD52F844A478C
91A51DE7F820144D862A868CF4C0636A0D82DDD94A073595BA8B2E0E213A57D3
23FAEE020D89D93683A91D2BF9EF05C8463B9CB952DD23D5494264223E1AC576
D4ACD2FE8DBF442F738700AA8EA3B21B8D3FBD757A2762B3696945817336AF02
494920FC0CC14289D513E771B4231B283FA93333E690E6C98864D57E2EC589EE
4C2065CFB0936074E7CDBE9185F42BC8217904C863F4260D8E7723FCBC969205
E7AA236736FB4753D25B996E642AB3899EDD8805F36C13E8C220D85051BA6735
116D144CACD27B7B45F701D677ADD216ED8823E9F295EE0994E15427C3842C4E
7A487BD995553CE54251B8B4DD8AA3DED771EF84548F75F13999500A0D864879
94A191DBD95763468C94E1C0D30CF7A60136BF9242350D63650EB8B4E6A293AC
00AED4949DA23FF580580A7D8D05695140B9416E9B3CCD7032ACB1FFB199F5B1
25BAF5E060DFF9DA226F4AEA5F28850752758215F6C895987D3BDA7EAC9382C0
F55A2792B1D79D651A442FBD3EA6B3B00339BDE23A8D9A96AAE14B4A62F995C8
10FFB10CAB6797313261E2F17203095678B5ABCE962EFB41AD2212738C90B8CB
F836A9DAA17BC24603E10ED1FBFEA8089726C9A6E5B92E89D7154D0D4C50761F
60DB74F202F30E2399BC65C55151E2A6E84957696577A4285B259D2EBA9EC115
422CD8844D01242B9E3FF86A9BD5BCB086C0ADA5BD64ADEF0FD45F45B2B49550
9F1ABFEEC40D1ACAB775EFBF04C75DB4DC1EA53915EFC1EF8FD83F98EFC338BA
5331946B16D8F44A10F93F68C46A892A5990554F456BCB071AB2B32F03041152
36C7389D64370D945DC7FAE456B1B36AFBDBEF1707C6B91C75A68C0DBA85D6CF
DE4A7EFA2ED9B2615DDA1B81736D0F303F5828A3E6B313017FB207EC5640D7E8
00A1C9861C1D6634892F62E79B15D4824D14FE2621663D29AFD2A018AE1FCD47
B248806F3DE84AD301D170152726FF2C8FD363ABA1656B74CF728B74CAF3261F
80C93C7D8503CB28A7E2C9193B9E253E119A4677018FD78FDDD087622E50E2B4
7B409D67C53A6E15B400D0E40326CD59CB8F078ABC63D808629133D224D0A553
09311114A541BF84E2A22CEDD891682BCCB98813D908CDAAB63E62E2E5F76C31
A675A764411ADD4C2B67DB2CCA6A9AE3D180ABF06CC27216DDF45C420DBE50F4
B9B2255E1C7EB59EE3E1007913B40261D5094B0F84B8E448C26368C81E004D85
695381A989673D98E0063E837432BEA0A92EF3C862B51BCCA80BC045E420F335
B0E4325F3F8D8DEB3E81EE49E3010E44645F7F7BF8F7CEC735E15A1ED36B9F8F
4AB7C93AECBCB6CE460C780D10311DB5E31CBA5B461B6AA8DA03B378A69F179D
8F2A1B2289527CAD1187AA73E5DD7BFCBCF9E72F056FFBE4332A2313676D7B20
24C2DA12050A295293B91CC9BD3837F95C6F9191E2A6D7867F88927A7272A96F
11A7B87C117C49A652B6014FC171DE0AFDB1F6DFF59F1C9F1BE0DD9303D12ACB
736F8FA9679B4FC717EFB5135170DBD1240D61C820B68565D21BD3851056EE24
3429E9FBD51CF6DBFA73319E036E6670C0AABC83CE30DF241DADA8B26EB5AEFE
823392FD38B7456F35549E6CD5AEF6DA980B782396C1935B359BB7937F666F0E
CB79E112744EE1640AEC267082EC29487ADFD70950C28E627384CA1ADCD31CF5
AC9A5A067B247C0747F7A42847EE25A756220098EAFB363255BEF7B4A062DE5A
B394BE8A4CC2A7907341DB0548490A74F624785F4096A90C6013EF6240AAB620
5718C7B3D98DDF034D04C69552674E037D941256A6DC2F9582698EA493F3103A
86D29E322C7D94077E7EB13316D1380EF02E0BFC4686D5017C966D2ACD039589
5651901EF4A5867476865D8B1F69867EC406DD377C46F9AC79647BAE775AAAFA
F5CE3ACF9E04DFEEEDD29D3094E8F4EE5C04A508DB3AB46D1F77A724DBA6E849
3F550A5D2E4DF33D146FCF2C903401EE9BB37EC76D40EAE82A597890CD8748F1
E1393CED28C6165177D5961BD7A7463377FA47FB8BFD63E4C4A016D8A0D3F8B3
6A61FB5D4DDCA48E7A54E2CA82689BFB0EE02E4797C3FC5F93702419975F5565
E42037ED68BAECB70F26888479D9D53CF0F48941974FBC4CB733002E58762FD5
3A4CD371F22A21A08F20C833E0035AF629C49917AD6D72335202F5139247390E
0C203BF42F31ABF3DC16B5FFE587918D436F1D50BAF33B8A371B803659A794BC
74A5B36FD2228C6C9849E62FF0F6CAC6BBA25B7CB7312D48083377E85A4480A4
59B04A32BCF08BEB4FCCD1230A350D11FDC4763DEE8C0C02D0F0D865DCE6498D
23FB336F73CC90453E486FD0F9AF29731CB8F8EB582ADEF499FD710C3156E23F
0047DA5D4E70E776AB3C51E75073C9BC776B76215C051EC3EC72E241D415ACF5
D8CA3616DAD64D64AC92AD07527F2E2B7D687A3814AA8FB740CEEC5E05797F9A
0A8C131B125A1CE29D5C4E39F252FF2455EB37F8D1E892C19D6E00C584D40AD7
FF2A200BD91A5E896FAA744372539C948C42B3D8C93F8B9337756AAE67093EC5
DF6D076538200D3098F77829E1203104AC6138C9C7BAD91E9A983AB0BD2C5DF3
68D24E66FF9E2B0D98931BE0E2892EEBBA5E8E6CDA044077510E06501680FB3C
6545373FFF23A05B4AA79782281E28D23CAE5AF9B2728F2A75E471918453D902
042B31BB58BF6F4C6D3192E6BD82413808AD246FA8BB1F6FE9DE4B2B95938B53
9A95003EA65591608FEBAA75DD757B296A6B2F82D14C48F9964F6D9DEAA4A9D4
8AB5AB6AC0EE27E3ADDE2DFD11BDE340CEF68B03F6E5F7EF1C93956E345D4F17
C9B7D273B52B1180A033AC753797EC1EE5C3BF43255A4C5532DC6417545FD976
8D1C41D842342FB0F5586141EEC0ECB59BF0D65418FFD780424A57CF04166EDA
7C13A301A73983A1FA0388529F3D53920109C8CA671CDB993457381C797605DF
767C43280CA4B6CB4BE10DA9A484E63E28F357A7A3E09F7B7D667D7A5C3A5235
2C98063641AC47A3C13564979D8A9A6DAA41BA2CF27B3BBF59D4ADB473066537
A95BF923A396DBAFED454A5D756151A9AF6E5365E9BB1E506D3F2CFB440671ED
D136C804DFFE7C98996AC087C5D224B043C9FCB458FBBCE159BA409927D9D317
D3E8FF0224FB6D189B712ADA7D3BFA0869F73C56F85EEB81F349BAEAC1DDF4AF
DEA7C6ED1EE91CB72B374993B1BB1A068672B48C08A9C9ADB50DA6768CCA39EE
24B03D37AEA6F739B021496923B5D50231B40B17EEDF3B538F54A04EBD89762E
5730EF929A5990F592B5F5754D4AC20EB5F85F04F6DEFDE6D92CB50B1FA21C47
88B5418BB1D41EB80AC7DA53449399CB2074DA37D1D6810F8BB363F80796595B
9D4950D2B9A73BE10E61C89003023B46CBDAC31002A7B898404D825A5B026F32
42EE2929247D4C6BEB409B5ADAF7B677B33A145F3C8218D615CCC81FCD9CA396
80F000E580A9CD85FD68A9B07CCBC2F0A8CC5C9126D102272327D654776DC9D2
ABC9BB239C915E2BA4CE13331992D2351A8C88E22439DDC2CDC2FFE8FA57CBCC
C10D0707CE1792E4F4CA9B16E22EA4D88EBE5DE6F18667C78BB37FBD4D8CBE41
E525494020B2051B82ECE1AB32244F6BC9B4F99E328356DCE18E92D1093E718D
4D38FFADD5139BEB97BF3527825A961F5A202C70FFA213BDFB9D16A6A0A7889E
CB4C0BF25167455BB96C246652109A47F9BE13BA4FDE256EF9A889A5DBF1905B
763066812AB89F608F545F4E75E25271F5279B5AFF41825B7C4E6D66F5EA56A3
3CB9AA7B2773E5BF9CC30DD4E1E7BC43AB846157467C934BF5A1EF15684D6190
62845C505226DD0D33EC3F91240FE0271C2B7A180EB6BDAD8173536E18AE4B09
4EDC087871788A88F35C64625DEF7F74CCE5498376AF17172D639A7F4A224E75
14DD2B6903D7B1A0D5D0C340232B8CB906E50D768E46170827AD25872EEFCF59
AC8F1DA74A0E5D81BD087BA2F25A4C8355570E1020DBEC09EE26A189D0118CE4
2F2CC998419A27D0BED4FB60D944CCDC3C18944C9750B68BDBC153D54424C2B4
25E20F2DEDA32CCF40DE4C520FE8F9398B7D57B661A3DC8B1C5960619DCCA33A
D5DB68933A19228BAD16CC700D29AFD4089CCEAB2D8C8C89FE92C41AB32078EB
9917FFFCC7784DCA5E37BBDA5A5018F3C58DB006DA47B1A42EFDD38AB3C7ED59
5E1D20ABA80AB86B85C3E77737854C32F088BEB7A166A69E5BF9FC510530CF0E
FF96AB9D5E9F06645942AA40BD00DADADEEA7FD0AFA8A9E6D0F99919C336EF3E
D4E814B2BF80E1BBE141E58BB0089B5912BBB7FA3EBDDF44FAEFBE76EED121F4
F72E6DD3CFEC4D2764305BC48215D9A5B46E83F118EA892C619DFCC51AC4504E
181681B9F0D6C9B4C464240A99C5CAB8A27EAE74433C617E0C9ECD1D5C77617D
57336601CE3A849170F1DD768868F7E4421B81B4031594E65EB186C6B32280D0
7BC1A8E3EE9CA8F6B5474AA445DF023E481FAF11B4AD34D4837709F9E7F990D9
682D33A87CF52977776D8D9FC04D284D6597718FC00516C0370DE608F6EAEFF6
1B61590108E4E7E64A578E25EA044EE6A35F724EFFE93E2AA91ABD6FCF9FBB28
67013362EDA11C72C561DE2362FBB41CA830F4472841F8649FD5AA2A955A963B
FF2254CC1A630939312F29963CFE47ED057B3FA1FCC0EA950DD2CF146D47A8BA
D675497B646B2FD43A986527AC632760EF8B08882B996686035D93B04FCC3428
08676C64BE63C0D95B9C18963FFD2E00357446C2F40BD7C1518E4D1181583282
17B80E4ADA7CE17855ECFDDC8E7AEFA97B2CE52C514A693DA0E867B0B0AE194E
18F5E46AB1A67A6AA5949BA2666ABA1B1149FD8B5724FA99EF5719C7162F3585
8109001E5C5D9145C2B1CC0E515A8F461A0AAE27784B58B44836AD6AA582564D
7EA23245FE9856908F5205F5DBF22949E56626F1DEEDFBAA33A5F6AB611C3A19
F3ED480F287D961B2ABF06EE3256F549DEDD3454122A72D05229B7DAB0B4BCC5
9691558AB625F1DFC84EDA54BC91CA8B2BB7F68D7AE1D12264A138D8CA878E6C
68C499A7269349E5663DE8B27BC38BEBD5055D370EBE3BFF936D782D89E0505B
E816BDCF65E2B0FA5C11D86B51E6510C02CA24842123400D599F8D31790B3CBF
E30F92E5B11D2B6FF807152DCFF7F4E0EE46D121A68296EB160CCE35AE006EB1
D2E913BD34DD9930188ACC0CDB58B79A0640F23D0E576B4850909DEA2AA0F761
619A20CEECA122B7515C63116BC8F9DC1221CE80FE791427F43FCEE01013F5DF
7D2297DC75D9C222DF6457BAAF5E01BEB14C2F40B53C552BA2018DDF2B45E8E7
B575D7A4AB87A670C4D5DA8E3FA5ECEDD45EF1DE425B4A69FB3C2C6828B8AB3F
E20CAEE31E0337836E0A53F5F52ED2FDFF2A0DB44E61EFFF4CCEC0C30DB3FAB6
DC727602554E9CA8BA7F733E01AE1FDD88037355B096181961AE0BAD5D14402E
43234D36852D767AC5363E1A1D1DBE0BAB1830AB4CBFFB25D70754E801EE4FD7
1B89D8611366187E0878B02F17856C28C0F5A55AB6613BAD93A921512F09AA08
3F66F59FE4BEE31BB2322609EDF49D47DF47BC9C450320D1DCBEF611387E9972
2BD41CBF8AFA0323ED78DBCCC8777CA49261145A76CD888E25848E7B0E2AC6A2
4E49F2B052A477F7288F8B3061867CB4089D1E11774A97B0398A6A77EC3733F5
64E8E96F54EF04D3B8BC343BFA7D854121D47E9A0838C38BD473A80C6A63F0BB
83A635F34631ECB1FD26BB5AC3A5E06233D1B2D30B763ED8B16DB42E88D6A6D8
2D78E364A932F5024D75357B26C659E01C762342919A9C3D637C62A71CE2EDB2
63D86B37310BFF8B41832791DD4FAF211FA0AFA11E4465B2F5D84EF4A459EAE8
E018FC58B898445D2F0A41721520A669B2AB64BC8F736FD6607728DAF96A0219
54117F37865B4BF2CC7C8C9171F924D2A9C46C7617A578295FFA18949B612DDC
922A0EABDB42F68B7A6B09C0DE72111C5086EEB80AEC23FAC64851655B3199B5
8F18AFCD034411D714E91E101803713C351367C95D35CE5E4F92673A26DE89E3
4903996BFB99FB6FBE084ED56A9C68519363802BD590293964394622A300D3FE
227702D44EEDE53779F08FD2A7F3BD6A106ED14AD488117DBA4EE14D2F00BFE0
4D9D350B9B5CB788D68E7305D429E8806695538E539F94FF9DDF2FBE04339D51
DBF0AE89A23DCDA0540B6BE89142EA8809B998C9CF9DBD7F1FF6F7AA74A295EA
DDDE789996990DC1790BABF899C5A26158DF17E657E100A93CCC3723A4C0C9C4
53290411253A3F8F9EC4E1899CEB9E4438201B8936AD0E90A3DEC375C42ADA40
99B14C56E2F0D21AAC23450616CBA6E3077561BB36D94B329992CF6C4FB2E46A
8F948761CC465361396FAD3CEFBAE941CCECC080F4C60C6A8AEAF0ED4361BF4B
25171DD28733898CDF09CA7E8F62B96D668525655D2D1DCFE15AB16959074CAE
F76FEA1CACD17CA9DC256D7F30FDAA23DFAE5BB69390297A394DF7877F983DCC
EBE3FFA2D9B440CF6D304AEDBA0CA1588E9D973242549BE3795E51A4359E7270
7402D59EF9E6538E1B71663EA4DEFC5F3B646C704130194828F558BB6EF83763
87441BE449E211D25A3472CC7774199FA29F9AC763B2F813D924295EEB2E25BD
E7ECE43FAD8CA8E0EF863F90280AAE0AE17EDF3EA5DA2BA6EBAC29A6DC3BA269
32C3CE8653C507DD9D717D16E48434174FF6219B86E5CAB49523F97CA940B3F8
66
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM2488
%!FontType1-1.0: SFRM2488 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm2488, tcrm2488, larm2488, lbrm2488, lcrm2488, rxrm2488.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM2488 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-167 -317 1298 954}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA30E93C1988EC251E6375C056C02BED93AA6ED91
DDB0036B6EA7D6B65A850F49CFD019F0045B4490E4C9AB9E6B61F92130B23625
2737AE3F50D2BE0C186B5054358E7E4E27EF7B7A40871D4E9327D0162A46472C
F05AAFD1ECAC84AF699165315738BD21E80013D5D128F0CE9B2D73AAE50E5110
E024C65DE5DFE64AEDEC8C50D7838B946B2B17A63189FC54941C9AD7633DE8A9
17DE0C922D516FABB8427312DA9F3F458274593C738E74E58E9A5BD96A10717E
AF7DB15ABC4244B5B8DCE13B01BB1FD392D7D7F067B1B5093870CEE2D271E96A
7D5DF1DF79B54854CA86CC4FE8859D1A612C2C9EF9925E5DA01943A1A57C7EBA
A1B8AE44B0348C900FAE2DD85082DF717E136FBF97B9E37F127826019C526BFA
6694013560F71D66767AFD383143AA0466104ECC9734992B9C21E9CC24DA0A0A
1223A7C74AF4A7BE587906B0618128A1CB6A47E4236229C71BAFF9061D20AFC7
CF537D4ECF5ECC83876AE9FF337F37DE025293F62AE18D88F609E2CE084EDB2B
17617007033A1A01771E6B6FF559DFDE4055D4DD61AA9970C916A9C67C1C896E
80A25047332D4C00F043385A0398AC953B9A9FDCF35EF3626D6A05F5E7C24BF3
554657EFE4D9B5F0F79743A714C528B64D54738FCD7E1FAC5FEDEBB96E66B91F
4F8CDE33B12C8CB77FD81A17755E2C3953062BA9888D3D04D08D5BDA3E3E01FF
A244491E3E4FFADA1579A8F7FDCE2B91A1022DBB679E32EA3DAC7D62D0926F7E
F8F31B3A12FB0B1E70D90BF6349D76D0057B6ED9ACC625BAD1C1C0DFF18FE2F5
30BDBD705FF2D23C1A58E472B553AD3D71F60EB402433D557A5639CBD91D4BC8
9357D38B9856F8419D057A413F7173EB2B0BD779F6F506AEC2009D38F97FA574
21A7482CE195E6475585DDACF70D7DF08890CCB66011C6813D4C564B381B470F
8ED3A187D2B618D4BF91169AD52A9AD5759B2D4B47FE5D96855512B0C468D667
65154C7E49EEF89C24404A9FB33E6D1F0BEBECE4294E49F4B9985D129B28EF11
8406138237886822F964EFFDA61220D9F1B8FDA4BFB0080737096E5A07D8049D
5A17102D7DB84C8245915F7242E54D4C579AAF814C1F93701CE87E6DA99688C1
45C4E10F2E7E9DF8620A4BDEE92FCEA136F517DB61E1D3039E588B12228B2971
C2FF6C210347ACAFBB9350C8ACF184707307CD76A60E8F85B83963C96DC3E56F
D29A98AE4EAACA821ACAA26818E92EFC5EBEA9C27006073134EA0620E1B64352
30D8FD3DD7A12E6590BF9DEB25654D7609EDF4C2991AA96DDF4F2CD0C85328B1
897FDD1C66A459E4322B655D19793B5C1DE396B43AA070D345E5916F705A0245
3314FB5E0E108D1A9FEA481C95E1982454888FE6A8F9B9C27FEE829EB2CBDCEF
C63C3590D52F450A808D2515E4FF0D00EFA7A3A8F37EF0877321C97DF1C78933
0F4986E648F9DC82107AB891157F74B14FF20415743D0DF6AD466476E4B4CAD2
EB0A6AFB8BB5FB7D35D75C247CB503BD14EF147F95578DC185918851F45A7F35
BB6AA673F84DB78BEB14FACF48B739DF9B3C9210EACBB0636880DC989346D9FB
2B7B442D8C057782853D263D86C20D062B180E105D60D7228F1E7999B350C1A9
12D379D9E37C8646D08681CE958A30C3362CDB0011775929B1296ED5DD1F0D91
866052BFDF3E7C73B00A43814BA6245DDC964419A8B9C3288D925D141F137547
8DBB41624E57F1F0D63E05E02FB5314AADB5D49A16531C0CB5BAD252A1D27034
0B2DA6E3FA3B012398F4F3E15ABA26CD8CAA224C0C7881088CC7E52DCCC85667
3F261B5076C4E761934A7FE175C64DE59E00E9253C9B160D225AB076A943D9AA
DB427BD76D04978EF48C083BB6ECEAB97DAB9A15A4BD6C8EC20E0CDD9EA1DFB6
038D0570259653C198D12DD90A79428D243AE6CAAC763D25AEFB1B9D048A7C29
55ABE3EB11A8503601BD8E781CC04E9131695F18870D52D97A6287BFCC3BE776
D8D3BA011EB3FBCC801CF053C768D6B239281D78FF32AB9F4CC828D90A79428D
243AE6CAAC763D25AEFB10FEFB9BA1F5DEF9B438A84377451081C798CACC15DA
6F5A9C5E0ADD9E18FD2DF96041484533527A21300B53164C8FE05B53B2F30BE2
45C026323F15A881F6A501D48C51E8B11DFF2D2A7E40E89F929B2508B78B19D9
1669C52BD49B98E5E0C77767C6505B6615C2BE4D72F5A1036CF6A963737143F5
405EEDD342E381191CDC0A3F4AAD95EEC9960A7E478CF8B5ABDECFDBDA7C56D7
4B72CB30302BE125B3A7FF4A548B13BBBAC6AD4AD2D09E2E879A34AE473AC768
5BB1B0B552EDC1574511A78FD505E6CB052BFF9D02D44A4D0FE57EEF2870E0A7
97E0EFBF9FCF5EE9118C53A7C56FAEF893615C445981CE891695920917664559
BD8C8B15B6976244C7CCA4AC8DCAB1EBB79CE97EFA309FE843546003A2E67AB3
AC7EB56BE27C75A4F7ACEBF0C8E659D4C6BDA43FCFA99B78B36E5FA1B84B0BEA
DB59314AE0FD96B02C5EA9F64CC5D1243B062CCDDB6668C042680EE16BC22104
C54ACBE6E9B4DE54F948F0DC2E13D4718D04ED95272189C8542C3963B62C01A3
039E9969CC05BE8B1F7EC48203436172B02F088194ADEB5693DB67B83AB959FE
7755796CD5F768199C9A4665ACC1CB1BF1F338818257C997D3F5E34AE3763445
066B2139F4BC67BB2FC212843BD6AA41C540B6BB474B27F2BC85C2E56045DF95
ADEED8929F696D46E88C38526EE17B457E088ACB6FA1B9361796058B3B00CE08
27A24B996F9468C68C3530F2C4E85A19F3FF0B01F655BD70C4FB37F1E938735A
7367DAE1B68D4D451434FFC6B9AC8F7C23EABBFD7F11D0BAB44E9EFDF217856B
33E3B857A5E3C7EB48C3E3EF115A9737F881DDFE35333915189E7D53064D95AD
D723779B378D971DB3674E70CA471EFFD67140F16A3D8BB956E878DE9ED27B55
59BA7FE2053717190D5F7ABC5C96AB9053D145E742B502DCD461BC8FD05C2499
56C2DD51FE259A0B9B7A24728D973C1B060BF404064AE1376A1D98FDF0CFA2BD
F3A5BE51B3A7AAB6790BDE37884CE1332894BBFED0BA285EFD55ED657EC6522B
C8F05A829DB662C7075CC7EFD89E2FF2E245E7F8C8B97DF068AD5938C6733F54
3E65090D06AA74CAC58FFDE3FACBF5FA6F6EE86919E2F5527D6479F729F339AD
B6AF7A76D895F3164E2A29F9D70E24BB92A02791092F9389C435100BC08AD910
7A52491A2BE386A518E8357808ED1E994A811AA1CDA45F9AE7BD71BA5EFFA49C
E6B4772AF49A36803CBF556FA7685C611E872A6786660248DE308FC0E5F4F0D9
6C3BA6B321EA3A1501F4414FC36F98300299474BF86001CA4EA354E74DBBE94C
AC3E85EC4D34A51C2773E8FBF697768310F537D3C97F9A789F426CFE6FC00293
33F29AF1F153C74BD1A6F63A62CB64A601F235C4403CA8FE03A6BBAA3941B105
6B6A3EFA631A9F435B1BBA1ECF0CA7631FD8CCF17D84AB3A47A27C03A447F056
903EDC711D05B6EACF042F2C7D5632494F1C9DFC6926013E4242132F726B5B8D
45B057885F1AC3D9191E1FA065D5BF32476CC1621229B40BCD461337F526432F
0371A642EC3163927CABF282C1555CB2A18812F4EBB052A895B0064C2A1CF853
00E4F50E5CC70FAD3A21917D15D5D8300C9C44EC4393D41EB64C32426D3A136E
CD53676FF99E33AA78274219A3D52FDFD91DFCBF34AE2B430F5E544640681AEA
50C4A0AD04C09EBC603E3AED6E33EE942AB48C7C40B5A179CBBC900DEB535A10
B6E3F94560AB17D063355BF7744BC7EE568D8F67BD92077C22E118071122AB09
22C46F888133B9561713901596A2D7FCAFCCCC572024A39A6F3347680FAD8B57
8F03A96456E1317D40184193D0526C198FC570C89C3E209513EB5590975471DE
4D4BE914E42C9E9B2D3468A2CB7DE0FA7519FD2D2A2C3BF7A07119C4684B9FA2
228DB4BB793D0C125B8F75C7A35DF87754C6F2A5E26F7440CAB36919BF4F76A4
1266FAA3815C1C88DE2BB999F2ED82DE1A7642E98F9246DEFDE0F026FC3AD241
22E99D9CDD7E39590DC25FA98B2F04D5EEC53672D2BE1EF5B375FC98C21C8B2A
F15BD8345092F1464841D5408BDDB68BEA3DAF62F1BF8B03B7DC0DC3D0E9E5FC
8771BCF90A5A4FB1A9EA652C7AF13C690ACA2DC5C6E662648CA69430BC27D408
E890D1582BF4DF6B0F7DF64C81DA33E9A68B9B83487182FAA5362BAAB8F50D5E
AA8BFE9F953BF0CEBC721D46570B72CBBF7E0FBE8CCB736432435CF57A3C63B8
A7569637850D2AE40CB7B08A59FBBA2855AA62E260D893C887B93C492852AC88
D4C024EB3974C265886288F9607D0222781CC2B1DD0010CE19B162C80F20299C
8868810D4EB71D637BC0CD4D67F30AEBA3BD228B40DE4290FC54BB19612A4A84
B7E25CCADA1A36006BBBE17AE78CC6B09027994F1B1100CA7BAA107AF158F4FF
FE21FA829A4AACD811B9B1D1BC2B47072E06B876DB0A857EDF6DB3276A13CBC0
EB3EA8A65791E20C3E432BF9DC545FC28B0036DA1FEBDB854D0657819F4A6D57
99A8B95EC4996BB2023F1AD70463FBD948427FF67A99A3DD4418B525F880402E
FBD562D284EC15111D96E42B31EC11A55E4A435B9961702BD2D5F1361B844EF9
401189ACD8EDEAAB2304CBEC1DA09C5FFF0B69D2E8BA2A1A277FBC1893AD56DB
F50AD7278A318F9B499C2E69F047FD5517E81D93AE4D505EBA49C65E9478E179
7FE890AF1CBD9B5562B9D58A0E0D39CEEA91B56881402F07562905FC6C333613
C577E2A78C0FF15F79699BDA980751371CB9A8B115895F4DA2BDAA4EBD37CD22
B615917727B4D51249CE322EFC48770BC89E437ECFB3C2F2DC09A4C48C7DCAB3
F587B1E0D5993DBF217522B96396E29C438B0D8B2CB8D5632127947A331F84DE
922D69EC14860AB4944345AC8006EEA335B5BDE0761F066AC7A926C8F5F6E8DE
BA45DD56BF0F679DC741CC101F5C3ABBA220217A2575A68A091FA7201555A7E3
8AEA50796A9EC5116E73D213A0FD4C65D149051CF351563BA7541FA97A821C76
99772E4E916430F66DB12B120281921659DFCB21EC683B555404A9C2656B3F87
A0CE1D458591A88B2F51912CBD30B54AD5032BA85036B11511FC5462BDA397F3
C06A8FF7B6AE3FF4E0C9A5C6D19713E325B7D86A13546DE80B35AC82623BE653
DBBB7205AA2A41A3CE4A3F375E7C54B0656DC04F627B81B030978DCF7D8EA7CA
E29034799559BC14EE930B1A098F840FEEE692B63F315B164059B5AC00AA7477
BE97236D098ADBB2943BA437DCC64F9446C352E18FA9F62773253A3A3DC90A5D
78E6B1E83464EF6A03E779B3C6F646B3AE4A670E49BF06BF126C35FB523B345E
C97AB5684F30F882209BD8885470998982BC0C57E6CAD015435CF2816DFB0214
A4CA30227E5F97C186BC684FA0EA1C7F0EA5B2946E5680042687525612C96715
10D8B358A40B2812488CB874792D1F52A58D657DEA997E133DC99E715CD93423
3CD5EAE31ADA442C7A59557D4B3F2B070CD56EBBA9069CA461461225889B1AA7
6FD8A0B8A48679EC698FF9E0E60669EE52D70775F39CF127B912A2419CB006A9
CE4FCAF37C794882B7B6F74D1818954A199C0ADE240FC8C23A7E43AE8CD0ACCC
B3022CE0F768C4DB824DB15C6DB8ABB55A607AB36208CF6AE0C27D99495A4650
7A85252593FC5A8153006042E52532B2ACB83E695B7AB453B0825C3E050933B2
DE99DD2C1C520F38D2E38AE2AA30098526561478FEF5819E15349F2B2CD957E5
80E0DA3110FBDB822504FBF83524C303452FB6179D3A010B947641C8D173328A
42B4C22C4BEB23ED1044D9FF18D9C56F7C45265A68D76F7427FFBF98B1D34F6D
0BB46DE56E865E8E126676E940A0FAE9BF4FFAA1508421BAD346F80682171442
2ED8EC631FC0CF8B815EC475EC6B397EB89B0D6A68AA0F0890BE5FFA129DF3D5
25EE5CBCCD1366941BE42D72C1212613CD5411C738963B6BC1E0CEF9F4F6CC8C
2325B6BB13E6A3642DAE6B3AE9140BEC5869B141571D399F87F18F73A87CFE2F
881D6D072A4EFF710C929D197207ACF5190AB1AC7E57B9D7F9B92860C21F0C4F
EA515F629D4FF0EB13CDF12B47D4AFC53080C6ECEB048722002BC78D0DEDF161
FE27B6F1ED06354EAFAEB3933DF9B52C52AB892DB30156292EF110F8F1E34658
E3B7275F869ABF3B86DF77E230629F4316856A14231A2758308FDDA1505F2750
4B85F0F16989E85FCA226FD69562D1FF2E4D93870B6C5212F5E944F06580692D
FEF6A2400E9E98711CB71771E927D128121FCA54ACDCC2FD5D15F53B62EF1B16
C8B0BF09F67110BE442AA9CECE336727A1248B9B7A84E5AE76314344E385D990
605DE895D867B69CDE4C5F2E37A4744B11F43B89C8725C77FFE71EE90CF70EF4
A1C8A518CDEB0A13DCBFC51BF53728D93B3633F8EC051A49DBEC6534E8488B6A
F86FB86B66C93AC8F5CE97D30ED34574EEA2B17B4E4F63C8CCAA70BE4E425D7B
A7BCEA10E1E89E11CA3806B3B4F0F4236BEB835BD15DADC68AD45B098DCC97AA
ADC2E4C11086C53C99D01D631C2B635D6C038946922783985381D23E23902807
C3EE6FAB82895F7B7AAAC62CA96A231A686271199CCD59FA104A67065C87A7B9
A59853BE6E2D7570CAC22FC9E1BC3EAC0027AE67892C8CD4AA408453AA77234D
0D5100628B03A41590FA30DD9F5DF7A6E24FBAAF8908C02015AF0FF787451F29
8798EB391AD61FE849A61B3899D820834D909A8EAA2D1A72A61D56B4B5722E19
406BDFD90FACD7EC6004955165076E6C293A18AE2D6E8D59542E4FC55705278F
9C84E0487FFCB88AF600927CA4D7914A09C01F1531B77A62E0823D1B9F753B28
EAA745D46A96C3BF261A608B7FDD6FBE4C4CCC091E2B138C1B8256CE65253EAA
542CC2D5F3E9D7456DCB71A60908B2C8CA51964E43988F16660E0304FDA2F86A
D45761383E01E64C0BAB6507C98E750A7B3B97EFC948AB9342856431BEB73310
8E0182AF02E5493842F65804E5C72EE1C2C5756808AB326DD8B68F8E4AB1B2AB
6D4CE121AC3E3B33C3F21E07D8BDFF3720902A7E5644848A57346228A13C4468
12F68ED3EABCBEFFF494E59E191E1AAE01619C534A8F3333C88CE6F57049370F
1C066C3EA0554333695BE2B2B1896646D8768FB262A16D920EDEC827566772F4
5B10400C85A7CFF5E2D1F86434479279EE16055024AE2F08DFE935F3D3D1B7F2
63ACEC2D1DAE5873A213ECA46F35E1C78B8C76505DA133B00BD9B60260BCE1C9
238EB07CAAD7880C4E674BF56CF29D06E0FDEB52BB3F434ED748651F735A05BC
04A53483CF315234B0CDE922B97FE2599781A02B1F4DE65C5E4C0C82A2921943
FED17A1E3AB5F5AB0C696C05AE318405557FCFD51E5C3F4E0A5C047C991F9B80
3766200E577D4DED551FED5427798D32E7D6EAEC0EBD3EB6E69DEF0887886101
D9BBA6F29A954F8532CA0999738C04B7984F18C81BBE3FBF1A53CB338FE0A3A9
BC633DEBBC68F65BAE827500CCB8A98ED6AE61A9D47EE6E562C9B9CAE03A7B30
3B8CC58FEDDD21B5CCAFBD5CC97D8C7013535133136AB9611838F29421E75DAD
FFFF11C289499082AAFF04CD747F13BCF4EF58356AFA41B6D3D2F4BFA13BE391
E92EC655FA3AC8E8A4850B456C122BFC9B83873FBB555F33E1D0BF99B2A5E505
2433CCDCC16B5A21CD9BCB7BBDC577DD7245E5D0CD32FB4449162186CF3DAC25
198829F9D0B473306C87CD0B104E7F9187CE30ADCF7E712A8E2104BCB5CF72B3
75FEB43E9B33AC9E73577F5D0954E529BBBE22782929A466C6A3170F90D2855C
1D366F07CFF3950EE828851C7D4CE64A98091CF24DCF30AD3A4AE79D337A37F8
E112E69CCC64B6DBD117EA4C4AED039A19F39812EAFC0951F619BBCCF098E0D2
3DD2B7CAABF3EEE295D7D147B0AC82573EB25E948B15918F151C4A4E8B6B79FB
409E9CEE8179C7C682B4EB6C09A17BF57483FC257C9DCFEE98A7EFDA898E95F7
74F788A7ACA7EAC55EF75A8FBD72D56589991184AE9C84E839F3ECCC711BF06E
260679732C9A19A9755417185277A2D8E9B0FAFA718CFB6AF400D801D7286F63
37CEB228F0B38A009DAAEB38581CB95FE57D96AAF73F063FC81D1E40164ECE1C
14AB6EC776D9482C8710114F9EDEB92E92D51871AEBC24CFF24A4D6853198D6B
CEA458E8DE316D9271847DBCFD330E3D4103A6A38E9FDE9003CCB87E52C08DB5
69B44E4D9F3F26C231610AB9789528BDA46150284E4E709F6900589DDDD56D07
517190C239125D1FE8AF1E4E777C33B770761CC2B765BE1BB7E0A048A1AEA30F
04BCE30731F730BC90A2D4217212BEC21A7631B5225FD9F3BBC2355EC8662A69
49F31D575AD08E6A9F96A6DA49B60AEBB0164B2F1FFCC47F6BE71B86D35F2391
2234DA39EB964E5B76CCBD3C6DB93146EC76A522D02F9CBBA17507700C8E264F
5C4E3E11848CA391B99CFC312D3E34443C43EFD019FD29708DA7A3A1C0D2E74F
6694ADEFBD2DFF9487ADD598B347947BFB29E19B19B7B199684E465ABFC8D012
5D2BB343B87D745018E79C0C0713758614C9AF8DB7295EAB9A68638C0841AEA0
513EA986294F5E49591229F749AE1BAA7FFFAEDEE7979DF757694CB3AF44CC97
D1BED93A6A5CE6673DC971BE53972DC08AD45B098DCC97AAADC2E4C11086C40A
F33DA3444CF1C45ACDC1755E2513F950EFB3D328C386E13F0EEC37407D44468B
5FD5E9A853C63A0C68689D32C40726B991EDA866CEB310E69D2899610DCDC65A
E2ABDAFC32232035CF710DAB7C416541C9150BDDD447A57ED2DC3E24F275916D
A849100D4580C79926CEE95503A1AB31A8E2BB5C885F011A885FEF4DF34A4DF2
D672DABD6F0BE1D4F363259E6BC35920D0D3994637CDD191B304C992626F3284
7D6C49896D7407CDF8CDFA79C3A4D0E7F45181695BB10DC043CE7DD180EB0197
008F8A021346EF208122D9FC78BEF03FE5AC3A56DACBDAB35155314C971908BF
0293B8B5B3C8782521314697AC934DF26F300F6EDEAD2251D39A57B6212CD01A
FCA612770E188125BB5AC7A57F25C7D5D953CC2733446FD938100AB6A729F017
863E692EC81CEBBB9CDBECF865201B6D7E7E52D6347228647244F8EB2F8DEFD2
5B8993D5C73845878B61854E12F122EB2D5C89901D3352170FB896A21F6CC7A1
75FEABD82F41F29F80E00C0F4D344C554209CF14C6473B51E877E5F31ACDBD05
C06D1C6C4890B52D77052C2E97FCCC8AA385F5C6069BF44E93B26351DA95DA8D
E125319475804FAE77BABB014DFE87BF0CD087AE1A432799BF8E9A76AE02350D
910731AEB3C87B0D1E0AEA2D44D66AFB6C8EBD468D005281F055219BB6DF7D38
127A0B66273A5CE047CDB626A99C05252705C3547FD0B8F94F3315918D59AE62
A2B69E9968BBAE99EB263B967740EEA69367C2D304F15FA40BF4F7C38152DCF8
19821D5B6DA9D8A28A5B5D8CFB67D6DDEFE1C827A13CAC144B2BDD802F1E7C65
8158E0DEC971A1C6109116175618903695450CBDAEEE22BDC60E1E74F651F4A3
453C979E6C1FC167CEE0E23885631DA852BBA7DF384ED4B900A66B5FEA2F4505
11B5FE3EAE4CC31AC9E1561406DCD0990EDDEE2C8FE9D71B3665EC95FC462473
51AAB708081341910396B6DA0AB3B674DF8A9614E77056663C322D3D74150BC7
90BBA1A4304B1B63AD9A09E1A912215A7EF5719CC8F3379BA431021F43197297
F1792E47F312DCADE1D98BB4BBE19D2E9E2263EFFDE36CFE964A70EE9A92D01C
30EE9B0711D94D7EDB931969D35981CE62425DCDEB156189E6E543778DA3743A
9C2448D878FA41518DBFB8817CEBB114B3CC3C3D7150122533C24435D71ADBB8
0CF272D854EBFF8F25CD718151C53D223C3757AF74821939BBDA4324A41B8BE6
16FA2E4451CAF1379D3E78A7B2974C9781F3C167D881643DEE3894B23ED81A1B
1BE73D1C86900C4770B49CFC301D2A8F183D547C8BC94892D04D91D99C5928D8
B3FEDC85A3A05DEF4993BD47E82628C3CE693744841C1EFD6BD369F3E90CA2BA
EB1AD63991615A2DA990DC850849311E3CAA83C7DCCAEAA409FA98F009D32E9F
6C460C203D7DADC4AF3FF09150DE4CD0EF63194EA7DD041599710307D0ACFD0C
0558C0723195089CCCF80F6DDFA4ABDA4AE41B665A2F7C931826A17BE5941155
AEF9322AA0787B76732E80276DC643EF7C919C6829379849A19401260A74362A
8978EC2B095A47FD4DC55427E61B9B2FC7EE5CD5BC97D92B7EBE64399787217B
CEA2090EB14777FD7D5D73A6BFE1CAFB5E64A931D219A66E4A1F2215F531651A
4B1EF947484CB2059F95B149E8822A8782CDF9E308E1AA0876FD92D93156CBF3
050BC3209E5306F3211770CEAEE917D81274FB0BFF988E75204BD75A52503CBB
C097A9100D2131A39C8C354D5FE8946BE2BEC59D678580010956CEECCE954971
E0F80A500E410A707DC8ACB1B85D1B6ABF06A38B85FE3341FE43AAB962BDD281
F719A6F2B43C19E99524F74D34FD992B4E33E2413B40ED1694EF30B9C4A729B5
9CA1F4C216ECE1DEEF5C791A35385D9B2A8903B0D202AD890E700B9A05B05C82
26DDBACE1EBCF99F2CD70A2658568CF62A4C5007AF7F4880B539B756E125867F
C56B06567A5EBBCC3452D2556268C6C41017A49470EB22DFEE7C426725D35E38
FBFA44E182B16F18F1C956B353E459C0780CE7085DEB7FA3F153ED52956F940D
1E80025D82519CE0E9743E2CBCF5373EE0CB7DF1AD57F79DF6C0BE3095AF7FDC
46CE8BAA4409A2C36674BA5CF69CA9F95CD51A45812828D049E40E6020491F05
3B7F00B3CA0DEA3D668458029E3587339BB92D2C288CE47D443854A08A29E0FE
467BF0314AB8E1237B1B46CBCDDDACBB4AAE8999BF57C73A1DD085ABD666A95D
FA8E49F7F414B390A2FA2530BACC0C3CDBBF8970A5E3805C6F3FD53ECE9BB5B0
CE3DBC741322791121DCCF331200AE707B4C6502EB7D2D60864B5C8B0A49405F
0B4BAB81F628A0A6F10038021A7DB52159006C2A16CA0AB6399AA595CCE1B179
179B3548795CAD4181FF5D331801E39FD62565D733C02B4C6FB449EF06FFDE6C
D47A0F474EF6FC9D2076249BE6065106103EB3970EA3E4CDA8F1237B6E19835C
96AD13662A898DCA15200CD66155B485B3BF3B3EFD2B6E5E73A86270DF3D45E5
68B585AB053C0394B36935BF791DC571BBDB57C380D73A56E42FBF5864E5364B
70826981DDAE4D183C6CB8ECC0475B714F8861A22D52BC61644CABC4E77799FA
79BFC60D089D25A52387D1E98555E29C9359AB12100C53A2DA6459E29A90B639
F8A80D3358DC38AD29383E9CFFBE02D6DD7CFFF8FAA3F2614634B1EFE959C7D1
6F3ABC0B4D069E9B200097952014FB7D4CE54FF6042D3A7BBC3767590D8C317C
CB3AAB842C23E02837E73A47FFC7278055DF907D05286DF5343C2D7C7A1ED30D
009812C0EDCB14EEF4F8481B8A6B30B8ED1C1C836A3AAA4422457CB37C70F834
857240A3670401D63DB538A09C268C77F0AEFEAE75769C7FC44F9C6073F70322
26FD14392E4A35C1914325A0FB84469998DC84E1AC6F873D61DE783E70D7A465
A9F78722B5C025BB53898772CEAC42E61CF76C21E4D15118AD9F04111EDEFA37
48444CB2DCA1D7FE52EAF6C9A995518F51158E2A9A301A4FA3F3A46BC7DF3B5D
0194F2BD97B79363D4F9DDEF912471DAC8E039045F07CDC5B913C39AE5C60AB1
04472A033188BFC89F6130BE59B92214D2300C2B8240D92270A3CB224E60E9DE
F89009BC94237D6DB417B60C4E2ECCF678EA35F909E539FE8C64EB7097D170BF
8AB6B7B50544F4ABAD9C37BF1320F2825E6835CD9B696A33BE6A6567EC764D0C
016956F39078BC28C69B74B4FCFB1D450BFD31A0207F8F64EC1A17C691EF8F4B
0E2D3A8153F6FE1881513035FBB985314811D6B0B34A5A3A8BB8D72B6E1F2DC5
0F02719A5401EE89DDF04880341D19C3026F7EAFCAB5B6BBACC93850D06F4DB4
23402B540B37EA5430836E25DFCCEBA35E081AE241C50431105B8AFF4D485AFC
D5BE5D37E65C925930AC28CF814FF940CCB8030855EA1489F3953DE3B5E7661D
59426EE1606DFEFA7E016C01E036EB96DFC62CBBEA219B52974FF77260F9A2CF
1CEA76BA43F1995A4FE2D5DFCB273C2FD46510EE142F8410744BA6E6EC3F7DDE
20DADDCD7F03591D1A139B4BEB2D07509BBCC942115929B05CAA1FB6ADA882C7
E6E304B877B2809299BE2EA561483912F1025F0E3040A2F6ADBBE4483D62A805
3D8A3A8FDD6CA10D353EA53334B7016608FA4B4D211D4A674B5CA5AA378F77B6
02F1957320747CDBB900FD6D01F02DCC3EB1B69571D48F174A20C4C9EFD57EE5
2E1DBEB2F9CC76F7B2CF512CB6732F782AC67A007E38454CEEA83B3107F9FEDC
099A0B3E0B614F7EA486316D1AEA39EE31513B9A006C0C3BD2A1D8BF25C47CEE
98EAE7C3585A012EA984FFCBFD691750B315848BD5480660123A45D81BA7BD84
CE320053DF5E4D97AFCB63DF98E3116E1EF629BF5737ADF9E82E52B6654A42DE
EB283DC408734CBC26BA5AF84EE3A09314495C49434EF7CF5BE7133C2FEE19EF
F6FA34B31493ED914443AEFE8AAAAFA6FEF75477B55981278593640D9A1FD9FE
BE6687719E89A45E8BCFBC9D2CD934F7C0CD26A54297A5301DAA3BE312CB099A
AF19FBE445294B08D0C8E96E7AFB3FD0E8761A54D6600C680064D8F91A5DDED5
E8E929D5CE2F0AF053EC97FDD8B50223161AFAD4B68940EB3C2A86928F44DF0D
03E77E66E2D051CEA0555B83D0E9EDE46F213B77A6EFF53657BE4D01FE5E11F3
9EA4F5226AE1BEEBB5BA998BDF414836BF0F9A2D35C4461B395D4A5C9502439C
244A9743A2AAECB6646FCAD52F93FD51
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX2488
%!FontType1-1.0: SFBX2488 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx2488, tcbx2488, labx2488, lbbx2488, lcbx2488, rxbx2488.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX2488 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-205 -316 1564 922}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA30E93C19889DE21E60D1FDB2BFE19ABFEF06059
8A659CCB607015182EC681AF73ADDE4533A86C8A88DDFD99E33AB4637931057E
AC7D9DF42B614C752A4175AB95C7E0AB2A036E2E0B49EA8205ECFC2290E6E927
E0CDC62A1742FC8E59EA1532BF2721235ECE5FBE40A9DE5411F785DD21009E4F
1E0974563ADC9CF62D37819E39ED65120FB9C870C1823C3F96198B4A88435968
73AD99EF27B2E0BD2FEAC130296DEC42786C23651F4199AF1251DF159B7DCBE2
4E2A7B6A7765F10DB0707FC84D49B021D432A4B6DDF145E8C9604BCD081997D8
5FE2A113308C11753DDB0301F572C3790B7FDBE0DA142487D27CBBB1228B7FF4
5990EFE9A1AD38B9FCBAACC2C3FE78B05D3C597476DD1BD6BE76B78BD875A91D
E61C79D2049588978FFEE57606CE37B4CC639447FBDA179E5D657AE76C1350A9
3E4EFC7D003366F550F2399536AD7722B1C17AC3C973B097153F3F1FF6DF7CF9
8AF85C0631FEBB48E1C783A623F53F382BD88C41ED9A1F44FA77F70816BD99FD
28A71AF42CFB86401E2D85B555E493A4D4923D3E6DBA45893785426343E1E646
925DCCD302343D6ADEE9FDB3D9C91835C7F94F8904D69AA567B8E7538C486958
DE83E2EA48EB8BE7F57664E0011ABC707B5A54E833D8DB9266AD753ACF844536
CF63146D84D930F5D8F7A409CF367D695F25DFC24FA1317F969D2ED8069FB4A7
E0D8BB63E7C9EB62301AAE7055D9B44943C49DEE271180327625682E2630BFBC
096AE5958EF7FEA5F543A3891B7E72E7E3BBC8734A30D8636B2F07B03F3C0D9D
6EA10F13A9334659FB1E3FDE739ABE03745E2B98A65D46855CEE364ED35377F2
AEDEC124A1665DF088074933F8A7C7A384AF50B6F9E3D49D4B6E89299133BEB6
2F8D1691C523B6B445208E2B36CD36DF87832C5EF08BE5129A3B4956E3B529CA
416E161D4DD32EC802115E5ABE95A2ED60781C858F6E6E37B1F583C5F29F6164
9A21FEAB076CCD1432397AF96DA816F5179CFBE7140E02C5A8CC222291681AFB
56C08D0058ECC4E243C946D05F169F3F923E9B7CDEC9976448C4D1AE335E5073
B23BEA0EBCF391BE9C9450222676364AFB9DC9162339892CF2971FB375F394D0
A1EF6BE099AC20DC2E574F3C3E9353AAA14C871A230401234B3271C7494B4403
A917AC4C818EA103F17546A96F647073AF9B3960F98A4F749DB0845D7A1BFB1B
8349019A3AAD25E7467ACF31FCEFAEC3C7E98C614BF0BCF98668E60F16AAD2FD
CA92BC85A23037BD3216A9022BDCF275C7A5AA9DE3B1D2770A526C791680D470
3B3EF8A52BFD2B0D73A848CF812FE1C1E92EC5948EF041AC4F760C2E070A5E8A
38601D62D4246CA01559ADE0C0BE6265A7AE784CC08B86A3021A5E517F3A5822
F5E3B876E2B431CA7085B8C474398013F18D7EC508826A589491283CDD84DA84
200884D5F63C4253C699615707DA4C0C8FFE2931C09190CF96395C01AFB56EEE
B1C77982ABB8EE6140B32005D6FDD8032C07A41D1A7215A0BD4E1C327A4DA1BC
A9DF66CFAA3E3C9EF2EA20A1F5775D2F487873EF02A3817121EF51B06E518DA6
5E02328C23570BD17A6F73C02A2F6319B8CCADF5F7D940CE90249C21583EC737
215883E3A284AB0522473644EC48187A5E602EDFB5C56D031B0E5582DAE1FDC1
5A43243CD258A3016BF198EFFEBA06DAD2AF7ACAD20D87BCC1681E0EB3CBDF30
787ADABE840BD298702148110935B920278B46E6830AFB9C241028E4B03580C3
6A691DC2BA91ABBDD22C28462C4993A2EC2654F0DF293296892B97F7ABE0C014
82F21340FA5A1647F7FE4050BCA3EFEBEEBCBB9E556B6F07D6254B6E558CCA78
10B822AF7359BA3562E48A18302104F261D59B40CE1E87A94355B3DBA25B73A8
B3D716AB89F3A05B1B2A3625A73710FEE11B6B3B23CD2AD462743A568581BA98
06EABB808210BA22E31330AF135263448E11EEAA9C42FCF442B59A3F5EE82EFC
EBE653CAEAA3E54E66EB06C025BDCAD46B9F4A8425FE56025D186D458FD46CB0
DD2A1936A55ADFF8F3172EC5D54CB21A5BE50BB39E499346B2E7BE0581F0CA16
0B8537E1E7436FBE5D6560DE129DAB52394D2B2CA27C4CDEAC8BE39013081DAE
4FFEBC10DCA2BDBDBB7E7785E47D263F0766772A359FB2DF0ADD8059A18038B3
A93B3DC944C76ACD1DBF9F72A09A9F65D4AEF78EFA4194F8B382D838FF159460
A2C7DDF0A2E208DE89565A33E04FB4EB99E3FFA8668A139C73500CE409B509D7
885D4BDA1BFE1969E63E00501096018E95E6497BA3A8DDF6BE4931819BF48B07
8E6DEC115A4BC6257DD2F83731A0B20D18F3C5AC2AE6DB4A6212F38D164582C2
0DFC0E1AF48FCC5A39915C46D4313FC113C1E46ADE60BFCFDDB18CAC29B4284A
A4009E88F3B4EB5FCAF43F1D91255828E09E44CBAA3CB16E7F9EB3B66451D94F
DCFC3D8AAB4A2B8CE678B0975721D1848FA2B059C1C940C065083EDE384D43B7
967C05D0453B90FEA4A7EDB4D67BCC0CA88FDAAE688ACFE4B44DFF73821467FF
1946F2D919812BE51E7951C1710EF6ADAF097A54E044F42EC01F872F4AF270ED
5D8DBA63666244ADAC251BF383AEDF5B51FAFF0174012508F2670400F25CA6F6
3A2A1E12E33D33B56BB2ED3ACBAF58A521634A31E620C8987AFCA2D0E5D7B310
F54F82A1A3D214AE2750886E1F1A99784E96C1DE490362FAF9FF260EF8EB3A14
25ADDE3EA443D87E1433366B953DA1D758DD173F82B89450EF711CA111B2562B
2F104FD8DDC4709FF156BB3B7D3F630F89B85AE1044880D04A881DF72E3EFF1B
86BD4C981B3109A19FCFE13E36CD2D9FBB84407FBEA91A5C1847CC6D4EDCD282
0D4F3891F262C0C5D6F5BC07D77C679AB4EF848DCF1A994E99BD2EF698FC41B9
18443EF7BCFA351166ABBE26B95ABA4E4EF60D85D6EB6A1411DB44C40BA382BF
B1F6B493ACB4AC69B3D1D6F781272500E632C8A1CF160C2BB20128B6EAD4D7F5
EB46265AA5ED4ADBBBA23BC2CDC51B3F5CADB85421B005B6F6841532A20AD475
C2ADC80140514119D363B0A8AF6962196E6131158F15D3F714C1764C36342110
31A83B03E27769ED2EB5696A397A2B985B57642691BC0168D35C37A1339AAD0F
444F479BEA165484DCC9405131AA6593D96E0FCE021616D0DB89C51001090A4A
7DD81C5B70AE58A63D575AA6135D164A571F6073A338B17B31C12ECE071CB251
03C640F048A109FD27E16288BF3A8F45BFB5024F2D96546D483D807126DEB7E0
C94CAF9E06D0C735EA3C1D5B0DACC1788B9E62CC5454EF12F2D8BA1FFA7D5836
72522AFD19F8C759961ED84983411522A98CA805CF2EBE2D98711E488D766749
A40E7E8247757063E130D6D4967D866AEC51D404780C7040770E0BC12101ADD2
0399EB6F2622FD2F44F7281B4715794B7A1BEA96746DF927B1B78AE0AF474B55
4530D8E321AA77AD96270F0C2049F7C5F891F30DD3D978A78A4ADC04F7B7D144
110C70F6FABADF813CBD945DDA5545001321A38CD713C8E2501A63ABFB7F6C8E
5929E5DA54E9306418CD7E169510940A9DED0A4AD1A7DBBD54795E911DDF0C56
D2BC9B1A789822AF2C02181867086C784740030776111D90C98206E38D49AF3C
0128B0329C71A800C03E0409D8C56211C6D2880423B1A2CAD3C42B7F1F6CEC10
3F4D58409B6EB4748BF2934AA97CEBFCFAEC0A7568FCDBCDD01AA97D7DC30574
14513DDDDE40C2A9D48B8B70CC8CFEC1EE1A89340BE770E44A899700BE609FDE
11866633B7F566D32F137F58A2C3C8FD5D1DB151C504570286AF49C568CB71FA
3AB877A528B1A29624B70E814EB71A48908324E78A58C383450F3CF968AB85F3
B712D270EA0209E3747D35FB85DE480708BDCB7CBDC9C0FC006E8C4C3F2D173A
8B8EA53D1CD9A51A7B94F5483928FFC97EBE222AE4AF9E2AA3A52709BA37237B
9EC013B7CF53983E67EC77FC4E639C8A348C13924390C909C288842B157CAD1E
44C4FC596F1EB0AECCFCE96209BEAA676650FF097A6679460F29EBA8E3EEB5AB
A963AC971B7A995188FED3B46A0429248D1C8A69D840F85F6E58C703FBE93C2F
852E8B121A1E1CEDC0550E1FCBC44D4206170B5FE4F667255B877A3405A668FF
968B539014942319CEB5ECA61A9CE619E1E0761E13A5BA19D2774FA22CE45CC8
125486910161478FAB68C59B50B66117E424EDCAB5798C2E260434D90F8A282C
D728D89BC16BE9140AB590C156D776BF1F211004ACE6267F35500897F21B61D9
FCBB6E4073CA165A1180587836396ECD9D49C3C08BA4D69BC9C06CFBE152CF0C
078EB5CDD0D9704BFCC9F1611A0D4AA2A26547A26343A1BB05062BA3BBA2174F
6F41242DF81C995A0F2C6A2486E84A6D87A7317EAE7A9F55093F0FEE24ADF9B2
1AA9AC2E6743B8D0464C4383BAA135A725568E617C36F3DBCBF776018703D691
491B08704C697A121A38581557F61F3299B3628E247CFBD2CBA13AEA374F8F32
FF99A373DF534173BA0BE0FAA239302D33A5A672B4B3BE25B94D5B4607BF0CA7
E042CBF2D8DA4E014B8A511C4D14E1A3C12E158D43B0CD95E2E3A2590E2ED82B
AF81C98CC659859E069F70F570409361CFB07A6E8DA7A1A94773BC1AA35CEF94
BCCEDD6F29B53E2840A2317E38B52ED6C90ADE3440C82D48D6A33EDCF9D04669
581D55725B5F206DB3276A13CBC0EB3EA955E179CF8F45AFF8B43FF0AC533EB8
FF397620188FE7F54CC51ED4CB9221317C8F70502EAADF7A9A1D219564801CC5
1BE0EA93877036DDC3A1540090F5BB2B6DDD4DCAE4B20AB9C0FB3CE54A2AF8C8
47C84253F5CD52915E685ED11480F436D632A308872D3E7C2F9F2FE388743405
91A91AF1E97E5A4D210C70E57DA1B6D714E3230F4B05040A5941398D7801B20A
B9F43972FBD40A3D1B17CA995A1A5D31C88AC04A170C35D1CB998D411040AC62
70B239354032B42CF908309E1CD67453FC59A5C02992B2F3964B99E209080F79
4F3ED20D24B5AE8557E83B04E9F92DD7342373D4E53A78307DBBAF5E1E418FDD
BC58DD3D51A3493E9D165F3ECC1551D1197C57AD21E5D97EB1B4C0B5DDF3DD26
607334B9F7BC588FD51AEDC2771321F8DC3DD1F1F3C78FF7AC4DA62989DB373F
4DBBE8F9043445D4E0ECC934250B86A2B91B8110E0EA6718CCC099B72B68B37C
97E610E7D168867847B65D0F5B1A7206C8A1C712F2B02B3A5702776B4EFD3BBC
B53D9163DE849C1ED9D7DCE21BD581BA61EDDF6C37B2D1D288D0B90222B25220
620EEBA206AF5CA0243EB61C6ED6B6F0F5ED7D437AE3F14C4F0DD1698D9759C2
50B3A3074DDAC2A26AFDF89367290A9191A623F1AB688FF87FBAA62DC16EDCA0
696663CCE9936DAE0D21C4B779166ECBBED6EE09D1D65F2C2BE666AA66725BCB
DF379F434A940E8D41A4B19E695AB781AC8A49B118B31B1944AE889B84F15EF9
64133BA2AF5597592B3816CD777C55A4478B65DD27E903DBF842D827B33C669E
763381237A31C95D68460E9D23B3ECFFF53A6AA0BDF1816FC35BA4A820A017FA
6B9197165F5539494B42176BBAC6D0078BFFD5CF7A2221043457CC2F646C411E
79CC4B292021086824CD71666C718B0685DAA438B37A6D995CE72073D73878AB
F61030B5A9733F6A7DA8B1FAA9D333203F8F7E67C704A4E4C502B8F93CFA53DB
00177484BC321B833108B369D968B34FA59E86D61C5143801078B619CCA6FB85
46796B6E1ABE8BE912F59A1C9B9E466F0258ADBA095A1C3BAF25E1DF56740299
56BC7E8811F2EE19E84AD9437D1035931306813253D0AE866D12256F204A73A3
6CA5DBC05A790CF4BDB53CBD3D2B903F8B7D32CCCB8E6CA24FA190CD5F09A873
92800E36695C094E10B3F0D345E5C2D0E8FAB3A0156E63AE071B3E67F00029F5
4AC579D49DFAA54ABE7B607A84DE64405908A3F11A0A2415F87CAE126B8877CB
D1EF75B492DF44E4D18686001320C0B73A3C9B5FBDA402071201F9544216D392
A4051318283BE14C5DEDD25907CB5FABAFF5B0E318392618604AA99CB59E42BE
A3B7CA2508355C56BC45CDFC3B47C188BB9107507EDDEDED083C04F72BC37090
660C5B49E8882EB7FADE34CBA0C54E1F59886AC35C27648206F893FD55A9CEB5
48E54EA57F452E3896BCA6B0C6B871F028E601051F0857C29192867A13244125
55B32DC09D7CF35CD896C1AD91DB63ABBEE84A91DA057C832E564392765BE862
5C1BB8278EBD8FB78C7D9E59A0C711957835369276C0308838BE235E25DA3D22
6FE6D5AF5FE7C52CD3410CD75F1762444C55AAEF40F1C541BCA63E7919499D35
A59EB974BB252CDA74D15AE70E0C9565FAEEC1CEE5043C62E30B3F0EC2683ECD
F423D6EDA89A84C6BA5A651B01EACCF0442490FAE838CEAF5D712DE7D1D7223B
45B1ADA04C0BB921DDD6BA102A088F0236335387EE3D53B3B1AAC4BC94CB06AF
224E917EE8D2F229A8E2905508A4C6F25C471A12F0DE5D5BA63815F71A722F68
A865912131A1AB25065C215CC69AED58357A02192233CA714B885A88D8D9F861
4FED45D385B9282F6DF8A920815B2E65E4BA85173909A8F2341E33AFBC2BA3E7
E4883512F47B4F3D849B1ED78407FC8FF7D272905289E65AF5916D043216608B
CE43846FA1497155E745CD68B6019BBAF21B62E873A24B09CDE12FF36194ADAE
A62942E24E18E6959C04253E911EB3E6200DFB4E1C00DDDD108CBE74AFC5F408
A8D93923D345AE3491998E34AE5E41424E11122F6192B5AFF66D014A44E6484E
8AC3D3BC61786560C7C0F2CABCAFEE5B3A18DB158026B7FC8E85AB8C5339AC80
D5C56364ED7372B6B3ADFC199E3D5E8FA339FB3D57C44F2F76A2A25A89838BCD
D1D4DF6B015BA09D58C3C224E59237F2840F8A90647E140C3EFBA0D28DA13781
E20AD35E7B9CC09E0CCBBE81E95D4C8811890CD6E7198EC4A7F498A54CD786F6
774A0144CE606DB8E47FB4E063BC269800723B0EEE0685C2F577DDC0380CCB77
D5C7830040F91502CE940FE52755DF6B303A9837C86386272B39DF4235844E5F
4E839192EB8457C1EFD294237079746535B27D21B46E7304FE1D93196E0CA751
050350107AA662AB196557CB07B79F14991397937E4528A3FA60BE3E50012196
9A543B89B5C2E2FAA08EE97B047FE532C72673F71906BABF15DCBFA7BA79905C
3ACAF9B34EC8F4F6AA5A9D11204BD3048ABC23D224E53B704E2E14B36B046649
8543AE1059916C8A8C678FAD774581827E7E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (tp_requete_http.dvi)
@start /Fa 134[45 2[45 1[35 37 33 2[49 50 4[23 2[30 43
1[43 14[67 12[65 1[58 22[27 46[{ T1Encoding ReEncodeFont }15
99.6264 /SFSS1200 rf /Fb 21[60 1[60 111[69 95 69 73 51
52 53 69 73 66 73 110 37 2[37 73 66 40 60 73 58 73 66
11[101 2[98 42[37 39[{ T1Encoding ReEncodeFont }27 119.552
/SFBX1440 rf /Fc 21[51 51 115[62 44 44 46 59 1[56 62
4[31 2[34 51 1[50 1[54 14[84 8[42 18[56 56 56 56 56 56
2[31 37 3[44 41[{ T1Encoding ReEncodeFont }25 99.6264
/SFBX1200 rf /Fd 21[43 43 43 43 6[49 101[43 51 51 70
51 54 38 38 38 51 54 49 54 81 27 1[30 27 54 49 30 43
54 43 54 49 11[73 70 54 72 76 66 76 2[61 3[73 1[64 1[74
70 1[73 1[46 10[49 49 49 49 49 1[27 33 27 4[27 8[81 1[54
57 27[{ T1Encoding ReEncodeFont }56 99.6264 /SFRM1200
rf /Fe 139[73 1[73 1[105 94 2[52 6[84 1[84 14[136 3[128
7[141 72[{ T1Encoding ReEncodeFont }10 206.559 /SFRM2488
rf /Ff 171[150 3[148 21[60 58[{ T1Encoding ReEncodeFont }3
206.559 /SFBX2488 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-364 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -299 -103
a Ff(TP)72 b(:)181 b Fe(proto)5 b(cole)65 b(HTTP)p -364
17 4489 5 v -217 317 a Fd(Les)38 b(na)m(vigateurs)h(w)m(eb)h
(e\033ectuen)m(t)f(des)g(requ\352tes)h(HTTP)f(p)s(our)f(a\036c)m(her)h
(les)g(con)m(ten)m(us)h(d'un)f(site)f(w)m(eb.)i(Ces)f(na-)-364
437 y(vigateurs,)g(disp)s(osen)m(t)f(de)g(fonctionnalit\351s)h(app)s
(el\351es)f(outils)g(de)g(d\351v)m(elopp)s(emen)m(t,)i(qui)e(p)s
(ermetten)m(t)h(de)f(comprendre)-364 558 y(ce)g(qui)h(est)f
(r\351ellemen)m(t)i(c)m(harg\351)e(sur)g(l'ordinateur)g(quand)h(on)e
(visite)i(un)f(site)g(w)m(eb.)h(Une)f(fois)g(le)g(na)m(vigateur)g(ouv)m
(ert,)-364 728 y(on)32 b(acc\350de)i(\340)d(ces)j(outils)e(par)g(le)h
(men)m(u)g(ou)f(par)g(la)g(touc)m(he)h(F12.)e(Di\033\351ren)m(ts)j
(onglets)f(son)m(t)g(a\036c)m(h\351s.)g(P)m(our)g(\351tudier)g(nos)-364
848 y(requ\352tes)i(HTTP)-8 b(,)34 b(on)e(utilisera)h(l'onglet)g
Fc(R\351seau)p Fd(.)-364 1196 y Fb(Une)44 b(premi\350re)f(page)g(w)l
(eb)-217 1440 y Fd(Ouvrir)h(le)h(na)m(vigateur)f(\034refo)m(x,)h(tap)s
(er)f(sur)h(la)f(touc)m(he)h(F12,)e(c)m(hoisir)j(l'onglet)e(r\351seau)h
(puis)g(saisir)g(l'url)f Fc(in)m(ter-)-364 1560 y(stices.info)p
Fd(.)p 0 TeXcolorgray -268 1841 a Fc(1\))p 0 TeXcolorgray
48 w Fd(Com)m(bien)34 b(de)f(requ\352tes)i(HTTP)f(on)m(t)e(\351t\351)h
(e\033ectu\351es)i(par)d(le)h(na)m(vigateur)h(p)s(our)e(a\036c)m(her)i
(la)e(page)g(w)m(eb)16 b(?)p 0 TeXcolorgray -268 2232
a Fc(2\))p 0 TeXcolorgray 48 w Fd(Quelles)34 b(son)m(t)f(les)h
(m\351tho)s(des)f(emplo)m(y)m(\351es)j(par)c(ces)i(requ\352tes)g(HTTP)
16 b(?)p 0 TeXcolorgray -268 2623 a Fc(3\))p 0 TeXcolorgray
48 w Fd(Quels)34 b(son)m(t)f(les)g(di\033\351ren)m(ts)h(co)s(des)g
(d'\351tat)e(des)i(di\033\351ren)m(tes)g(r\351p)s(onses)g(HTTP)16
b(?)p 0 TeXcolorgray -268 3014 a Fc(4\))p 0 TeXcolorgray
48 w Fd(Que)33 b(signi\034e)h(le)f(co)s(de)f(d'\351tat)h(304)16
b(?)p 0 TeXcolorgray -268 3405 a Fc(5\))p 0 TeXcolorgray
48 w Fd(Quels)34 b(son)m(t)f(les)g(di\033\351ren)m(ts)h(t)m(yp)s(es)g
(de)f(con)m(ten)m(us)i(ren)m(v)m(o)m(y)m(\351s)g(par)e(le)g(serv)m(eur)
16 b(?)-364 4461 y Fb(Requ\352te)44 b(et)f(rec)l(herc)l(he)j(textuelle)
-217 4705 y Fd(Sur)22 b(la)f(page)h(d'accueil)h(du)f(site)g
Fc(In)m(terstices.info)p Fd(,)g(v)m(ous)h(a)m(v)m(ez)g(dans)g(le)f(men)
m(u)h(une)f(zone)h(de)f(rec)m(herc)m(he)i(mat\351rialis\351e)-364
4825 y(par)33 b(une)g(loup)s(e.)p 0 TeXcolorgray -268
5106 a Fc(1\))p 0 TeXcolorgray 48 w Fd(Saisir)g(le)g(mot)g
Fc(requ\352te)f Fd(dans)h(la)g(zone)g(de)g(rec)m(herc)m(he)i(puis)e(v)
-5 b(alider.)33 b(Com)m(bien)h(de)f(r\351p)s(onses)h(obtien)m(t-on)16
b(?)50 b(?)p 0 TeXcolorgray -268 5497 a Fc(2\))p 0 TeXcolorgray
48 w Fd(Commen)m(t)34 b(est)f(transmise)h(au)f(serv)m(eur)h(la)f(rec)m
(herc)m(he)i(e\033ectu\351e)f(sur)f(la)f(page)h(w)m(eb)16
b(?)p 0 TeXcolorgray 1856 6310 a(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray -268 -146 a Fc(3\))p 0 TeXcolorgray
48 w Fd(La)29 b(m\351tho)s(de)h(utilis\351e)g(p)s(our)f(la)g
(requ\352te)h(HTTP)h(lors)e(de)g(cette)h(rec)m(herc)m(he)i(est)d
Fa(GET)p Fd(.)g(Des)h(informations)g(on)m(t)f(\351t\351)-120
-26 y(a)5 b(jout\351es)34 b(dans)f(l'en-t\352te)g(de)g(la)f
(requ\352te.)j(Lesquelles)16 b(?)p 0 TeXcolorgray -268
601 a Fc(4\))p 0 TeXcolorgray 48 w Fd(Sans)38 b(utiliser)g(l'outil)g
(de)f(rec)m(herc)m(he)j(de)e(la)f(page)g(w)m(eb,)i(r\351aliser)f(une)g
(requ\352te)g(HTTP)h(en)f(rempla\347an)m(t)g(le)f(mot)-120
722 y Fc(requ\352te)c Fd(par)f(le)h(mot)g Fc(secret)f
Fd(puis)h(donner)g(le)g(nom)m(bre)h(de)f(r\351sultats)g(obten)m(us.)
-364 1542 y Fb(Requ\352te)44 b(et)f(en)l(v)l(oi)h(d'informations)-217
1786 y Fd(Sur)32 b(les)i(sites)g(w)m(eb,)f(un)g(lien)h(est)f(souv)m(en)
m(t)h(disp)s(onible)g(p)s(our)e(con)m(tacter)i(les)f(administrateurs)h
(du)f(site.)p 0 TeXcolorgray -268 2017 a Fc(1\))p 0 TeXcolorgray
48 w Fd(Quel)g(est)g(le)g(lien)g(qui)h(p)s(ermet)f(de)g(con)m(tacter)g
(le)g(site)h Fa(interstices.info)16 b Fd(?)p 0 TeXcolorgray
-268 2408 a Fc(2\))p 0 TeXcolorgray 48 w Fd(Commen)m(t)34
b(se)f(pr\351sen)m(te)i(la)d(page)h(w)m(eb)h(accessible)h(par)d(ce)h
(lien)16 b(?)34 b(Quels)f(en)g(son)m(t)g(les)h(\351l\351men)m(ts)16
b(?)p 0 TeXcolorgray -268 3035 a Fc(3\))p 0 TeXcolorgray
48 w Fd(Sans)35 b(compl\351ter)h(la)e(page,)g(cliquer)i(sur)f(le)g(b)s
(outon)f Fa(envo)m(y)m(er)p Fd(.)g(Rep)s(\351rer)h(dans)g(la)f
(fen\352tre)h(de)g(d\351v)m(elopp)s(emen)m(t)j(la)-120
3155 y(m\351tho)s(de)33 b(utilis\351e)h(p)s(our)f(cette)g(requ\352te)h
(HTTP)16 b(?)p 0 TeXcolorgray -268 3546 a Fc(4\))p 0
TeXcolorgray 48 w Fd(Compl\351tez)27 b(tous)f(les)h(c)m(hamps)g(prop)s
(os\351s)g(puis)f(en)m(v)m(o)m(y)m(ez)j(v)m(otre)d(message.)h(Les)g
(informations)f(en)m(v)m(o)m(y)m(\351es)j(son)m(t-elles)-120
3667 y(a)5 b(jout\351es)34 b(\340)e(l'url)16 b(?)p 0
TeXcolorgray -268 4057 a Fc(5\))p 0 TeXcolorgray 48 w
Fd(Commen)m(t)34 b(son)m(t)f(en)m(v)m(o)m(y)m(\351es)j(les)e
(informations)e(saisies)16 b(?)p 0 TeXcolorgray -268
4921 a Fc(6\))p 0 TeXcolorgray 48 w Fd(Apr\350s)31 b(l'en)m(v)m(oi,)h
(le)e(form)m(ulaire)h(est)g(vid\351)g(mai)f(un)g(message)i(est)e
(a\036c)m(h\351)i(en)e(bas)g(de)h(page.)f(Selon)h(v)m(ous,)g(commen)m
(t)-120 5041 y(ce)i(message)h(a-t-il)e(\351t\351)h(r\351cup)s
(\351r\351)16 b(?)p 0 TeXcolorgray 1856 6310 a(2)p 0
TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
